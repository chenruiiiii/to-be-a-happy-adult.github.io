{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/404.svg","path":"img/404.svg","modified":1,"renderable":0},{"_id":"source/img/alipay_trade.jpg","path":"img/alipay_trade.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/index_bac.jpg","path":"img/index_bac.jpg","modified":1,"renderable":0},{"_id":"source/img/wechat_trade.jpg","path":"img/wechat_trade.jpg","modified":1,"renderable":0},{"_id":"source/img/01-this-img/image2.png","path":"img/01-this-img/image2.png","modified":1,"renderable":0},{"_id":"source/img/01-this-img/image1.png","path":"img/01-this-img/image1.png","modified":1,"renderable":0},{"_id":"source/img/01-this-img/image4.png","path":"img/01-this-img/image4.png","modified":1,"renderable":0},{"_id":"source/img/01-this-img/image3.png","path":"img/01-this-img/image3.png","modified":1,"renderable":0},{"_id":"source/img/01-this-img/image5.png","path":"img/01-this-img/image5.png","modified":1,"renderable":0},{"_id":"source/img/01-this-img/image6.png","path":"img/01-this-img/image6.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"02549e41e4953152baa7925d0d3035023414e7e6","modified":1747054026657},{"_id":"source/about/index.md","hash":"e4e92a881b298531bff5b52a59e438cde00e78d2","modified":1747058277390},{"_id":"source/archives/index.md","hash":"40342eae1e9fbfceb03710c9664e8729af7f5aa6","modified":1747058226156},{"_id":"source/categories/index.md","hash":"6673d2b8d4050478a4a6125437f250320a97eb87","modified":1747058226139},{"_id":"source/music/index.md","hash":"5a74d2da0d8aab60bbee460173efdabffae052e9","modified":1747058226149},{"_id":"source/tags/index.md","hash":"02312f13f2f06c40061c3f71ac45ca9602687b6d","modified":1747058277382},{"_id":"source/img/favicon.ico","hash":"41015bbacfbd0ec57c10d270b86c58b01a3f145a","modified":1747056883952},{"_id":"source/img/avatar.jpg","hash":"84c68aef5d5749c801ae62447aa58317e01eab23","modified":1746930508130},{"_id":"source/img/01-this-img/image2.png","hash":"3a96b1979ca8518db0c43d82d21a8bab88eaa256","modified":1747224626165},{"_id":"source/img/01-this-img/image4.png","hash":"2f7f5b837e2a85e9d9dd95b7d30fa59a079639df","modified":1747224657413},{"_id":"source/img/01-this-img/image3.png","hash":"0216b6a99351fcbe79f16b23fae5a7343cfe4f2d","modified":1747224645377},{"_id":"source/img/01-this-img/image5.png","hash":"b1489a81f900a920c4e790483431442134e2aeff","modified":1747224673007},{"_id":"source/_posts/js高级/1. this的指向规则.md","hash":"c8eb08a21e32cdd504717c5c63b6c716d53c737b","modified":1747225626750},{"_id":"source/img/01-this-img/image6.png","hash":"952873d4616ac1fb22178efd4a99d0f81f1ea2e2","modified":1747224684588},{"_id":"source/img/01-this-img/image1.png","hash":"dadf8bc5ee07fe0f90c495525f584227952ba723","modified":1747224597982},{"_id":"source/img/alipay_trade.jpg","hash":"83d4e93b66c4f4a2d23da025566e799d533d35dc","modified":1747057721947},{"_id":"source/img/wechat_trade.jpg","hash":"e0e29133acfd87a6ec91b6ebc47ef7d102c0a70d","modified":1747057707180},{"_id":"source/img/404.svg","hash":"2067af374ac024b203aba31ea1ecf30ff7bf1d24","modified":1747057392043},{"_id":"themes/butterfly/.gitignore","hash":"1a22e577d9900e645b55d40d210e87c2a0d1221d","modified":1746845952889},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1746845952889},{"_id":"themes/butterfly/package.json","hash":"dd598502734c702eed104a3f955f75568e18a29e","modified":1746845952932},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1746845952890},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1746845952889},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1746845952932},{"_id":"themes/butterfly/_config.yml","hash":"977b1baa2ab7f0973e5add44b1412616c3282b63","modified":1747225462024},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1746845952891},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1746845952887},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1746845952891},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1746845952893},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1746845952891},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1746845952892},{"_id":"themes/butterfly/languages/en.yml","hash":"52f04fc99fc45db8a36a0ea76989defa0b2ca2a2","modified":1747060837838},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1746845952892},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1746845952893},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1746845952892},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1746845952931},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1746845952931},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1746845952931},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1746845952888},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1746845952888},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1746845952888},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1746845952930},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1746845952888},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1746845952894},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1746845952894},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1746845952888},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1746845952894},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1746845952933},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1746845952900},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1746845952906},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1746845952906},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1746845952934},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1746845952934},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1746845952935},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1746845952904},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1746845952933},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1746845952934},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1746845952934},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"58aadc5701d70534fe9f504460aa1521c3972f7d","modified":1747225461995},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1746845952940},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1746845952936},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1746845952935},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1746845952940},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1746845952940},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1746845952941},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1746845952941},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"9e2aecc0afd5393d84bdfe950adc9fd99e4a5d10","modified":1747225462065},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1746845952942},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1746845952942},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1746845952937},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1746845952942},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1746845952941},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1746845952937},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1746845952937},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1746845952943},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1746845952943},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1746845952960},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1746845952939},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1746845952938},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1746845952943},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1746845952939},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1746845952965},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1746845952937},{"_id":"themes/butterfly/source/js/main.js","hash":"1870209f7fed2f84321c7f4b95df20839f397865","modified":1747225462031},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1746845952977},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1746845952966},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1746845952976},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1746845952965},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1746845952895},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1746845952960},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1746845952960},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e6baac100a37dc66d5fc5183bf80616eda3bfe28","modified":1747225462018},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1746845952897},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1746845952899},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1746845952899},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1746845952898},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1746845952902},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1746845952897},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1746845952902},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1746845952899},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1746845952900},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1746845952905},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1746845952906},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1746845952901},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1746845952901},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1746845952906},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1746845952901},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1746845952904},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"f845a13ac020c47f91528e8e15aa5d56bcc528c1","modified":1747225462002},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1746845952922},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1746845952917},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1746845952922},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1746845952925},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1746845952925},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1746845952927},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1746845952927},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1746845952929},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1746845952928},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1746845952928},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1746845952928},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1746845952929},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1746845952930},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1746845952973},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1746845952930},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1746845952929},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1746845952975},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1746845952944},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1746845952949},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1746845952944},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1746845952949},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1746845952949},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1746845952950},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1746845952950},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1746845952950},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1746845952949},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1746845952951},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1746845952951},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1746845952951},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"9a60f9c5eef3fd7ac741a2c6371751e7f2771410","modified":1746929987377},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1746845952952},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1746845952953},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1746845952952},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1746845952952},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1746845952948},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1746845952951},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1746845952954},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1746845952953},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1746845952956},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1746845952954},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1746845952959},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1746845952956},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1746845952954},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1746845952956},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1746845952957},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1746845952957},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1746845952954},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1746845952955},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1746845952955},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1746845952955},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1746845952958},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1746845952907},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1746845952959},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1746845952910},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1746845952907},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1746845952959},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1746845952958},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1746845952910},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1746845952911},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1746845952918},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1746845952918},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1746845952918},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"683de9763fdc933a8c8206df0421da08e130fe45","modified":1747225462036},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1746845952919},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1746845952919},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1746845952911},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1746845952913},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1746845952913},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1746845952914},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1746845952913},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1746845952914},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1746845952914},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1746845952915},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1746845952915},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1746845952915},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"6ba4a1c2a440df6178c49a2c80b9adf3ce4e1e5b","modified":1747225462039},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1746845952916},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1746845952917},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1746845952916},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1746845952909},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1746845952909},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1746845952909},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1746845952910},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1746845952920},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1746845952919},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1746845952920},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1746845952920},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"5c944052280c5ed046d2cfeb54b0da8876af0ec6","modified":1746845952924},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1746845952921},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1746845952921},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1746845952925},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1746845952922},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1746845952924},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1746845952922},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1746845952945},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1746845952923},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1746845952923},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1746845952946},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1746845952924},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1746845952923},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1746845952947},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1746845952921},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1746845952947},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1746845952947},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1746845952963},{"_id":"source/img/index_bac.jpg","hash":"db34bc1005ede734255d515a956089e61fd250ee","modified":1746930282221},{"_id":"public/archives/index.html","hash":"e14e24381fea60b3d34b0525f0120bd3b6e3c37f","modified":1747225778545},{"_id":"public/about/index.html","hash":"9043ffa5b1dfd77306f39d1032ba3264431d153b","modified":1747225778545},{"_id":"public/categories/index.html","hash":"939af9198278d41e1929e78a8682c7b3fa0c8dbe","modified":1747225778545},{"_id":"public/music/index.html","hash":"9bb27a0cff57edcfbc1a8d78d9fbd64d0fe7a496","modified":1747225778545},{"_id":"public/tags/index.html","hash":"3d250618ee665656a46068eacd42c808ee082e79","modified":1747225778545},{"_id":"public/posts/62d23d36/index.html","hash":"488d83c6741a1216aa85e9b0eab95d0f44aba95e","modified":1747225778545},{"_id":"public/archives/2025/index.html","hash":"5a565046e7ac273acf421cc09be6455e527a4a48","modified":1747225778545},{"_id":"public/archives/2025/05/index.html","hash":"d009b6592064c256f848471e7b98f31130910d4a","modified":1747225778545},{"_id":"public/tags/js高级/index.html","hash":"5f9ca7a700d274b909034c48e784884ea34ab468","modified":1747225778545},{"_id":"public/categories/分类/index.html","hash":"6702058ae8d85f80637721fa64f907d98e47d620","modified":1747225778545},{"_id":"public/index.html","hash":"db85028ce2a91bb4f4ffed1aaf49023633f125fe","modified":1747225778545},{"_id":"public/img/favicon.ico","hash":"41015bbacfbd0ec57c10d270b86c58b01a3f145a","modified":1747225778545},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1747225778545},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1747225778545},{"_id":"public/CNAME","hash":"02549e41e4953152baa7925d0d3035023414e7e6","modified":1747225778545},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1747225778545},{"_id":"public/img/avatar.jpg","hash":"84c68aef5d5749c801ae62447aa58317e01eab23","modified":1747225778545},{"_id":"public/img/01-this-img/image2.png","hash":"3a96b1979ca8518db0c43d82d21a8bab88eaa256","modified":1747225778545},{"_id":"public/img/01-this-img/image4.png","hash":"2f7f5b837e2a85e9d9dd95b7d30fa59a079639df","modified":1747225778545},{"_id":"public/img/01-this-img/image5.png","hash":"b1489a81f900a920c4e790483431442134e2aeff","modified":1747225778545},{"_id":"public/img/01-this-img/image6.png","hash":"952873d4616ac1fb22178efd4a99d0f81f1ea2e2","modified":1747225778545},{"_id":"public/img/01-this-img/image3.png","hash":"0216b6a99351fcbe79f16b23fae5a7343cfe4f2d","modified":1747225778545},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1747225778545},{"_id":"public/js/main.js","hash":"ddc91ea0c51b82ebb1a281fb02d0244e0ca80078","modified":1747225778545},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1747225778545},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1747225778545},{"_id":"public/css/index.css","hash":"20385609d2768fee9d3b2de674bfb027a7ab5be1","modified":1747225778545},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1747225778545},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1747225778545},{"_id":"public/img/01-this-img/image1.png","hash":"dadf8bc5ee07fe0f90c495525f584227952ba723","modified":1747225778545},{"_id":"public/img/alipay_trade.jpg","hash":"83d4e93b66c4f4a2d23da025566e799d533d35dc","modified":1747225778545},{"_id":"public/img/wechat_trade.jpg","hash":"e0e29133acfd87a6ec91b6ebc47ef7d102c0a70d","modified":1747225778545},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1747225778545},{"_id":"public/img/404.svg","hash":"2067af374ac024b203aba31ea1ecf30ff7bf1d24","modified":1747225778545},{"_id":"public/img/index_bac.jpg","hash":"db34bc1005ede734255d515a956089e61fd250ee","modified":1747225778545}],"Category":[{"name":"分类","_id":"cmanx48x200063krl9j5j2q50"}],"Data":[],"Page":[{"title":"归档","date":"2025-05-11T03:16:27.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2025-05-11 11:16:27\ntype: \"archives\"\n---\n","updated":"2025-05-12T13:57:06.156Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cmanx48ww00003krlddh41gaq","content":"","excerpt":"","more":""},{"title":"关于","date":"2025-05-11T03:16:01.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2025-05-11 11:16:01\ntype: \"about\"\n---\n","updated":"2025-05-12T13:57:57.390Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmanx48wy00013krl8rbx6zb1","content":"","excerpt":"","more":""},{"title":"分类","date":"2025-05-11T03:16:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-05-11 11:16:04\ntype: \"categories\"\n---\n","updated":"2025-05-12T13:57:06.139Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmanx48wy00023krl9srk4nbb","content":"","excerpt":"","more":""},{"title":"音乐","date":"2025-05-11T03:16:39.000Z","type":"music","_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2025-05-11 11:16:39\ntype: \"music\"\n---\n","updated":"2025-05-12T13:57:06.149Z","path":"music/index.html","comments":1,"layout":"page","_id":"cmanx48wy00033krl4zja5ple","content":"","excerpt":"","more":""},{"title":"标签","date":"2025-05-11T03:16:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-05-11 11:16:03\ntype: \"tags\"\n---\n","updated":"2025-05-12T13:57:57.382Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmanx48wz00043krlfxgbhwow","content":"","excerpt":"","more":""}],"Post":[{"title":"this的指向规则","date":"2025-05-14T10:30:24.000Z","abbrlink":"62d23d36","_content":"`this` 到底指向谁? 箭头函数中的`this`还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的`this`指向一致吗?\n## `this`到底指向谁？\n首先，定义一个函数：\n\n三种不同的调用方式，this的指向也会不同！\n\n1. 直接调用\n\n> foo()  // window{}\n>\n\n2. 通过对象调用\n\n```html\nvar obj = { name: 'name' }\nobj.foo = foo\nobj.foo(); // Object{}     (obj这个对象)\n```\n\n3. call/apply/bind\n\n> foo.apply(\"abc\") //  String {'abc'}\n\n**结论：**\n1. 函数在调用时，js会**默认给this绑定一个值**；\n2. this的绑定跟它**定义的位置（编写的位置）**没有关系；\n3. this的绑定与调用方式以及调用的位置有关；\n4. this是在运行时被绑定的。\n\n## this`的绑定规则\n### 默认绑定\n+ 普通函数被独立调用\n\n> foo()   // window{}\n\n+ 函数定义在对象中，但是独立被调用\n\n> var bar = obj.foo\n> bar()  // window{}\n\n+ <font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的`this`指向`undefined`\n\n```html\n<script>\n\t\"use strict\"\n\t...\n</script>\n```\n\n+ 高阶函数\n\n> function test(fn) {\n>\n>     fn()\n>\n> }\n>\n> test(obj.foo) // window{}\n\n即独立调用函数时(非严格模式下)`this`指向`window`!\n\n### 隐式绑定\n> 一般是通过**对象**来发起调用。\n>\n\n![](../../img/01-this-img/image1.png)\n\n![](../../img/01-this-img/image2.png)\n\n### 显式绑定\n```javascript\nfoo.call(obj)\nfoo.apply(obj) // foo {name:'name'}\n```\n\n+ 这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；\n+ 另外，这种形式一般将this绑定在对象身上，如果foo.call('abc')，那么也会默认将'abc'创建为对应的包装类型，这里也就是`String`对象;\n+ 如果是绑定在了`undefined`这种没有对应包装类型的对象身上，那么this就会默认指向`window`\n\n#### call / apply函数说明\n```javascript\nfunction test(name, age) {\n  console.log('参数:', name, age);\n}\n```\n\n作用：都可以调取函数并绑定this，传递参数方式不同\n\n+ `apply(obj,[argumentsArray])`\n\n`obj`是指this指向的对象；\n\n`argumentsArray`是指函数的参数，必须要放在**数组**中进行传递；\n\n```javascript\n// apply\ntest.apply('apply', ['chenber', 18]) // 参数: chenber 18\n```\n\n+ `<font style=\"color:#DF2A3F;\">call(obj,arg1,arg2,...)</font>`\n\n`obj`是指this指向的对象；\n\n`arg1,arg2,...`是指函数的参数列表。\n\n```javascript\n// call\ntest.call('call', 'chender', 18) // 参数: chender 18\n```\n\n#### bind\n```javascript\n// bind\nvar bar = test.bind('bind')\nbar() // 参数:this,String{'bind}\n\nvar bar = test.call('call', 'chender', 18) // 参数: chender 18\nbar() // 报错\n```\n\n`bind`是`绑定（怪异）函数`，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；\n\n而`call`和`apply`都是直接执行函数，没有返回值 。\n\n+ bind()的其他参数\n\n```javascript\nvar bar = test.call('call', 'chender', 18)\nbar() // 参数: chender 18\nbar() // 参数: chender 18    （参数一开始就指定好了，修改不了）\n```\n\n❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）\n\n这里就涉及到了**this绑定的优先级**了！\n\n1. 默认绑定优先级最低\n2. 显式绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  age: 18,\n  test: test\n}\n\nobj.test.apply('apply', ['1', 19]) \n// this [String: 'apply']\n// 参数: 1 19\nvar test1 = obj.test.bind('bind', 'chenber', 18)\ntest1()\n// this [String: 'bind']\n// 参数: chenber 18\n```\n\n3. new 绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  foo: function () {\n    console.log('foo:', this);\n    console.log('foo:', this === obj);\n  }\n}\nnew obj.foo()\n// foo: foo {}\n// foo: false\n```\n\n4.  new > 显式(bind)\n\n❗️`new`和`apply` / `call`不可以一起使用，所以没有可比性\n\n`new`和`bind`可以一起使用\n\n```javascript\nfunction test() {\n      console.log('test', this);\n    }\n\n    var testFN = test.bind('abc')\n    new testFN() // test{}\n```\n\n### new绑定\n\n使用new关键字来调用函数是，会执行如下的操作：\n- 创建一个全新的对象；\n- 这个新对象会被执行prototype连接：\n- 这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；\n- 如果函数没有返回其他对象，表达式会返回这个新对象：\n\n总结(优先级从高到低)：\n1. new\n2. bind \n3. apply / call\n4. 隐式\n5. 默认绑定\n## 内置函数的调用绑定\n内置函数的this指向需要`根据一些经验`获取\n\n1. setTimeOut()\n\n```javascript\nsetTimeOut(()=>{\n  console.log('this', this) //window\n},1000)\n```\n\n2. 按钮的点击监听\n\n```javascript\n    var btn = document.querySelector('button')\n    btn.onclick = function () {\n      console.log('btn', this); // <button>点击</button>\n    }\n btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // <button>点击</button>\n    })\n    btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // window\n    })\n```\n\n3. forEach\n\nforEach(function(){}, {})\n\n![](../../img/01-this-img/image3.png)\n\nforEach的两个参数：\n\n1. 回调函数\n2. 回调函数的this绑定对象\n\n```javascript\nconst names = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\nnames.forEach(function (item) {\n  console.log('forEach', this); // window\n})\n\nnames.forEach(function (item) {\n      console.log('forEach', this); // String {'abc'}\n    }, \"cba\")\n```\n## `this` 绑定之外的规则\n1. 如果在使用显式绑定时传入`null`或者`undefined`，那么就会使用默认绑定规则\n\n```javascript\n    foo.apply(null) // window\n    foo.apply(undefined) // window\n```\n严格模式差异：在严格模式下，绑定null/undefined时会直接使用传入值，this会指向null或undefined本身。\n\n2. 间接函数引用（知道就行，一般不会出现）\n```javascript\n    var obj2 = {};\n    (obj2.foo = obj.foo)() // window\n```\n3. 箭头函数(补充)\n箭头函数是 `es6` 新增的一种函数的声明方法。\n- 完整写法\n\n```javascript\nconst foo = (name,age)=>{\n\tconsole.log(\"=>\")\n}\n```\n❗️注:\n\n\t- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n\t- \t箭头函数不能作为构造函数来使用（会抛出错误）\n\n- 箭头函数的简写\n\t- 只有一个参数时 可省略()\n![](../../img/01-this-img/image4.png)\n\t- 函数体只有一行语句时，可省略{}，但是不能带return 关键字\n![](../../img/01-this-img/image5.png)\n\t- 如果执行体只有返回一个对象，那么需要给这个对象加上()\n![](../../img/01-this-img/image6.png)\n## 箭头函数中的 `this` 使用\n **箭头函数的作用域没有 `this` ！**\n 但是箭头函数中`this`会向寻找上层作用域中的`this`，直至找到全局this->`window`。\n\n```javascript\nconst test = () => {\n  console.log('this', this);\n}\ntest() // window\nvar test1 = test.bind('abc')\ntest1() // window\nvar obj = {\n\tname: 'chenber',\n\tfoo: () => {\n        console.log('this', this);\n      }\n }\nobj.foo() // window\nconst test2 = obj.foo.bind('abc')\ntest2() // window\n```\n应用实例：\n\n```javascript\n   // 模拟网络请求函数\n    function request(url, callbackFn) {\n      const results = {\n        code: 200,\n        msg: '成功',\n        data: null\n      }\n      callbackFn(results)\n    }\n    \n    // 将获取的数据传输给obj的results\n    var obj = {\n      results: {},\n      // 之前的写法：\n      // getData: function () {\n      //   var _this = this\n      //   request('/test', function (res) {\n      //     _this.results = res\n      //   })\n      // }\n\n      // 使用箭头函数:\n      getData: function () {\n        request('/test', (res) => {\n          this.results = res\n        })\n      }\n    }\n    obj.getData()\n```\n\n\n \n\n","source":"_posts/js高级/1. this的指向规则.md","raw":"---\ntitle: this的指向规则\ndate: 2025-05-14 18:30:24\ncategories:\n  - 分类\ntags:\n  - js高级\nabbrlink: 62d23d36\n---\n`this` 到底指向谁? 箭头函数中的`this`还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的`this`指向一致吗?\n## `this`到底指向谁？\n首先，定义一个函数：\n\n三种不同的调用方式，this的指向也会不同！\n\n1. 直接调用\n\n> foo()  // window{}\n>\n\n2. 通过对象调用\n\n```html\nvar obj = { name: 'name' }\nobj.foo = foo\nobj.foo(); // Object{}     (obj这个对象)\n```\n\n3. call/apply/bind\n\n> foo.apply(\"abc\") //  String {'abc'}\n\n**结论：**\n1. 函数在调用时，js会**默认给this绑定一个值**；\n2. this的绑定跟它**定义的位置（编写的位置）**没有关系；\n3. this的绑定与调用方式以及调用的位置有关；\n4. this是在运行时被绑定的。\n\n## this`的绑定规则\n### 默认绑定\n+ 普通函数被独立调用\n\n> foo()   // window{}\n\n+ 函数定义在对象中，但是独立被调用\n\n> var bar = obj.foo\n> bar()  // window{}\n\n+ <font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的`this`指向`undefined`\n\n```html\n<script>\n\t\"use strict\"\n\t...\n</script>\n```\n\n+ 高阶函数\n\n> function test(fn) {\n>\n>     fn()\n>\n> }\n>\n> test(obj.foo) // window{}\n\n即独立调用函数时(非严格模式下)`this`指向`window`!\n\n### 隐式绑定\n> 一般是通过**对象**来发起调用。\n>\n\n![](../../img/01-this-img/image1.png)\n\n![](../../img/01-this-img/image2.png)\n\n### 显式绑定\n```javascript\nfoo.call(obj)\nfoo.apply(obj) // foo {name:'name'}\n```\n\n+ 这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；\n+ 另外，这种形式一般将this绑定在对象身上，如果foo.call('abc')，那么也会默认将'abc'创建为对应的包装类型，这里也就是`String`对象;\n+ 如果是绑定在了`undefined`这种没有对应包装类型的对象身上，那么this就会默认指向`window`\n\n#### call / apply函数说明\n```javascript\nfunction test(name, age) {\n  console.log('参数:', name, age);\n}\n```\n\n作用：都可以调取函数并绑定this，传递参数方式不同\n\n+ `apply(obj,[argumentsArray])`\n\n`obj`是指this指向的对象；\n\n`argumentsArray`是指函数的参数，必须要放在**数组**中进行传递；\n\n```javascript\n// apply\ntest.apply('apply', ['chenber', 18]) // 参数: chenber 18\n```\n\n+ `<font style=\"color:#DF2A3F;\">call(obj,arg1,arg2,...)</font>`\n\n`obj`是指this指向的对象；\n\n`arg1,arg2,...`是指函数的参数列表。\n\n```javascript\n// call\ntest.call('call', 'chender', 18) // 参数: chender 18\n```\n\n#### bind\n```javascript\n// bind\nvar bar = test.bind('bind')\nbar() // 参数:this,String{'bind}\n\nvar bar = test.call('call', 'chender', 18) // 参数: chender 18\nbar() // 报错\n```\n\n`bind`是`绑定（怪异）函数`，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；\n\n而`call`和`apply`都是直接执行函数，没有返回值 。\n\n+ bind()的其他参数\n\n```javascript\nvar bar = test.call('call', 'chender', 18)\nbar() // 参数: chender 18\nbar() // 参数: chender 18    （参数一开始就指定好了，修改不了）\n```\n\n❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）\n\n这里就涉及到了**this绑定的优先级**了！\n\n1. 默认绑定优先级最低\n2. 显式绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  age: 18,\n  test: test\n}\n\nobj.test.apply('apply', ['1', 19]) \n// this [String: 'apply']\n// 参数: 1 19\nvar test1 = obj.test.bind('bind', 'chenber', 18)\ntest1()\n// this [String: 'bind']\n// 参数: chenber 18\n```\n\n3. new 绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  foo: function () {\n    console.log('foo:', this);\n    console.log('foo:', this === obj);\n  }\n}\nnew obj.foo()\n// foo: foo {}\n// foo: false\n```\n\n4.  new > 显式(bind)\n\n❗️`new`和`apply` / `call`不可以一起使用，所以没有可比性\n\n`new`和`bind`可以一起使用\n\n```javascript\nfunction test() {\n      console.log('test', this);\n    }\n\n    var testFN = test.bind('abc')\n    new testFN() // test{}\n```\n\n### new绑定\n\n使用new关键字来调用函数是，会执行如下的操作：\n- 创建一个全新的对象；\n- 这个新对象会被执行prototype连接：\n- 这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；\n- 如果函数没有返回其他对象，表达式会返回这个新对象：\n\n总结(优先级从高到低)：\n1. new\n2. bind \n3. apply / call\n4. 隐式\n5. 默认绑定\n## 内置函数的调用绑定\n内置函数的this指向需要`根据一些经验`获取\n\n1. setTimeOut()\n\n```javascript\nsetTimeOut(()=>{\n  console.log('this', this) //window\n},1000)\n```\n\n2. 按钮的点击监听\n\n```javascript\n    var btn = document.querySelector('button')\n    btn.onclick = function () {\n      console.log('btn', this); // <button>点击</button>\n    }\n btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // <button>点击</button>\n    })\n    btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // window\n    })\n```\n\n3. forEach\n\nforEach(function(){}, {})\n\n![](../../img/01-this-img/image3.png)\n\nforEach的两个参数：\n\n1. 回调函数\n2. 回调函数的this绑定对象\n\n```javascript\nconst names = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\nnames.forEach(function (item) {\n  console.log('forEach', this); // window\n})\n\nnames.forEach(function (item) {\n      console.log('forEach', this); // String {'abc'}\n    }, \"cba\")\n```\n## `this` 绑定之外的规则\n1. 如果在使用显式绑定时传入`null`或者`undefined`，那么就会使用默认绑定规则\n\n```javascript\n    foo.apply(null) // window\n    foo.apply(undefined) // window\n```\n严格模式差异：在严格模式下，绑定null/undefined时会直接使用传入值，this会指向null或undefined本身。\n\n2. 间接函数引用（知道就行，一般不会出现）\n```javascript\n    var obj2 = {};\n    (obj2.foo = obj.foo)() // window\n```\n3. 箭头函数(补充)\n箭头函数是 `es6` 新增的一种函数的声明方法。\n- 完整写法\n\n```javascript\nconst foo = (name,age)=>{\n\tconsole.log(\"=>\")\n}\n```\n❗️注:\n\n\t- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n\t- \t箭头函数不能作为构造函数来使用（会抛出错误）\n\n- 箭头函数的简写\n\t- 只有一个参数时 可省略()\n![](../../img/01-this-img/image4.png)\n\t- 函数体只有一行语句时，可省略{}，但是不能带return 关键字\n![](../../img/01-this-img/image5.png)\n\t- 如果执行体只有返回一个对象，那么需要给这个对象加上()\n![](../../img/01-this-img/image6.png)\n## 箭头函数中的 `this` 使用\n **箭头函数的作用域没有 `this` ！**\n 但是箭头函数中`this`会向寻找上层作用域中的`this`，直至找到全局this->`window`。\n\n```javascript\nconst test = () => {\n  console.log('this', this);\n}\ntest() // window\nvar test1 = test.bind('abc')\ntest1() // window\nvar obj = {\n\tname: 'chenber',\n\tfoo: () => {\n        console.log('this', this);\n      }\n }\nobj.foo() // window\nconst test2 = obj.foo.bind('abc')\ntest2() // window\n```\n应用实例：\n\n```javascript\n   // 模拟网络请求函数\n    function request(url, callbackFn) {\n      const results = {\n        code: 200,\n        msg: '成功',\n        data: null\n      }\n      callbackFn(results)\n    }\n    \n    // 将获取的数据传输给obj的results\n    var obj = {\n      results: {},\n      // 之前的写法：\n      // getData: function () {\n      //   var _this = this\n      //   request('/test', function (res) {\n      //     _this.results = res\n      //   })\n      // }\n\n      // 使用箭头函数:\n      getData: function () {\n        request('/test', (res) => {\n          this.results = res\n        })\n      }\n    }\n    obj.getData()\n```\n\n\n \n\n","slug":"js高级/1. this的指向规则","published":1,"updated":"2025-05-14T12:27:06.750Z","comments":1,"layout":"post","photos":[],"_id":"cmanx48wz00053krlez0s1rcf","content":"<p><code>this</code> 到底指向谁? 箭头函数中的<code>this</code>还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的<code>this</code>指向一致吗?</p>\n<h2 id=\"this到底指向谁？\"><a href=\"#this到底指向谁？\" class=\"headerlink\" title=\"this到底指向谁？\"></a><code>this</code>到底指向谁？</h2><p>首先，定义一个函数：</p>\n<p>三种不同的调用方式，this的指向也会不同！</p>\n<ol>\n<li>直接调用</li>\n</ol>\n<blockquote>\n<p>foo()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ol start=\"2\">\n<li>通过对象调用</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; name: &#x27;name&#x27; &#125;</span><br><span class=\"line\">obj.foo = foo</span><br><span class=\"line\">obj.foo(); // Object&#123;&#125;     (obj这个对象)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>call&#x2F;apply&#x2F;bind</li>\n</ol>\n<blockquote>\n<p>foo.apply(“abc”) &#x2F;&#x2F;  String {‘abc’}</p>\n</blockquote>\n<p><strong>结论：</strong></p>\n<ol>\n<li>函数在调用时，js会<strong>默认给this绑定一个值</strong>；</li>\n<li>this的绑定跟它**定义的位置（编写的位置）**没有关系；</li>\n<li>this的绑定与调用方式以及调用的位置有关；</li>\n<li>this是在运行时被绑定的。</li>\n</ol>\n<h2 id=\"this-的绑定规则\"><a href=\"#this-的绑定规则\" class=\"headerlink\" title=\"this&#96;的绑定规则\"></a>this&#96;的绑定规则</h2><h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><ul>\n<li>普通函数被独立调用</li>\n</ul>\n<blockquote>\n<p>foo()   &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li>函数定义在对象中，但是独立被调用</li>\n</ul>\n<blockquote>\n<p>var bar &#x3D; obj.foo<br>bar()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li><font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的<code>this</code>指向<code>undefined</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"language-javascript\">\t&quot;use strict&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t...</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>高阶函数</li>\n</ul>\n<blockquote>\n<p>function test(fn) {</p>\n<pre><code>fn()\n</code></pre>\n<p>}</p>\n<p>test(obj.foo) &#x2F;&#x2F; window{}</p>\n</blockquote>\n<p>即独立调用函数时(非严格模式下)<code>this</code>指向<code>window</code>!</p>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><blockquote>\n<p>一般是通过<strong>对象</strong>来发起调用。</p>\n</blockquote>\n<p><img src=\"/../../img/01-this-img/image1.png\"></p>\n<p><img src=\"/../../img/01-this-img/image2.png\"></p>\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">call</span>(obj)</span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(obj) <span class=\"comment\">// foo &#123;name:&#x27;name&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；</li>\n<li>另外，这种形式一般将this绑定在对象身上，如果foo.call(‘abc’)，那么也会默认将’abc’创建为对应的包装类型，这里也就是<code>String</code>对象;</li>\n<li>如果是绑定在了<code>undefined</code>这种没有对应包装类型的对象身上，那么this就会默认指向<code>window</code></li>\n</ul>\n<h4 id=\"call-apply函数说明\"><a href=\"#call-apply函数说明\" class=\"headerlink\" title=\"call &#x2F; apply函数说明\"></a>call &#x2F; apply函数说明</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;参数:&#x27;</span>, name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用：都可以调取函数并绑定this，传递参数方式不同</p>\n<ul>\n<li><code>apply(obj,[argumentsArray])</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>argumentsArray</code>是指函数的参数，必须要放在<strong>数组</strong>中进行传递；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply</span></span><br><span class=\"line\">test.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>]) <span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;call(obj,arg1,arg2,...)&lt;/font&gt;</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>arg1,arg2,...</code>是指函数的参数列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数:this,String&#123;&#x27;bind&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bind</code>是<code>绑定（怪异）函数</code>，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；</p>\n<p>而<code>call</code>和<code>apply</code>都是直接执行函数，没有返回值 。</p>\n<ul>\n<li>bind()的其他参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18    （参数一开始就指定好了，修改不了）</span></span><br></pre></td></tr></table></figure>\n\n<p>❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）</p>\n<p>这里就涉及到了<strong>this绑定的优先级</strong>了！</p>\n<ol>\n<li>默认绑定优先级最低</li>\n<li>显式绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">test</span>: test</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">test</span>.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">19</span>]) </span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;apply&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: 1 19</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = obj.<span class=\"property\">test</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>, <span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>()</span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;bind&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>new 绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span> === obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">foo</span>()</span><br><span class=\"line\"><span class=\"comment\">// foo: foo &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// foo: false</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>new &gt; 显式(bind)</li>\n</ol>\n<p>❗️<code>new</code>和<code>apply</code> &#x2F; <code>call</code>不可以一起使用，所以没有可比性</p>\n<p><code>new</code>和<code>bind</code>可以一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> testFN = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title function_\">testFN</span>() <span class=\"comment\">// test&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><p>使用new关键字来调用函数是，会执行如下的操作：</p>\n<ul>\n<li>创建一个全新的对象；</li>\n<li>这个新对象会被执行prototype连接：</li>\n<li>这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；</li>\n<li>如果函数没有返回其他对象，表达式会返回这个新对象：</li>\n</ul>\n<p>总结(优先级从高到低)：</p>\n<ol>\n<li>new</li>\n<li>bind </li>\n<li>apply &#x2F; call</li>\n<li>隐式</li>\n<li>默认绑定</li>\n</ol>\n<h2 id=\"内置函数的调用绑定\"><a href=\"#内置函数的调用绑定\" class=\"headerlink\" title=\"内置函数的调用绑定\"></a>内置函数的调用绑定</h2><p>内置函数的this指向需要<code>根据一些经验</code>获取</p>\n<ol>\n<li>setTimeOut()</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setTimeOut</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>) <span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>按钮的点击监听</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>)</span><br><span class=\"line\">   btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>forEach</li>\n</ol>\n<p>forEach(function(){}, {})</p>\n<p><img src=\"/../../img/01-this-img/image3.png\"></p>\n<p>forEach的两个参数：</p>\n<ol>\n<li>回调函数</li>\n<li>回调函数的this绑定对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]</span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;cba&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"this-绑定之外的规则\"><a href=\"#this-绑定之外的规则\" class=\"headerlink\" title=\"this 绑定之外的规则\"></a><code>this</code> 绑定之外的规则</h2><ol>\n<li>如果在使用显式绑定时传入<code>null</code>或者<code>undefined</code>，那么就会使用默认绑定规则</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>严格模式差异：在严格模式下，绑定null&#x2F;undefined时会直接使用传入值，this会指向null或undefined本身。</p>\n<ol start=\"2\">\n<li>间接函数引用（知道就行，一般不会出现）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;</span><br><span class=\"line\">(obj2.<span class=\"property\">foo</span> = obj.<span class=\"property\">foo</span>)() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>箭头函数(补充)<br>箭头函数是 <code>es6</code> 新增的一种函数的声明方法。</li>\n</ol>\n<ul>\n<li>完整写法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name,age</span>)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;=&gt;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>❗️注:</p>\n<pre><code>- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n- \t箭头函数不能作为构造函数来使用（会抛出错误）\n</code></pre>\n<ul>\n<li>箭头函数的简写<ul>\n<li>只有一个参数时 可省略()<br><img src=\"/../../img/01-this-img/image4.png\"></li>\n<li>函数体只有一行语句时，可省略{}，但是不能带return 关键字<br><img src=\"/../../img/01-this-img/image5.png\"></li>\n<li>如果执行体只有返回一个对象，那么需要给这个对象加上()<br><img src=\"/../../img/01-this-img/image6.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"箭头函数中的-this-使用\"><a href=\"#箭头函数中的-this-使用\" class=\"headerlink\" title=\"箭头函数中的 this 使用\"></a>箭头函数中的 <code>this</code> 使用</h2><p> <strong>箭头函数的作用域没有 <code>this</code> ！</strong><br> 但是箭头函数中<code>this</code>会向寻找上层作用域中的<code>this</code>，直至找到全局this-&gt;<code>window</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">foo</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test2 = obj.<span class=\"property\">foo</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test2</span>() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>应用实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟网络请求函数</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">url, callbackFn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> results = &#123;</span><br><span class=\"line\">     <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">     <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;成功&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">data</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">callbackFn</span>(results)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 将获取的数据传输给obj的results</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">results</span>: &#123;&#125;,</span><br><span class=\"line\">   <span class=\"comment\">// 之前的写法：</span></span><br><span class=\"line\">   <span class=\"comment\">// getData: function () &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//   var _this = this</span></span><br><span class=\"line\">   <span class=\"comment\">//   request(&#x27;/test&#x27;, function (res) &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//     _this.results = res</span></span><br><span class=\"line\">   <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 使用箭头函数:</span></span><br><span class=\"line\">   <span class=\"attr\">getData</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;/test&#x27;</span>, <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">results</span> = res</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> obj.<span class=\"title function_\">getData</span>()</span><br></pre></td></tr></table></figure>\n\n\n","excerpt":"","more":"<p><code>this</code> 到底指向谁? 箭头函数中的<code>this</code>还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的<code>this</code>指向一致吗?</p>\n<h2 id=\"this到底指向谁？\"><a href=\"#this到底指向谁？\" class=\"headerlink\" title=\"this到底指向谁？\"></a><code>this</code>到底指向谁？</h2><p>首先，定义一个函数：</p>\n<p>三种不同的调用方式，this的指向也会不同！</p>\n<ol>\n<li>直接调用</li>\n</ol>\n<blockquote>\n<p>foo()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ol start=\"2\">\n<li>通过对象调用</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; name: &#x27;name&#x27; &#125;</span><br><span class=\"line\">obj.foo = foo</span><br><span class=\"line\">obj.foo(); // Object&#123;&#125;     (obj这个对象)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>call&#x2F;apply&#x2F;bind</li>\n</ol>\n<blockquote>\n<p>foo.apply(“abc”) &#x2F;&#x2F;  String {‘abc’}</p>\n</blockquote>\n<p><strong>结论：</strong></p>\n<ol>\n<li>函数在调用时，js会<strong>默认给this绑定一个值</strong>；</li>\n<li>this的绑定跟它**定义的位置（编写的位置）**没有关系；</li>\n<li>this的绑定与调用方式以及调用的位置有关；</li>\n<li>this是在运行时被绑定的。</li>\n</ol>\n<h2 id=\"this-的绑定规则\"><a href=\"#this-的绑定规则\" class=\"headerlink\" title=\"this&#96;的绑定规则\"></a>this&#96;的绑定规则</h2><h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><ul>\n<li>普通函数被独立调用</li>\n</ul>\n<blockquote>\n<p>foo()   &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li>函数定义在对象中，但是独立被调用</li>\n</ul>\n<blockquote>\n<p>var bar &#x3D; obj.foo<br>bar()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li><font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的<code>this</code>指向<code>undefined</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"language-javascript\">\t&quot;use strict&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t...</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>高阶函数</li>\n</ul>\n<blockquote>\n<p>function test(fn) {</p>\n<pre><code>fn()\n</code></pre>\n<p>}</p>\n<p>test(obj.foo) &#x2F;&#x2F; window{}</p>\n</blockquote>\n<p>即独立调用函数时(非严格模式下)<code>this</code>指向<code>window</code>!</p>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><blockquote>\n<p>一般是通过<strong>对象</strong>来发起调用。</p>\n</blockquote>\n<p><img src=\"/../../img/01-this-img/image1.png\"></p>\n<p><img src=\"/../../img/01-this-img/image2.png\"></p>\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">call</span>(obj)</span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(obj) <span class=\"comment\">// foo &#123;name:&#x27;name&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；</li>\n<li>另外，这种形式一般将this绑定在对象身上，如果foo.call(‘abc’)，那么也会默认将’abc’创建为对应的包装类型，这里也就是<code>String</code>对象;</li>\n<li>如果是绑定在了<code>undefined</code>这种没有对应包装类型的对象身上，那么this就会默认指向<code>window</code></li>\n</ul>\n<h4 id=\"call-apply函数说明\"><a href=\"#call-apply函数说明\" class=\"headerlink\" title=\"call &#x2F; apply函数说明\"></a>call &#x2F; apply函数说明</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;参数:&#x27;</span>, name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用：都可以调取函数并绑定this，传递参数方式不同</p>\n<ul>\n<li><code>apply(obj,[argumentsArray])</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>argumentsArray</code>是指函数的参数，必须要放在<strong>数组</strong>中进行传递；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply</span></span><br><span class=\"line\">test.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>]) <span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;call(obj,arg1,arg2,...)&lt;/font&gt;</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>arg1,arg2,...</code>是指函数的参数列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数:this,String&#123;&#x27;bind&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bind</code>是<code>绑定（怪异）函数</code>，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；</p>\n<p>而<code>call</code>和<code>apply</code>都是直接执行函数，没有返回值 。</p>\n<ul>\n<li>bind()的其他参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18    （参数一开始就指定好了，修改不了）</span></span><br></pre></td></tr></table></figure>\n\n<p>❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）</p>\n<p>这里就涉及到了<strong>this绑定的优先级</strong>了！</p>\n<ol>\n<li>默认绑定优先级最低</li>\n<li>显式绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">test</span>: test</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">test</span>.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">19</span>]) </span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;apply&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: 1 19</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = obj.<span class=\"property\">test</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>, <span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>()</span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;bind&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>new 绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span> === obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">foo</span>()</span><br><span class=\"line\"><span class=\"comment\">// foo: foo &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// foo: false</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>new &gt; 显式(bind)</li>\n</ol>\n<p>❗️<code>new</code>和<code>apply</code> &#x2F; <code>call</code>不可以一起使用，所以没有可比性</p>\n<p><code>new</code>和<code>bind</code>可以一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> testFN = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title function_\">testFN</span>() <span class=\"comment\">// test&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><p>使用new关键字来调用函数是，会执行如下的操作：</p>\n<ul>\n<li>创建一个全新的对象；</li>\n<li>这个新对象会被执行prototype连接：</li>\n<li>这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；</li>\n<li>如果函数没有返回其他对象，表达式会返回这个新对象：</li>\n</ul>\n<p>总结(优先级从高到低)：</p>\n<ol>\n<li>new</li>\n<li>bind </li>\n<li>apply &#x2F; call</li>\n<li>隐式</li>\n<li>默认绑定</li>\n</ol>\n<h2 id=\"内置函数的调用绑定\"><a href=\"#内置函数的调用绑定\" class=\"headerlink\" title=\"内置函数的调用绑定\"></a>内置函数的调用绑定</h2><p>内置函数的this指向需要<code>根据一些经验</code>获取</p>\n<ol>\n<li>setTimeOut()</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setTimeOut</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>) <span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>按钮的点击监听</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>)</span><br><span class=\"line\">   btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>forEach</li>\n</ol>\n<p>forEach(function(){}, {})</p>\n<p><img src=\"/../../img/01-this-img/image3.png\"></p>\n<p>forEach的两个参数：</p>\n<ol>\n<li>回调函数</li>\n<li>回调函数的this绑定对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]</span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;cba&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"this-绑定之外的规则\"><a href=\"#this-绑定之外的规则\" class=\"headerlink\" title=\"this 绑定之外的规则\"></a><code>this</code> 绑定之外的规则</h2><ol>\n<li>如果在使用显式绑定时传入<code>null</code>或者<code>undefined</code>，那么就会使用默认绑定规则</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>严格模式差异：在严格模式下，绑定null&#x2F;undefined时会直接使用传入值，this会指向null或undefined本身。</p>\n<ol start=\"2\">\n<li>间接函数引用（知道就行，一般不会出现）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;</span><br><span class=\"line\">(obj2.<span class=\"property\">foo</span> = obj.<span class=\"property\">foo</span>)() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>箭头函数(补充)<br>箭头函数是 <code>es6</code> 新增的一种函数的声明方法。</li>\n</ol>\n<ul>\n<li>完整写法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name,age</span>)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;=&gt;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>❗️注:</p>\n<pre><code>- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n- \t箭头函数不能作为构造函数来使用（会抛出错误）\n</code></pre>\n<ul>\n<li>箭头函数的简写<ul>\n<li>只有一个参数时 可省略()<br><img src=\"/../../img/01-this-img/image4.png\"></li>\n<li>函数体只有一行语句时，可省略{}，但是不能带return 关键字<br><img src=\"/../../img/01-this-img/image5.png\"></li>\n<li>如果执行体只有返回一个对象，那么需要给这个对象加上()<br><img src=\"/../../img/01-this-img/image6.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"箭头函数中的-this-使用\"><a href=\"#箭头函数中的-this-使用\" class=\"headerlink\" title=\"箭头函数中的 this 使用\"></a>箭头函数中的 <code>this</code> 使用</h2><p> <strong>箭头函数的作用域没有 <code>this</code> ！</strong><br> 但是箭头函数中<code>this</code>会向寻找上层作用域中的<code>this</code>，直至找到全局this-&gt;<code>window</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">foo</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test2 = obj.<span class=\"property\">foo</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test2</span>() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>应用实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟网络请求函数</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">url, callbackFn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> results = &#123;</span><br><span class=\"line\">     <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">     <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;成功&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">data</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">callbackFn</span>(results)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 将获取的数据传输给obj的results</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">results</span>: &#123;&#125;,</span><br><span class=\"line\">   <span class=\"comment\">// 之前的写法：</span></span><br><span class=\"line\">   <span class=\"comment\">// getData: function () &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//   var _this = this</span></span><br><span class=\"line\">   <span class=\"comment\">//   request(&#x27;/test&#x27;, function (res) &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//     _this.results = res</span></span><br><span class=\"line\">   <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 使用箭头函数:</span></span><br><span class=\"line\">   <span class=\"attr\">getData</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;/test&#x27;</span>, <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">results</span> = res</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> obj.<span class=\"title function_\">getData</span>()</span><br></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmanx48wz00053krlez0s1rcf","category_id":"cmanx48x200063krl9j5j2q50","_id":"cmanx48x300093krlf1bihll4"}],"PostTag":[{"post_id":"cmanx48wz00053krlez0s1rcf","tag_id":"cmanx48x200073krl1y20b2c5","_id":"cmanx48x300083krl32kc6s62"}],"Tag":[{"name":"js高级","_id":"cmanx48x200073krl1y20b2c5"}]}}
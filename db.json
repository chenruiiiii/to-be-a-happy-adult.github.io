{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/404.svg","path":"img/404.svg","modified":1,"renderable":0},{"_id":"source/img/A-Big-Dreamer's-Blog.jpg","path":"img/A-Big-Dreamer's-Blog.jpg","modified":1,"renderable":0},{"_id":"source/img/alipay_trade.jpg","path":"img/alipay_trade.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/bac.jpg","path":"img/bac.jpg","modified":1,"renderable":0},{"_id":"source/img/bac1.jpg","path":"img/bac1.jpg","modified":1,"renderable":0},{"_id":"source/img/bac2.jpg","path":"img/bac2.jpg","modified":1,"renderable":0},{"_id":"source/img/bottom1.jpg","path":"img/bottom1.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/index_bac.jpg","path":"img/index_bac.jpg","modified":1,"renderable":0},{"_id":"source/img/video.mp4","path":"img/video.mp4","modified":1,"renderable":0},{"_id":"source/img/wechat_trade.jpg","path":"img/wechat_trade.jpg","modified":1,"renderable":0},{"_id":"source/img/nginx/img.png","path":"img/nginx/img.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image1.png","path":"img/js高级/01-this-img/image1.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image2.png","path":"img/js高级/01-this-img/image2.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image4.png","path":"img/js高级/01-this-img/image4.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image3.png","path":"img/js高级/01-this-img/image3.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image5.png","path":"img/js高级/01-this-img/image5.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image6.png","path":"img/js高级/01-this-img/image6.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image7.png","path":"img/js高级/01-this-img/image7.png","modified":1,"renderable":0},{"_id":"source/img/js高级/01-this-img/image8.png","path":"img/js高级/01-this-img/image8.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image1.png","path":"img/js高级/02-browser/image1.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image2.png","path":"img/js高级/02-browser/image2.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image3.png","path":"img/js高级/02-browser/image3.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image4.png","path":"img/js高级/02-browser/image4.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image5.png","path":"img/js高级/02-browser/image5.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image6.png","path":"img/js高级/02-browser/image6.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image7.png","path":"img/js高级/02-browser/image7.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image8.png","path":"img/js高级/02-browser/image8.png","modified":1,"renderable":0},{"_id":"source/img/js高级/02-browser/image9.png","path":"img/js高级/02-browser/image9.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image1.png","path":"img/js高级/03-oringinal-run-js/image1.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image11.png","path":"img/js高级/03-oringinal-run-js/image11.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image10.png","path":"img/js高级/03-oringinal-run-js/image10.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image12.png","path":"img/js高级/03-oringinal-run-js/image12.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image13.png","path":"img/js高级/03-oringinal-run-js/image13.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image2.png","path":"img/js高级/03-oringinal-run-js/image2.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image3.png","path":"img/js高级/03-oringinal-run-js/image3.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image4.png","path":"img/js高级/03-oringinal-run-js/image4.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image5.png","path":"img/js高级/03-oringinal-run-js/image5.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image6.png","path":"img/js高级/03-oringinal-run-js/image6.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image7.png","path":"img/js高级/03-oringinal-run-js/image7.png","modified":1,"renderable":0},{"_id":"source/img/js高级/06-js函数和对象增强/img.png","path":"img/js高级/06-js函数和对象增强/img.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image8.png","path":"img/js高级/03-oringinal-run-js/image8.png","modified":1,"renderable":0},{"_id":"source/img/js高级/04-closure/img1.png","path":"img/js高级/04-closure/img1.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/image9.png","path":"img/js高级/03-oringinal-run-js/image9.png","modified":1,"renderable":0},{"_id":"source/img/js高级/03-oringinal-run-js/rent_bac.png","path":"img/js高级/03-oringinal-run-js/rent_bac.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"02549e41e4953152baa7925d0d3035023414e7e6","modified":1747054026657},{"_id":"source/about/index.md","hash":"9fe951eb6508ed629d5e1200265e39fff7cec08f","modified":1747627259145},{"_id":"source/archives/index.md","hash":"8d2273982e0dc06cbae80375778f4910c28a022f","modified":1749280909188},{"_id":"source/categories/index.md","hash":"a937b412e426ce068902e160fe82d138004d97fe","modified":1749280897185},{"_id":"source/img/avatar.jpg","hash":"84c68aef5d5749c801ae62447aa58317e01eab23","modified":1746930508130},{"_id":"source/img/favicon.ico","hash":"41015bbacfbd0ec57c10d270b86c58b01a3f145a","modified":1747056883952},{"_id":"source/links/index.md","hash":"6603f26fe39066c317e74c42d59ff0fd3b583150","modified":1749281280289},{"_id":"source/music/index.md","hash":"15d0f7d689be103d0dd6aeb208f4e34e55f5508f","modified":1749280923568},{"_id":"source/tags/index.md","hash":"836819c0c3b71caa55b975c5b98bc5609e2e1f5b","modified":1749280927232},{"_id":"source/_posts/nginx/nginx安装与配置.md","hash":"c4e6599b6423c6f01af2935cbf0b27ef9eb3f723","modified":1752050478620},{"_id":"source/_posts/js高级/01-this的指向规则.md","hash":"fb4c646334bed921f0cd2ddfbddcf8523586e259","modified":1747365434434},{"_id":"source/videos/index.md","hash":"5ef04ad647e6de7e058721054610f1fc67263c88","modified":1749280790445},{"_id":"source/_posts/js高级/02-浏览器运行原理.md","hash":"2a8463a7e21d51eac4ee261062ea6890dd181b51","modified":1747664377168},{"_id":"source/img/nginx/img.png","hash":"d29ae33345bb974a604414f72cbed7d8fee69db8","modified":1751939027925},{"_id":"source/_posts/js高级/04-闭包.md","hash":"c5ec65529b469624ba63080519d41bfd12cd3987","modified":1749281625340},{"_id":"source/_posts/js高级/06-javascript函数和对象增强.md","hash":"8e98431d87e81b8e18152268df0bf962df967bc5","modified":1752134889504},{"_id":"source/_posts/js高级/03- javascript的运行原理.md","hash":"b0a32721d546dd09b494c5957512befe5e307654","modified":1748918377911},{"_id":"source/img/js高级/01-this-img/image2.png","hash":"3a96b1979ca8518db0c43d82d21a8bab88eaa256","modified":1747224626165},{"_id":"source/img/js高级/01-this-img/image3.png","hash":"0216b6a99351fcbe79f16b23fae5a7343cfe4f2d","modified":1747224645377},{"_id":"source/img/js高级/01-this-img/image4.png","hash":"2f7f5b837e2a85e9d9dd95b7d30fa59a079639df","modified":1747224657413},{"_id":"source/img/js高级/01-this-img/image6.png","hash":"952873d4616ac1fb22178efd4a99d0f81f1ea2e2","modified":1747224684588},{"_id":"source/img/js高级/01-this-img/image5.png","hash":"b1489a81f900a920c4e790483431442134e2aeff","modified":1747224673007},{"_id":"source/img/js高级/02-browser/image7.png","hash":"1f21d01a800eb53316988c44536829ced46ca5b4","modified":1747619158351},{"_id":"source/img/js高级/03-oringinal-run-js/image13.png","hash":"53d43143d9ba93c45c9d2691088b8a2f802e2553","modified":1748852841622},{"_id":"source/img/js高级/03-oringinal-run-js/image12.png","hash":"a84bdb0f4cf3d774030b9eb232ae3f8eaeb67cb2","modified":1748852831948},{"_id":"source/img/js高级/03-oringinal-run-js/image5.png","hash":"ae8e40fee1b7d1593e016a7c3d53052925b4a490","modified":1748852768158},{"_id":"source/img/js高级/03-oringinal-run-js/image6.png","hash":"d90ed6c11678fa0605695d26c5e6024228f914f1","modified":1748852778001},{"_id":"source/img/js高级/03-oringinal-run-js/image7.png","hash":"d1d04cd82d64db75d5fcd5a960973e5dadd0abd7","modified":1748852786655},{"_id":"source/img/js高级/03-oringinal-run-js/image8.png","hash":"6e6855b6f792c6569ab07c7fb53e7ad6fe667fc6","modified":1748852796317},{"_id":"source/img/bottom1.jpg","hash":"b8d8ccc68a08e2ab307c3744a83601817d1453ec","modified":1747402367798},{"_id":"source/img/A-Big-Dreamer's-Blog.jpg","hash":"844d3bc417c335a67e5e8c68ad2c0c7505cb3cf9","modified":1749262597698},{"_id":"source/img/js高级/01-this-img/image1.png","hash":"dadf8bc5ee07fe0f90c495525f584227952ba723","modified":1747224597982},{"_id":"source/img/js高级/02-browser/image5.png","hash":"f0304a354e652401df338c39756cc144baa451ca","modified":1747619134548},{"_id":"source/img/js高级/03-oringinal-run-js/image11.png","hash":"0e3b65087e418920396030e21897bb68f878b3c9","modified":1748852822455},{"_id":"source/img/js高级/02-browser/image8.png","hash":"661abc475d5aef6c97983f96d38eabaa892a1425","modified":1747619185868},{"_id":"source/img/js高级/02-browser/image9.png","hash":"8b30f24c3aaded24e4bca4a2f839711ff90f41f4","modified":1747619200234},{"_id":"source/img/js高级/03-oringinal-run-js/image3.png","hash":"b0eee18865c3bf57ca68835fbddc5fc3771ab938","modified":1748852750322},{"_id":"source/img/js高级/03-oringinal-run-js/image4.png","hash":"100e39d383bab4ac9f6c8428c535c63d97a83ec5","modified":1748852759975},{"_id":"source/img/js高级/04-closure/img1.png","hash":"8d2dfe7b94a906e7e8c404d2a220e41a0741d28e","modified":1749045243310},{"_id":"source/img/js高级/03-oringinal-run-js/image9.png","hash":"1e4b2a36c327bd982dcbc914f8b8b93e56fd5ee2","modified":1748852807124},{"_id":"source/img/alipay_trade.jpg","hash":"92d7de0eda90987f9351988822b1638c2f13f50b","modified":1747622881224},{"_id":"source/img/wechat_trade.jpg","hash":"9b35dc3cb7540d9185c578f5a52f7eab0cd05eaf","modified":1747622866865},{"_id":"source/img/js高级/01-this-img/image8.png","hash":"8d5f89fc0fec498237ab9fbfd21b8972aa45d2ff","modified":1747365293287},{"_id":"source/img/js高级/02-browser/image1.png","hash":"5f1f713716139ff76a9f03ee6f96fe148f807bc6","modified":1747619082589},{"_id":"source/img/js高级/01-this-img/image7.png","hash":"f25c745e7a8ee8e6ff1d1c583bf48ab3b1b3a9b7","modified":1747276146335},{"_id":"source/img/js高级/02-browser/image4.png","hash":"9b5e7dce5e96c99411b791927d1fe1efd1b62d8e","modified":1747619121296},{"_id":"themes/butterfly/.gitignore","hash":"1a22e577d9900e645b55d40d210e87c2a0d1221d","modified":1746845952889},{"_id":"source/img/js高级/02-browser/image6.png","hash":"8dfaf57379bba9bf2278cbb335051f03bff94b15","modified":1747619147037},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1746845952889},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1746845952889},{"_id":"source/img/js高级/03-oringinal-run-js/image1.png","hash":"f4e438b4bbd679995012f8ec7fe7554e1837c4c6","modified":1748852704588},{"_id":"themes/butterfly/_config.yml","hash":"a10e44590fc2702cf8922ca4d62a6fe3230c70b3","modified":1747317009079},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1746845952890},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1746845952887},{"_id":"themes/butterfly/package.json","hash":"dd598502734c702eed104a3f955f75568e18a29e","modified":1746845952932},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1746845952932},{"_id":"themes/butterfly/languages/default.yml","hash":"833705947b74e8c04e30918bc63147fcaaad33da","modified":1747624994370},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1746845952891},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1746845952892},{"_id":"themes/butterfly/languages/en.yml","hash":"52f04fc99fc45db8a36a0ea76989defa0b2ca2a2","modified":1747060837838},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1746845952892},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1746845952892},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1746845952891},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1746845952930},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1746845952893},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1746845952893},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1746845952931},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1746845952931},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1746845952931},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1746845952894},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1746845952888},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1746845952888},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1746845952894},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1746845952894},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1746845952888},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1746845952888},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1746845952888},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1746845952933},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1746845952933},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1746845952900},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1746845952934},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1746845952904},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1746845952906},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1746845952906},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1746845952934},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1746845952934},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"1e9f65124c9e5320df303c0cdc29b99952a732e8","modified":1747317371706},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1746845952934},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1746845952935},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1746845952935},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1746845952936},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1746845952937},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1746845952937},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1746845952937},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1746845952937},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1746845952940},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1746845952940},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1746845952940},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1746845952938},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"9e2aecc0afd5393d84bdfe950adc9fd99e4a5d10","modified":1747225462065},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1746845952939},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1746845952939},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1746845952941},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1746845952941},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1746845952941},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1746845952942},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1746845952942},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1746845952942},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1746845952943},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1746845952960},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1746845952943},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1746845952960},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1746845952960},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1746845952965},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1746845952966},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1746845952943},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1746845952895},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1746845952976},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1746845952977},{"_id":"themes/butterfly/source/js/main.js","hash":"1870209f7fed2f84321c7f4b95df20839f397865","modified":1747225462031},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1746845952896},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1746845952965},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1746845952896},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e6baac100a37dc66d5fc5183bf80616eda3bfe28","modified":1747225462018},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1746845952899},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1746845952899},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1746845952899},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1746845952898},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1746845952897},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1746845952897},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1746845952900},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1746845952901},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1746845952901},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1746845952902},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1746845952901},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1746845952902},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1746845952905},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1746845952906},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1746845952906},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1746845952903},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"f845a13ac020c47f91528e8e15aa5d56bcc528c1","modified":1747225462002},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1746845952904},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1746845952926},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1746845952927},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1746845952928},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1746845952927},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1746845952928},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1746845952928},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1746845952929},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1746845952930},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1746845952929},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1746845952929},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1746845952930},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1746845952922},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1746845952925},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1746845952917},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1746845952925},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1746845952944},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1746845952922},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1746845952944},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"9a60f9c5eef3fd7ac741a2c6371751e7f2771410","modified":1746929987377},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1746845952949},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1746845952949},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1746845952949},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1746845952948},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1746845952952},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1746845952950},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1746845952951},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1746845952949},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1746845952950},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1746845952950},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1746845952951},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1746845952952},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1746845952951},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1746845952951},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1746845952953},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1746845952954},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1746845952953},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1746845952952},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1746845952954},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1746845952955},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1746845952954},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1746845952957},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1746845952955},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1746845952957},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1746845952954},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1746845952955},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1746845952958},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1746845952959},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1746845952958},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1746845952959},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1746845952958},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1746845952973},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1746845952956},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1746845952959},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1746845952975},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1746845952956},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1746845952907},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1746845952907},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1746845952908},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1746845952956},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1746845952909},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1746845952908},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1746845952909},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1746845952910},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1746845952910},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1746845952909},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1746845952913},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1746845952910},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1746845952911},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1746845952913},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1746845952914},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1746845952911},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1746845952915},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"683de9763fdc933a8c8206df0421da08e130fe45","modified":1747225462036},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1746845952914},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1747627824006},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1746845952913},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1746845952918},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"6ba4a1c2a440df6178c49a2c80b9adf3ce4e1e5b","modified":1747225462039},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1746845952918},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1746845952918},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1746845952915},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1746845952915},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1746845952919},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1746845952919},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1746845952916},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1746845952920},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1746845952919},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1746845952916},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1746845952920},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1746845952917},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1746845952920},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1746845952921},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1746845952921},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1746845952922},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1746845952921},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1746845952923},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1746845952924},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1746845952923},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1746845952922},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1746845952923},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1746845952925},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"5c944052280c5ed046d2cfeb54b0da8876af0ec6","modified":1746845952924},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1746845952947},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1746845952946},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1746845952947},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1746845952945},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1746845952947},{"_id":"source/img/js高级/06-js函数和对象增强/img.png","hash":"a2ea16f10dcdc57cb2b6bf52a933d5e8d156f4f4","modified":1752071706183},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1746845952924},{"_id":"source/img/bac2.jpg","hash":"f3007a19421a0708c1a8d849f6a7ab7201e33088","modified":1747402360806},{"_id":"source/img/js高级/02-browser/image2.png","hash":"60de1088c878b609d08ef6604a76ba7f178c1d89","modified":1747619095475},{"_id":"source/img/js高级/03-oringinal-run-js/image10.png","hash":"bac17f0bbca30f99e28ceb79448074fab1781fb5","modified":1748852814747},{"_id":"source/img/js高级/03-oringinal-run-js/image2.png","hash":"2111fffcc0b8f36e3666b5bc12f501d77bceb2fa","modified":1748852731660},{"_id":"source/img/bac1.jpg","hash":"1c6c6c71d18eba64f32d38ebad7afa8295c78acf","modified":1747402344758},{"_id":"source/img/js高级/02-browser/image3.png","hash":"75940f1e3e5e9c3dfa9e2b68bf5c0585d5d71123","modified":1747619109305},{"_id":"source/img/404.svg","hash":"2067af374ac024b203aba31ea1ecf30ff7bf1d24","modified":1747057392043},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1746845952963},{"_id":"source/img/bac.jpg","hash":"1e786abb82c88607c429c3cb4dd62e0ea7fe16ab","modified":1747314217832},{"_id":"source/img/index_bac.jpg","hash":"b7e4b0bd54643ee2a7de5ddfe297f136c524b8d3","modified":1747817959014},{"_id":"source/img/js高级/03-oringinal-run-js/rent_bac.png","hash":"bf1a82c16bdebb596824ff0997a31cb46854c9a8","modified":1749182345939},{"_id":"source/img/video.mp4","hash":"64efeab6979b8c207f6be12f74647429e04e899c","modified":1747277485387},{"_id":"public/img/404.jpg","hash":"630ec1f2b975762a556376e6235dc018daea1d4a","modified":1752134896542},{"_id":"public/img/error-page.png","hash":"d1b8c04542f13f4fe174fc354a4e1da491384821","modified":1752134896542},{"_id":"public/img/friend_404.gif","hash":"a76c113d6c101344e13abd51d31e17fb2b9627b7","modified":1752134896542},{"_id":"public/img/404.svg","hash":"70d7eea3fba3381adcc437e938bc57c7196f4715","modified":1752134896542},{"_id":"public/img/alipay_trade.jpg","hash":"522d3854a4b7060d3c08ded988ec68aab7f74708","modified":1752134896542},{"_id":"public/img/A-Big-Dreamer's-Blog.jpg","hash":"e13f131c457486ae0f1081a262002a040d5ae2fd","modified":1752134896542},{"_id":"public/img/avatar.jpg","hash":"3385083fb65c0f5f6be0edd587e2452e7f10442c","modified":1752134896542},{"_id":"public/img/bac.jpg","hash":"50df0a05da69aca8a515f15d69b7c22cfcc79cff","modified":1752134896542},{"_id":"public/img/bac1.jpg","hash":"ac5f9d4f4f58e26d52b9bee16bb2b497caf11381","modified":1752134896542},{"_id":"public/img/bac2.jpg","hash":"e4fe8f429a31690619fa44b8efb99389a223ab0e","modified":1752134896542},{"_id":"public/img/bottom1.jpg","hash":"ec730ef5b15bfebe20d6983ca08915a9275387c0","modified":1752134896542},{"_id":"public/img/wechat_trade.jpg","hash":"7bc4beb216b8436a5b9593c26d3009c526c078d9","modified":1752134896542},{"_id":"public/img/nginx/img.png","hash":"bddc7974bc7fc2d2ddb774a3eb89b69372d04e31","modified":1752134896542},{"_id":"public/img/index_bac.jpg","hash":"b945b9fa8dbb4e4f64f002625a4d892dee335d3d","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image2.png","hash":"a056657fa2eb0cf9d1b37721741a9fab47aae4e7","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image1.png","hash":"6fa1eb57293b61de6b8d10333bbfa60acf9988c1","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image3.png","hash":"2b5e8ef88b99aeb98b71c1f820831802c738240d","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image4.png","hash":"f84813b780a3fcd53e7bc54a42b936cb3ec07c13","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image7.png","hash":"60ae2557db634953a13e5b65f942865c7f794bd5","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image6.png","hash":"9b5bd716ef1fb37147102f3d7a30e1046257ddf7","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image5.png","hash":"96ffda90df7864663915b6a8396ca2dc3b652b3a","modified":1752134896542},{"_id":"public/img/js高级/01-this-img/image8.png","hash":"9897d8cc3fcca7ce74e2c6af313f168a86e94af6","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image1.png","hash":"446d3b47a787effe118368af28ab89615cc80691","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image2.png","hash":"7c7417d99792168ae2eb7b7ea9378e6c12d83026","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image4.png","hash":"7af8a94789ec0173154f2da19637227d2dedf197","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image5.png","hash":"839b33dff64ac3dbe13db4be6ad80a4fb2e895a1","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image3.png","hash":"626cb8760d7820a7a83c3c759e7e564e47e6dbb2","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image9.png","hash":"0bd153c458f6b36a78f25d4f22d885c45bf8a1bc","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image7.png","hash":"b71d2c798a97f22273d6a66025d801c799e7c131","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image8.png","hash":"e85eaf102a66e0e7eb0cf4f7b67c50d0a161e8d9","modified":1752134896542},{"_id":"public/img/js高级/02-browser/image6.png","hash":"20ec6a463e17cb6108598861e0bb1f2305781e49","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image1.png","hash":"47d623310e9ffa6d1d0acd90b250627e752ff04d","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image11.png","hash":"9a825a6b74e6f2f2993d7d1f28ebfcc871c78aee","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image10.png","hash":"4275af1e417e52a84924ad3e0f0f5768a2543b7f","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image12.png","hash":"bb46b637f7fb342a66312b4be0d24da7f67b318e","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image2.png","hash":"9c59d236128068bcc44d8c924b7579acbb9a9dea","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image3.png","hash":"2293d4fcbc07e01b9c494696a7bbb332a8d4ac61","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image13.png","hash":"18dfd407458c232abf4f5e7ffeab7f63ef5df164","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image4.png","hash":"f4ea480d024617540d651f42329dac4bdc96f367","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image6.png","hash":"8750a2d36be443eb45815ca4c224b4c956cc34ff","modified":1752134896542},{"_id":"public/img/js高级/06-js函数和对象增强/img.png","hash":"813ce13bde9cb3e54779b818d256ece17f79f062","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image7.png","hash":"31d8490b407c0600db2c07a161394535b30c1266","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image5.png","hash":"7f014c5b0286954c00950ce93499695f9e58828b","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image8.png","hash":"72a7f66aa65bd4b8cb06bcb33222276e8795104e","modified":1752134896542},{"_id":"public/img/js高级/04-closure/img1.png","hash":"e9a142868f8cc004cfa75747f7efa7b6fd7c8b52","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/image9.png","hash":"89d58368efb1ab419d8ca0eca426aafe2c4edf98","modified":1752134896542},{"_id":"public/img/js高级/03-oringinal-run-js/rent_bac.png","hash":"e7261662b074db2c66cb9da1707fdd5500d5e2d8","modified":1752134896542},{"_id":"public/search.xml","hash":"c92b7bec5837c6cd98c4dade6d2edbb5591d9c57","modified":1752134896542},{"_id":"public/atom.xml","hash":"b36c9f19e5543a6a9f319a27a7d44e4f052204db","modified":1752134896542},{"_id":"public/archives/index.html","hash":"e479f399aeeaad8fa5bdef5be3f0bfa8096026a8","modified":1752134896542},{"_id":"public/about/index.html","hash":"3bb9eeee7a6fc565f749cb8a3053dde6aa5695eb","modified":1752134896542},{"_id":"public/categories/index.html","hash":"9d61966181af623a1843ec521924e2ffacf2d9a4","modified":1752134896542},{"_id":"public/music/index.html","hash":"1ee7a7f1c4568beb88ed8648b7cd615d26e87ccd","modified":1752134896542},{"_id":"public/tags/index.html","hash":"a7e474227dfeb130702df2e996f7399412200f3c","modified":1752134896542},{"_id":"public/videos/index.html","hash":"a261982312c5051f63c110fb9f4ea90a2e1e327a","modified":1752134896542},{"_id":"public/links/index.html","hash":"0c345f4a21e0b80e7b4d3ab361cce0523bcd756a","modified":1752134896542},{"_id":"public/posts/4bc49eeb.html","hash":"e5e2554dd66147b1fbeff917d6bbed1da63ddf5d","modified":1752134896542},{"_id":"public/posts/2373884b.html","hash":"e67fbf655a882563826abc4a037b31092a41f69f","modified":1752134896542},{"_id":"public/posts/d8cbe511.html","hash":"84c75e8a41f7358b0f4d99981e3a05960525a98e","modified":1752134896542},{"_id":"public/posts/4f72a7f4.html","hash":"29465c6e66083af793625cbb41b36fea0a51f498","modified":1752134896542},{"_id":"public/archives/2025/index.html","hash":"c27f1678bdd97bda69c90a52f80c29905710fa69","modified":1752134896542},{"_id":"public/posts/2f741396.html","hash":"0361d2516245c609031e20b96eb6607002e0e6d8","modified":1752134896542},{"_id":"public/archives/2025/06/index.html","hash":"453bee29d45ea8b9a9b847ccac939cf307227b8a","modified":1752134896542},{"_id":"public/archives/2025/05/index.html","hash":"934e9ca4037294c26b207651065845e5929932ad","modified":1752134896542},{"_id":"public/archives/2025/07/index.html","hash":"5e4bc002bfdd2e79dcb367f458a37c14883fa6f7","modified":1752134896542},{"_id":"public/categories/分类/index.html","hash":"525bc7141d9967512dd5803db7028e703bc5efb3","modified":1752134896542},{"_id":"public/tags/js高级/index.html","hash":"4753737dd1ce4d737e100607384e45146c24feb4","modified":1752134896542},{"_id":"public/index.html","hash":"f4f74a086deafbada6f9d472ecd5a1b07f51ba78","modified":1752134896542},{"_id":"public/tags/nginx/index.html","hash":"0cd2cdaebce13d16d77370573758244310b1935a","modified":1752134896542},{"_id":"public/img/favicon.ico","hash":"41015bbacfbd0ec57c10d270b86c58b01a3f145a","modified":1752134896542},{"_id":"public/CNAME","hash":"02549e41e4953152baa7925d0d3035023414e7e6","modified":1752134896542},{"_id":"public/js/search/algolia.js","hash":"f9b3293f30ec40439134aa0577c8a285b67e4798","modified":1752134896542},{"_id":"public/js/utils.js","hash":"5a82381c54af09f77d2ae3b5bcfeba031bea0659","modified":1752134896542},{"_id":"public/js/main.js","hash":"2da30fe6933b69fdcf6d325aca1c33751f80a5dd","modified":1752134896542},{"_id":"public/css/index.css","hash":"0480591f6e502d2638a059c63b8e1b8a9fabd192","modified":1752134896542},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1752134896542},{"_id":"public/js/tw_cn.js","hash":"c2cc5a161650abbbbc5c7a97eb507fe28768d405","modified":1752134896542},{"_id":"public/js/search/local-search.js","hash":"e918db33489a51b588297552c42c8d70ed968f36","modified":1752134896542},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1752134896542},{"_id":"public/img/video.mp4","hash":"64efeab6979b8c207f6be12f74647429e04e899c","modified":1752134896542}],"Category":[{"name":"分类","_id":"cmcx3vq7900041s4h25h1edg5"}],"Data":[],"Page":[{"title":"关于","date":"2025-05-11T03:16:01.000Z","type":"about","description":"关于我","content":"23年12月开始学习前端，有很多东西等待学习，博客仍在完善中，欢迎批评指正。","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2025-05-11 11:16:01\ntype: \"about\"\ndescription: \"关于我\"\ncontent: \"23年12月开始学习前端，有很多东西等待学习，博客仍在完善中，欢迎批评指正。\"\n---\n","updated":"2025-05-19T04:00:59.145Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmcx3vq7400001s4hhkj9gb7s"},{"title":"归档","date":"2025-05-11T03:16:27.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2025-05-11 11:16:27\ntype: \"archives\"\ncomments: false\n---\n","updated":"2025-06-07T07:21:49.188Z","path":"archives/index.html","layout":"page","_id":"cmcx3vq7800021s4hhuwm1j5c","content":"","length":0,"excerpt":"","more":""},{"title":"分类","date":"2025-05-11T03:16:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-05-11 11:16:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2025-06-07T07:21:37.185Z","path":"categories/index.html","layout":"page","_id":"cmcx3vq7b00061s4hadvxf5dd","content":"","length":0,"excerpt":"","more":""},{"title":"音乐","date":"2025-05-11T03:16:39.000Z","type":"music","comments":0,"_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2025-05-11 11:16:39\ntype: \"music\"\ncomments: false\n---\n","updated":"2025-06-07T07:22:03.568Z","path":"music/index.html","layout":"page","_id":"cmcx3vq7b00071s4hd9e4abne","content":"","length":0,"excerpt":"","more":""},{"title":"友链","date":"2025-06-05T14:29:00.000Z","type":null,"comments":0,"_content":"\n<style>\n.links-container {\n    display: grid;\n    gap: 20px;\n}\n\n@media screen and (768px <=width ) {\n    .links-container {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n\n@media screen and (400px <=width <=768px) {\n    .links-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (width <=400px) {\n    .links-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n.link-item {\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .1), inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transition: box-shadow .2s ease-in-out, transform .2s ease-in-out;\n}\n\n.link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .2),inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transform: scale(1.02);\n}\n\n[data-theme='dark'] .link-item {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .1), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .2), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-info p {\n    color: rgba(255,255,255,0.7);\n}\n\n.link-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 10px;\n    color: #000;\n}\n\n.item-icon img {\n    margin: 0;\n    width: 60px;\n    height: 50px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n.link-info p{\n    font-size: 14px;\n    color: rgba(0,0,0,.8);\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n}\n</style>\n\n<div class=\"links-container\">\n  <div class=\"link-item\">\n    <a href=\"https://a-big-dreamer.github.io/\" target=\"_blank\" class=\"link-card\" style=\"text-decoration: none\">\n      <div class=\"link-icon\">\n        <img src=\"../img/A-Big-Dreamer's-Blog.jpg\" alt=\"A Big Dreamer's Blog\" />\n      </div>\n      <div class=\"link-info\">\n        <h3>A Big Dreamer's Blog</h3>\n        <p>梦想成为伟大的梦想家</p>\n      </div>\n    </a>\n  </div>\n</div>\n\n","source":"links/index.md","raw":"---\ntitle: 友链\ndate: 2025-06-05 22:29:00\ntype: \ncomments: false\n---\n\n<style>\n.links-container {\n    display: grid;\n    gap: 20px;\n}\n\n@media screen and (768px <=width ) {\n    .links-container {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n\n@media screen and (400px <=width <=768px) {\n    .links-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (width <=400px) {\n    .links-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n.link-item {\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .1), inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transition: box-shadow .2s ease-in-out, transform .2s ease-in-out;\n}\n\n.link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .2),inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transform: scale(1.02);\n}\n\n[data-theme='dark'] .link-item {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .1), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .2), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-info p {\n    color: rgba(255,255,255,0.7);\n}\n\n.link-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 10px;\n    color: #000;\n}\n\n.item-icon img {\n    margin: 0;\n    width: 60px;\n    height: 50px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n.link-info p{\n    font-size: 14px;\n    color: rgba(0,0,0,.8);\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n}\n</style>\n\n<div class=\"links-container\">\n  <div class=\"link-item\">\n    <a href=\"https://a-big-dreamer.github.io/\" target=\"_blank\" class=\"link-card\" style=\"text-decoration: none\">\n      <div class=\"link-icon\">\n        <img src=\"../img/A-Big-Dreamer's-Blog.jpg\" alt=\"A Big Dreamer's Blog\" />\n      </div>\n      <div class=\"link-info\">\n        <h3>A Big Dreamer's Blog</h3>\n        <p>梦想成为伟大的梦想家</p>\n      </div>\n    </a>\n  </div>\n</div>\n\n","updated":"2025-06-07T07:28:00.289Z","path":"links/index.html","layout":"page","_id":"cmcx3vq7b00081s4hcgx82bv9","content":"<style>\n.links-container {\n    display: grid;\n    gap: 20px;\n}\n\n@media screen and (768px <=width ) {\n    .links-container {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n\n@media screen and (400px <=width <=768px) {\n    .links-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (width <=400px) {\n    .links-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n.link-item {\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .1), inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transition: box-shadow .2s ease-in-out, transform .2s ease-in-out;\n}\n\n.link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .2),inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transform: scale(1.02);\n}\n\n[data-theme='dark'] .link-item {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .1), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .2), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-info p {\n    color: rgba(255,255,255,0.7);\n}\n\n.link-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 10px;\n    color: #000;\n}\n\n.item-icon img {\n    margin: 0;\n    width: 60px;\n    height: 50px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n.link-info p{\n    font-size: 14px;\n    color: rgba(0,0,0,.8);\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n}\n</style>\n\n<div class=\"links-container\">\n  <div class=\"link-item\">\n    <a href=\"https://a-big-dreamer.github.io/\" target=\"_blank\" class=\"link-card\" style=\"text-decoration: none\">\n      <div class=\"link-icon\">\n        <img src=\"../img/A-Big-Dreamer's-Blog.jpg\" alt=\"A Big Dreamer's Blog\" />\n      </div>\n      <div class=\"link-info\">\n        <h3>A Big Dreamer's Blog</h3>\n        <p>梦想成为伟大的梦想家</p>\n      </div>\n    </a>\n  </div>\n</div>\n\n","length":61,"excerpt":"","more":"<style>\n.links-container {\n    display: grid;\n    gap: 20px;\n}\n\n@media screen and (768px <=width ) {\n    .links-container {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n\n@media screen and (400px <=width <=768px) {\n    .links-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (width <=400px) {\n    .links-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n.link-item {\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .1), inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transition: box-shadow .2s ease-in-out, transform .2s ease-in-out;\n}\n\n.link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, .2),inset 1px 1px 2px 0 rgba(0,0,0, .1);\n    transform: scale(1.02);\n}\n\n[data-theme='dark'] .link-item {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .1), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-item:hover {\n    box-shadow: 1px 1px 5px 0 rgba(255,255,255, .2), inset 1px 1px 5px 0 rgba(255,255,255, .1);\n}\n\n[data-theme='dark'] .link-info p {\n    color: rgba(255,255,255,0.7);\n}\n\n.link-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 10px;\n    color: #000;\n}\n\n.item-icon img {\n    margin: 0;\n    width: 60px;\n    height: 50px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n.link-info p{\n    font-size: 14px;\n    color: rgba(0,0,0,.8);\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n}\n</style>\n\n<div class=\"links-container\">\n  <div class=\"link-item\">\n    <a href=\"https://a-big-dreamer.github.io/\" target=\"_blank\" class=\"link-card\" style=\"text-decoration: none\">\n      <div class=\"link-icon\">\n        <img src=\"../img/A-Big-Dreamer's-Blog.jpg\" alt=\"A Big Dreamer's Blog\" />\n      </div>\n      <div class=\"link-info\">\n        <h3>A Big Dreamer's Blog</h3>\n        <p>梦想成为伟大的梦想家</p>\n      </div>\n    </a>\n  </div>\n</div>\n\n"},{"title":"标签","date":"2025-05-11T03:16:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-05-11 11:16:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2025-06-07T07:22:07.232Z","path":"tags/index.html","layout":"page","_id":"cmcx3vq7c000c1s4h03i7e375","content":"","length":0,"excerpt":"","more":""},{"title":"心情","date":"2025-05-15T02:59:30.000Z","type":"videos","comment":false,"_content":"\n","source":"videos/index.md","raw":"---\ntitle: 心情\ndate: 2025-05-15 10:59:30\ntype: \"videos\"\ncomment: false\n---\n\n","updated":"2025-06-07T07:19:50.445Z","path":"videos/index.html","comments":1,"layout":"page","_id":"cmcx3vq7d000d1s4hfl4a4ryf","content":"","length":0,"excerpt":"","more":""}],"Post":[{"title":"Nginx安装与配置以及常用命令","abbrlink":"4f72a7f4","_content":"\n了解一下nginx的安装与配置，以及常见的nginx常用命令\n\n# 1. 安装与配置\n1. 阿里云申请免费云服务器，为nginx练习使用\n2. 连接远程服务器\n    - 首先重置root密码\n    - 若是使用vscode 可安装 `remote ssh`插件 （用来连接远程服务器）\n    - 连接到远程\n\n3. 下载nginx \n    - cd /usr/local\n    - wget https://nginx.org/download/nginx-1.28.0.tar.gz (若下载不成功可通过命令 `su` 切换到root用户)\n<img src=\"../../img/nginx/img.png\">\n\n    - tar -zxvf nginx-1.28.0.tar.gz\n    - cd ./nginx-1.28.0\n4. 初始配置及编译安装\n    - 初始配置 ./configure\n    - 编译源码 安装 make && make install\n    \n# 2. Nginx常见命令\n```\nuser admin; # 规定启动nginx的用户\nworker_processes 1; # Nginx 启动一个工作进程，适用于轻量部署或开发环境。\nevents {\n   worker_connections 1024; \n}\n\nhttp{\n   include mime.types; # 文件类型映射\n   default_type application/octet-stream; # 默认MIME类型\n   sendfile        on;                            # 启用 sendfile 加速\n   tcp_nopush      on;                            # 优化发送数据包\n   keepalive_timeout  65;                         # 长连接超时\n   client_max_body_size 10m;                      # 请求体大小限制\n\n   include /etc/nginx/conf.d/*.conf;              # 引入子配置文件\n   \n   # 静态文件配置\n   server {\n      listen 8080 ssl;\n      server_name localhost myTest.com;\n      \n      # 申请ssl证书 配置ssl证书\n      ssl_certificate /path/to/cert.pem;\n      ssl_certificate_key /path/to/cert.key;\n      \n      location / {\n         root /usr/local/nginx/html/dist; # 相对静态资源路径\n         index index.html inddex.htm;\n      }\n      \n      location /api {\n         # 设置CORS配置\n         add_header Access-Control-Allow-Origin *;\n         add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n         add_header Access-Control-Allow-Headers 'Content-Type, Authorization';\n         \n         alias /usr/local/nginx/html/dist/api; # 绝对静态资源路径\n         index index.html inddex.htm;\n         \n         if ($request_method = 'OPTIONS') {\n            return 204;\n         }\n      }\n   }\n}\n\n```\n\n","source":"_posts/nginx/nginx安装与配置.md","raw":"---\ntitle: Nginx安装与配置以及常用命令\ncategories:\n  - 分类\ntags:\n  - nginx\nabbrlink: 4f72a7f4\n---\n\n了解一下nginx的安装与配置，以及常见的nginx常用命令\n\n# 1. 安装与配置\n1. 阿里云申请免费云服务器，为nginx练习使用\n2. 连接远程服务器\n    - 首先重置root密码\n    - 若是使用vscode 可安装 `remote ssh`插件 （用来连接远程服务器）\n    - 连接到远程\n\n3. 下载nginx \n    - cd /usr/local\n    - wget https://nginx.org/download/nginx-1.28.0.tar.gz (若下载不成功可通过命令 `su` 切换到root用户)\n<img src=\"../../img/nginx/img.png\">\n\n    - tar -zxvf nginx-1.28.0.tar.gz\n    - cd ./nginx-1.28.0\n4. 初始配置及编译安装\n    - 初始配置 ./configure\n    - 编译源码 安装 make && make install\n    \n# 2. Nginx常见命令\n```\nuser admin; # 规定启动nginx的用户\nworker_processes 1; # Nginx 启动一个工作进程，适用于轻量部署或开发环境。\nevents {\n   worker_connections 1024; \n}\n\nhttp{\n   include mime.types; # 文件类型映射\n   default_type application/octet-stream; # 默认MIME类型\n   sendfile        on;                            # 启用 sendfile 加速\n   tcp_nopush      on;                            # 优化发送数据包\n   keepalive_timeout  65;                         # 长连接超时\n   client_max_body_size 10m;                      # 请求体大小限制\n\n   include /etc/nginx/conf.d/*.conf;              # 引入子配置文件\n   \n   # 静态文件配置\n   server {\n      listen 8080 ssl;\n      server_name localhost myTest.com;\n      \n      # 申请ssl证书 配置ssl证书\n      ssl_certificate /path/to/cert.pem;\n      ssl_certificate_key /path/to/cert.key;\n      \n      location / {\n         root /usr/local/nginx/html/dist; # 相对静态资源路径\n         index index.html inddex.htm;\n      }\n      \n      location /api {\n         # 设置CORS配置\n         add_header Access-Control-Allow-Origin *;\n         add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n         add_header Access-Control-Allow-Headers 'Content-Type, Authorization';\n         \n         alias /usr/local/nginx/html/dist/api; # 绝对静态资源路径\n         index index.html inddex.htm;\n         \n         if ($request_method = 'OPTIONS') {\n            return 204;\n         }\n      }\n   }\n}\n\n```\n\n","slug":"nginx/nginx安装与配置","published":1,"date":"2025-07-08T00:59:51.010Z","updated":"2025-07-09T08:41:18.620Z","comments":1,"layout":"post","photos":[],"_id":"cmcx3vq7500011s4h185vfq3y","content":"<p>了解一下nginx的安装与配置，以及常见的nginx常用命令</p>\n<h1 id=\"1-安装与配置\"><a href=\"#1-安装与配置\" class=\"headerlink\" title=\"1. 安装与配置\"></a>1. 安装与配置</h1><ol>\n<li><p>阿里云申请免费云服务器，为nginx练习使用</p>\n</li>\n<li><p>连接远程服务器</p>\n<ul>\n<li>首先重置root密码</li>\n<li>若是使用vscode 可安装 <code>remote ssh</code>插件 （用来连接远程服务器）</li>\n<li>连接到远程</li>\n</ul>\n</li>\n<li><p>下载nginx </p>\n<ul>\n<li>cd &#x2F;usr&#x2F;local</li>\n<li>wget <a href=\"https://nginx.org/download/nginx-1.28.0.tar.gz\">https://nginx.org/download/nginx-1.28.0.tar.gz</a> (若下载不成功可通过命令 <code>su</code> 切换到root用户)</li>\n</ul>\n</li>\n</ol>\n<img src=\"../../img/nginx/img.png\">\n\n<pre><code>- tar -zxvf nginx-1.28.0.tar.gz\n- cd ./nginx-1.28.0\n</code></pre>\n<ol start=\"4\">\n<li>初始配置及编译安装<ul>\n<li>初始配置 .&#x2F;configure</li>\n<li>编译源码 安装 make &amp;&amp; make install</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-Nginx常见命令\"><a href=\"#2-Nginx常见命令\" class=\"headerlink\" title=\"2. Nginx常见命令\"></a>2. Nginx常见命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">user admin; # 规定启动nginx的用户</span><br><span class=\"line\">worker_processes 1; # Nginx 启动一个工作进程，适用于轻量部署或开发环境。</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">   worker_connections 1024; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">   include mime.types; # 文件类型映射</span><br><span class=\"line\">   default_type application/octet-stream; # 默认MIME类型</span><br><span class=\"line\">   sendfile        on;                            # 启用 sendfile 加速</span><br><span class=\"line\">   tcp_nopush      on;                            # 优化发送数据包</span><br><span class=\"line\">   keepalive_timeout  65;                         # 长连接超时</span><br><span class=\"line\">   client_max_body_size 10m;                      # 请求体大小限制</span><br><span class=\"line\"></span><br><span class=\"line\">   include /etc/nginx/conf.d/*.conf;              # 引入子配置文件</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 静态文件配置</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">      listen 8080 ssl;</span><br><span class=\"line\">      server_name localhost myTest.com;</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 申请ssl证书 配置ssl证书</span><br><span class=\"line\">      ssl_certificate /path/to/cert.pem;</span><br><span class=\"line\">      ssl_certificate_key /path/to/cert.key;</span><br><span class=\"line\">      </span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">         root /usr/local/nginx/html/dist; # 相对静态资源路径</span><br><span class=\"line\">         index index.html inddex.htm;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      location /api &#123;</span><br><span class=\"line\">         # 设置CORS配置</span><br><span class=\"line\">         add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">         add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class=\"line\">         add_header Access-Control-Allow-Headers &#x27;Content-Type, Authorization&#x27;;</span><br><span class=\"line\">         </span><br><span class=\"line\">         alias /usr/local/nginx/html/dist/api; # 绝对静态资源路径</span><br><span class=\"line\">         index index.html inddex.htm;</span><br><span class=\"line\">         </span><br><span class=\"line\">         if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class=\"line\">            return 204;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","length":1265,"excerpt":"","more":"<p>了解一下nginx的安装与配置，以及常见的nginx常用命令</p>\n<h1 id=\"1-安装与配置\"><a href=\"#1-安装与配置\" class=\"headerlink\" title=\"1. 安装与配置\"></a>1. 安装与配置</h1><ol>\n<li><p>阿里云申请免费云服务器，为nginx练习使用</p>\n</li>\n<li><p>连接远程服务器</p>\n<ul>\n<li>首先重置root密码</li>\n<li>若是使用vscode 可安装 <code>remote ssh</code>插件 （用来连接远程服务器）</li>\n<li>连接到远程</li>\n</ul>\n</li>\n<li><p>下载nginx </p>\n<ul>\n<li>cd &#x2F;usr&#x2F;local</li>\n<li>wget <a href=\"https://nginx.org/download/nginx-1.28.0.tar.gz\">https://nginx.org/download/nginx-1.28.0.tar.gz</a> (若下载不成功可通过命令 <code>su</code> 切换到root用户)</li>\n</ul>\n</li>\n</ol>\n<img src=\"../../img/nginx/img.png\">\n\n<pre><code>- tar -zxvf nginx-1.28.0.tar.gz\n- cd ./nginx-1.28.0\n</code></pre>\n<ol start=\"4\">\n<li>初始配置及编译安装<ul>\n<li>初始配置 .&#x2F;configure</li>\n<li>编译源码 安装 make &amp;&amp; make install</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-Nginx常见命令\"><a href=\"#2-Nginx常见命令\" class=\"headerlink\" title=\"2. Nginx常见命令\"></a>2. Nginx常见命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">user admin; # 规定启动nginx的用户</span><br><span class=\"line\">worker_processes 1; # Nginx 启动一个工作进程，适用于轻量部署或开发环境。</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">   worker_connections 1024; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">   include mime.types; # 文件类型映射</span><br><span class=\"line\">   default_type application/octet-stream; # 默认MIME类型</span><br><span class=\"line\">   sendfile        on;                            # 启用 sendfile 加速</span><br><span class=\"line\">   tcp_nopush      on;                            # 优化发送数据包</span><br><span class=\"line\">   keepalive_timeout  65;                         # 长连接超时</span><br><span class=\"line\">   client_max_body_size 10m;                      # 请求体大小限制</span><br><span class=\"line\"></span><br><span class=\"line\">   include /etc/nginx/conf.d/*.conf;              # 引入子配置文件</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 静态文件配置</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">      listen 8080 ssl;</span><br><span class=\"line\">      server_name localhost myTest.com;</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 申请ssl证书 配置ssl证书</span><br><span class=\"line\">      ssl_certificate /path/to/cert.pem;</span><br><span class=\"line\">      ssl_certificate_key /path/to/cert.key;</span><br><span class=\"line\">      </span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">         root /usr/local/nginx/html/dist; # 相对静态资源路径</span><br><span class=\"line\">         index index.html inddex.htm;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      location /api &#123;</span><br><span class=\"line\">         # 设置CORS配置</span><br><span class=\"line\">         add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">         add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class=\"line\">         add_header Access-Control-Allow-Headers &#x27;Content-Type, Authorization&#x27;;</span><br><span class=\"line\">         </span><br><span class=\"line\">         alias /usr/local/nginx/html/dist/api; # 绝对静态资源路径</span><br><span class=\"line\">         index index.html inddex.htm;</span><br><span class=\"line\">         </span><br><span class=\"line\">         if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class=\"line\">            return 204;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"01- this的指向规则","indexing":false,"abbrlink":"d8cbe511","date":"2025-05-14T10:30:24.000Z","_content":"`this` 到底指向谁? 箭头函数中的`this`还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的`this`指向一致吗?\n## `this`到底指向谁？\n首先，定义一个函数：\n\n三种不同的调用方式，this的指向也会不同！\n\n1. 直接调用\n\n> foo()  // window{}\n>\n\n2. 通过对象调用\n\n```html\nvar obj = { name: 'name' }\nobj.foo = foo\nobj.foo(); // Object{}     (obj这个对象)\n```\n\n3. call/apply/bind\n\n> foo.apply(\"abc\") //  String {'abc'}\n\n**结论：**\n1. 函数在调用时，js会**默认给this绑定一个值**；\n2. this的绑定跟它**定义的位置（编写的位置）**没有关系；\n3. this的绑定与调用方式以及调用的位置有关；\n4. this是在运行时被绑定的。\n\n## `this`的绑定规则\n### 默认绑定\n+ 普通函数被独立调用\n\n> foo()   // window{}\n\n+ 函数定义在对象中，但是独立被调用\n\n> var bar = obj.foo\n> bar()  // window{}\n\n+ <font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的`this`指向`undefined`\n\n```html\n<script>\n\t\"use strict\"\n\t...\n</script>\n```\n\n+ 高阶函数\n\n> function test(fn) {\n>\n>     fn()\n>\n> }\n>\n> test(obj.foo) // window{}\n\n即独立调用函数时(非严格模式下)`this`指向`window`!\n\n### 隐式绑定\n> 一般是通过**对象**来发起调用。\n>\n\n![](../../img/js高级/01-this-img/image1.png)\n\n![](../../img/js高级/01-this-img/image2.png)\n\n### 显式绑定\n```javascript\nfoo.call(obj)\nfoo.apply(obj) // foo {name:'name'}\n```\n\n+ 这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；\n+ 另外，这种形式一般将this绑定在对象身上，如果foo.call('abc')，那么也会默认将'abc'创建为对应的包装类型，这里也就是`String`对象;\n+ 如果是绑定在了`undefined`这种没有对应包装类型的对象身上，那么this就会默认指向`window`\n\n#### call / apply函数说明\n```javascript\nfunction test(name, age) {\n  console.log('参数:', name, age);\n}\n```\n\n作用：都可以调取函数并绑定this，传递参数方式不同\n\n+ `apply(obj,[argumentsArray])`\n\n`obj`是指this指向的对象；\n\n`argumentsArray`是指函数的参数，必须要放在**数组**中进行传递；\n\n```javascript\n// apply\ntest.apply('apply', ['chenber', 18]) // 参数: chenber 18\n```\n\n+ `<font style=\"color:#DF2A3F;\">call(obj,arg1,arg2,...)</font>`\n\n`obj`是指this指向的对象；\n\n`arg1,arg2,...`是指函数的参数列表。\n\n```javascript\n// call\ntest.call('call', 'chender', 18) // 参数: chender 18\n```\n\n#### bind\n```javascript\n// bind\nvar bar = test.bind('bind')\nbar() // 参数:this,String{'bind}\n\nvar bar = test.call('call', 'chender', 18) // 参数: chender 18\nbar() // 报错\n```\n\n`bind`是`绑定（怪异）函数`，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；\n\n而`call`和`apply`都是直接执行函数，没有返回值 。\n\n+ bind()的其他参数\n\n```javascript\nvar bar = test.call('call', 'chender', 18)\nbar() // 参数: chender 18\nbar() // 参数: chender 18    （参数一开始就指定好了，修改不了）\n```\n\n❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）\n\n这里就涉及到了**this绑定的优先级**了！\n\n1. 默认绑定优先级最低\n2. 显式绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  age: 18,\n  test: test\n}\n\nobj.test.apply('apply', ['1', 19]) \n// this [String: 'apply']\n// 参数: 1 19\nvar test1 = obj.test.bind('bind', 'chenber', 18)\ntest1()\n// this [String: 'bind']\n// 参数: chenber 18\n```\n\n3. new 绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  foo: function () {\n    console.log('foo:', this);\n    console.log('foo:', this === obj);\n  }\n}\nnew obj.foo()\n// foo: foo {}\n// foo: false\n```\n\n4.  new > 显式(bind)\n\n❗️`new`和`apply` / `call`不可以一起使用，所以没有可比性\n\n`new`和`bind`可以一起使用\n\n```javascript\nfunction test() {\n      console.log('test', this);\n    }\n\n    var testFN = test.bind('abc')\n    new testFN() // test{}\n```\n\n### new绑定\n\n使用new关键字来调用函数是，会执行如下的操作：\n- 创建一个全新的对象；\n- 这个新对象会被执行prototype连接：\n- 这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；\n- 如果函数没有返回其他对象，表达式会返回这个新对象：\n\n总结(优先级从高到低)：\n1. new\n2. bind \n3. apply / call\n4. 隐式\n5. 默认绑定\n## 内置函数的调用绑定\n内置函数的this指向需要`根据一些经验`获取\n\n1. setTimeOut()\n\n```javascript\nsetTimeOut(()=>{\n  console.log('this', this) //window\n},1000)\n```\n\n2. 按钮的点击监听\n\n```javascript\n    var btn = document.querySelector('button')\n    btn.onclick = function () {\n      console.log('btn', this); // <button>点击</button>\n    }\n btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // <button>点击</button>\n    })\n    btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // window\n    })\n```\n\n3. forEach\n\nforEach(function(){}, {})\n\n![](../../img/js高级/01-this-img/image3.png)\n\nforEach的两个参数：\n\n1. 回调函数\n2. 回调函数的this绑定对象\n\n```javascript\nconst names = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\nnames.forEach(function (item) {\n  console.log('forEach', this); // window\n})\n\nnames.forEach(function (item) {\n      console.log('forEach', this); // String {'abc'}\n    }, \"cba\")\n```\n## `this` 绑定之外的规则\n1. 如果在使用显式绑定时传入`null`或者`undefined`，那么就会使用默认绑定规则\n\n```javascript\n    foo.apply(null) // window\n    foo.apply(undefined) // window\n```\n严格模式差异：在严格模式下，绑定null/undefined时会直接使用传入值，this会指向null或undefined本身。\n\n2. 间接函数引用（知道就行，一般不会出现）\n```javascript\n    var obj2 = {};\n    (obj2.foo = obj.foo)() // window\n```\n3. 箭头函数(补充)\n箭头函数是 `es6` 新增的一种函数的声明方法。\n- 完整写法\n\n```javascript\nconst foo = (name,age)=>{\n\tconsole.log(\"=>\")\n}\n```\n❗️注:\n\n\t- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n\t- \t箭头函数不能作为构造函数来使用（会抛出错误）\n\n- 箭头函数的简写\n\t- 只有一个参数时 可省略()\n![](../../img/js高级/01-this-img/image4.png)\n\t- 函数体只有一行语句时，可省略{}，但是不能带return 关键字\n![](../../img/js高级/01-this-img/image5.png)\n\t- 如果执行体只有返回一个对象，那么需要给这个对象加上()\n![](../../img/js高级/01-this-img/image6.png)\n## 箭头函数中的 `this` 使用\n **箭头函数的作用域没有 `this` ！**\n 但是箭头函数中`this`会向寻找上层作用域中的`this`，直至找到全局this->`window`。\n\n```javascript\nconst test = () => {\n  console.log('this', this);\n}\ntest() // window\nvar test1 = test.bind('abc')\ntest1() // window\nvar obj = {\n\tname: 'chenber',\n\tfoo: () => {\n        console.log('this', this);\n      }\n }\nobj.foo() // window\nconst test2 = obj.foo.bind('abc')\ntest2() // window\n```\n应用实例：\n\n```javascript\n   // 模拟网络请求函数\n    function request(url, callbackFn) {\n      const results = {\n        code: 200,\n        msg: '成功',\n        data: null\n      }\n      callbackFn(results)\n    }\n    \n    // 将获取的数据传输给obj的results\n    var obj = {\n      results: {},\n      // 之前的写法：\n      // getData: function () {\n      //   var _this = this\n      //   request('/test', function (res) {\n      //     _this.results = res\n      //   })\n      // }\n\n      // 使用箭头函数:\n      getData: function () {\n        request('/test', (res) => {\n          this.results = res\n        })\n      }\n    }\n    obj.getData()\n```\n## 1.6 相关面试题\n1. 面试题一\n\n```javascript\n// 面试题一\nvar name = 'window'\nvar person = {\n  name: 'person',\n  sayName: function () {\n    console.log(this.name)\n  }\n}\nfunction sayName() {\n  var sss = person.sayName;\n  sss(); // 默认绑定  输出：window\n\n  person.sayName(); // 隐式绑定  输出：person\n  (person.sayName)();  // 隐式绑定  输出：person  // 此处的;不能省略，因为下面是间接函数引用\n  (b = person.sayName)() // 默认绑定  输出：window     此处为间接函数引用，相当于独立函数调用，即this指向window \n}\n```\n\n2. 面试题二\n\n```javascript\n// 面试题二\nvar name = 'window'\nvar person1 = {\n  name: 'person1',\n  foo1: function () {\n    console.log(this.name)\n  },\n  foo2: () => console.log(this.name),\n  foo3: function () {\n    return function () {\n      console.log(this.name)\n    }\n  },\n  foo4: function () {\n    return () => {\n      console.log(this.name)\n    }\n  }\n}\n\nvar person2 = {\n  name: 'person2'\n}\n\nperson1.foo1(); // 隐式绑定  输出：person1\nperson1.foo1.call(person2); // 显示绑定   输出：person2\n\nperson1.foo2(); // 默认绑定  输出：window  \nperson1.foo2.call(person2); // 显示绑定  this->上层作用域  输出：window\n\n// 上层作用域指的是函数定义时的作用域，而不是函数运行时的作用域   \n// 所以下面这几种情况要注意区分\nperson1.foo3()(); // 默认绑定  输出：window \nperson1.foo3.call(person2)(); // 显示绑定  输出：window\nperson1.foo3().call(person2); // 显示绑定  输出：person2\n\nperson1.foo4()(); // 间接函数引用  输出：person1\nperson1.foo4.call(person2)(); // 间接函数引用  输出：person2\nperson1.foo4().call(person2); // 显式绑定  输出：person1\n```\n\n3. 面试题三\n   ![在这里插入图片描述](../../img/js高级/01-this-img/image7.png)\n\n```javascript\n// 面试题三\nvar name = 'window'\nfunction Person(name) {\n  this.name = name\n  this.foo1 = function () {\n    console.log(this.name)\n  }\n  this.foo2 = () => console.log(this.name)\n  this.foo3 = function () {\n    return function () {\n      console.log(this.name)\n    }\n  }\n  this.foo4 = function () {\n    return () => {\n      console.log(this.name)\n    }\n  }\n}\n\nvar person1 = new Person('person1')\nvar person2 = new Person('person2')\n\nperson1.foo1(); // 隐式绑定  输出：person1\nperson1.foo1.call(person2); // 显示绑定  输出：person2\n\nperson1.foo2(); // 上层作用域查找  输出：person1  \nperson1.foo2.call(person2); // 显示绑定  this->上层作用域  输出：person2\n\nperson1.foo3()(); // 默认绑定  输出：window \nperson1.foo3.call(person2)(); // 显式绑定  输出：window\nperson1.foo3().call(person2); // 显式绑定  输出：person2\n\nperson1.foo4()(); // 隐式绑定 上层作用域查找  输出：person1\nperson1.foo4.call(person2)(); // 显式绑定  上层作用域查找  输出：person2\nperson1.foo4().call(person2); // 显式绑定  上层作用域查找  输出：person1\n```\n\n4. 面试题四\n   ![在这里插入图片描述](../../img/js高级/01-this-img/image8.png)\n```javascript\n// 面试题四\nvar name = 'window'\nfunction Person(name) {\n  this.name = name\n  this.obj = {\n    name: 'obj',\n    foo1: function () {\n      return function () {\n        console.log(this.name)\n      }\n    },\n    foo2: function () {\n      return () => {\n        console.log(this.name)\n      }\n    }\n  }\n}\n\nvar person1 = new Person('person1')\nvar person2 = new Person('person2')\n\nperson1.obj.foo1()()// 隐式绑定 window\nperson1.obj.foo1.call(person2)() // 显式绑定 window\nperson1.obj.foo1().call(person2) //  显式绑定 person2\n\nperson1.obj.foo2()() // 隐式绑定 obj\nperson1.obj.foo2.call(person2)() // 显式绑定 person2\nperson1.obj.foo2().call(person2) // 显式绑定 obj\n```\n\n\n\n \n\n","source":"_posts/js高级/01-this的指向规则.md","raw":"---\ntitle: 01- this的指向规则\ncategories:\n  - 分类\ntags:\n  - js高级\nindexing: false\nabbrlink: d8cbe511\ndate: 2025-05-14 18:30:24\n---\n`this` 到底指向谁? 箭头函数中的`this`还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的`this`指向一致吗?\n## `this`到底指向谁？\n首先，定义一个函数：\n\n三种不同的调用方式，this的指向也会不同！\n\n1. 直接调用\n\n> foo()  // window{}\n>\n\n2. 通过对象调用\n\n```html\nvar obj = { name: 'name' }\nobj.foo = foo\nobj.foo(); // Object{}     (obj这个对象)\n```\n\n3. call/apply/bind\n\n> foo.apply(\"abc\") //  String {'abc'}\n\n**结论：**\n1. 函数在调用时，js会**默认给this绑定一个值**；\n2. this的绑定跟它**定义的位置（编写的位置）**没有关系；\n3. this的绑定与调用方式以及调用的位置有关；\n4. this是在运行时被绑定的。\n\n## `this`的绑定规则\n### 默认绑定\n+ 普通函数被独立调用\n\n> foo()   // window{}\n\n+ 函数定义在对象中，但是独立被调用\n\n> var bar = obj.foo\n> bar()  // window{}\n\n+ <font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的`this`指向`undefined`\n\n```html\n<script>\n\t\"use strict\"\n\t...\n</script>\n```\n\n+ 高阶函数\n\n> function test(fn) {\n>\n>     fn()\n>\n> }\n>\n> test(obj.foo) // window{}\n\n即独立调用函数时(非严格模式下)`this`指向`window`!\n\n### 隐式绑定\n> 一般是通过**对象**来发起调用。\n>\n\n![](../../img/js高级/01-this-img/image1.png)\n\n![](../../img/js高级/01-this-img/image2.png)\n\n### 显式绑定\n```javascript\nfoo.call(obj)\nfoo.apply(obj) // foo {name:'name'}\n```\n\n+ 这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；\n+ 另外，这种形式一般将this绑定在对象身上，如果foo.call('abc')，那么也会默认将'abc'创建为对应的包装类型，这里也就是`String`对象;\n+ 如果是绑定在了`undefined`这种没有对应包装类型的对象身上，那么this就会默认指向`window`\n\n#### call / apply函数说明\n```javascript\nfunction test(name, age) {\n  console.log('参数:', name, age);\n}\n```\n\n作用：都可以调取函数并绑定this，传递参数方式不同\n\n+ `apply(obj,[argumentsArray])`\n\n`obj`是指this指向的对象；\n\n`argumentsArray`是指函数的参数，必须要放在**数组**中进行传递；\n\n```javascript\n// apply\ntest.apply('apply', ['chenber', 18]) // 参数: chenber 18\n```\n\n+ `<font style=\"color:#DF2A3F;\">call(obj,arg1,arg2,...)</font>`\n\n`obj`是指this指向的对象；\n\n`arg1,arg2,...`是指函数的参数列表。\n\n```javascript\n// call\ntest.call('call', 'chender', 18) // 参数: chender 18\n```\n\n#### bind\n```javascript\n// bind\nvar bar = test.bind('bind')\nbar() // 参数:this,String{'bind}\n\nvar bar = test.call('call', 'chender', 18) // 参数: chender 18\nbar() // 报错\n```\n\n`bind`是`绑定（怪异）函数`，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；\n\n而`call`和`apply`都是直接执行函数，没有返回值 。\n\n+ bind()的其他参数\n\n```javascript\nvar bar = test.call('call', 'chender', 18)\nbar() // 参数: chender 18\nbar() // 参数: chender 18    （参数一开始就指定好了，修改不了）\n```\n\n❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）\n\n这里就涉及到了**this绑定的优先级**了！\n\n1. 默认绑定优先级最低\n2. 显式绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  age: 18,\n  test: test\n}\n\nobj.test.apply('apply', ['1', 19]) \n// this [String: 'apply']\n// 参数: 1 19\nvar test1 = obj.test.bind('bind', 'chenber', 18)\ntest1()\n// this [String: 'bind']\n// 参数: chenber 18\n```\n\n3. new 绑定 > 隐式绑定\n\n```javascript\nvar obj = {\n  name: 'chenber',\n  foo: function () {\n    console.log('foo:', this);\n    console.log('foo:', this === obj);\n  }\n}\nnew obj.foo()\n// foo: foo {}\n// foo: false\n```\n\n4.  new > 显式(bind)\n\n❗️`new`和`apply` / `call`不可以一起使用，所以没有可比性\n\n`new`和`bind`可以一起使用\n\n```javascript\nfunction test() {\n      console.log('test', this);\n    }\n\n    var testFN = test.bind('abc')\n    new testFN() // test{}\n```\n\n### new绑定\n\n使用new关键字来调用函数是，会执行如下的操作：\n- 创建一个全新的对象；\n- 这个新对象会被执行prototype连接：\n- 这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；\n- 如果函数没有返回其他对象，表达式会返回这个新对象：\n\n总结(优先级从高到低)：\n1. new\n2. bind \n3. apply / call\n4. 隐式\n5. 默认绑定\n## 内置函数的调用绑定\n内置函数的this指向需要`根据一些经验`获取\n\n1. setTimeOut()\n\n```javascript\nsetTimeOut(()=>{\n  console.log('this', this) //window\n},1000)\n```\n\n2. 按钮的点击监听\n\n```javascript\n    var btn = document.querySelector('button')\n    btn.onclick = function () {\n      console.log('btn', this); // <button>点击</button>\n    }\n btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // <button>点击</button>\n    })\n    btn.addEventListener(\"click\", () => {\n      console.log('btn', this); // window\n    })\n```\n\n3. forEach\n\nforEach(function(){}, {})\n\n![](../../img/js高级/01-this-img/image3.png)\n\nforEach的两个参数：\n\n1. 回调函数\n2. 回调函数的this绑定对象\n\n```javascript\nconst names = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\nnames.forEach(function (item) {\n  console.log('forEach', this); // window\n})\n\nnames.forEach(function (item) {\n      console.log('forEach', this); // String {'abc'}\n    }, \"cba\")\n```\n## `this` 绑定之外的规则\n1. 如果在使用显式绑定时传入`null`或者`undefined`，那么就会使用默认绑定规则\n\n```javascript\n    foo.apply(null) // window\n    foo.apply(undefined) // window\n```\n严格模式差异：在严格模式下，绑定null/undefined时会直接使用传入值，this会指向null或undefined本身。\n\n2. 间接函数引用（知道就行，一般不会出现）\n```javascript\n    var obj2 = {};\n    (obj2.foo = obj.foo)() // window\n```\n3. 箭头函数(补充)\n箭头函数是 `es6` 新增的一种函数的声明方法。\n- 完整写法\n\n```javascript\nconst foo = (name,age)=>{\n\tconsole.log(\"=>\")\n}\n```\n❗️注:\n\n\t- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n\t- \t箭头函数不能作为构造函数来使用（会抛出错误）\n\n- 箭头函数的简写\n\t- 只有一个参数时 可省略()\n![](../../img/js高级/01-this-img/image4.png)\n\t- 函数体只有一行语句时，可省略{}，但是不能带return 关键字\n![](../../img/js高级/01-this-img/image5.png)\n\t- 如果执行体只有返回一个对象，那么需要给这个对象加上()\n![](../../img/js高级/01-this-img/image6.png)\n## 箭头函数中的 `this` 使用\n **箭头函数的作用域没有 `this` ！**\n 但是箭头函数中`this`会向寻找上层作用域中的`this`，直至找到全局this->`window`。\n\n```javascript\nconst test = () => {\n  console.log('this', this);\n}\ntest() // window\nvar test1 = test.bind('abc')\ntest1() // window\nvar obj = {\n\tname: 'chenber',\n\tfoo: () => {\n        console.log('this', this);\n      }\n }\nobj.foo() // window\nconst test2 = obj.foo.bind('abc')\ntest2() // window\n```\n应用实例：\n\n```javascript\n   // 模拟网络请求函数\n    function request(url, callbackFn) {\n      const results = {\n        code: 200,\n        msg: '成功',\n        data: null\n      }\n      callbackFn(results)\n    }\n    \n    // 将获取的数据传输给obj的results\n    var obj = {\n      results: {},\n      // 之前的写法：\n      // getData: function () {\n      //   var _this = this\n      //   request('/test', function (res) {\n      //     _this.results = res\n      //   })\n      // }\n\n      // 使用箭头函数:\n      getData: function () {\n        request('/test', (res) => {\n          this.results = res\n        })\n      }\n    }\n    obj.getData()\n```\n## 1.6 相关面试题\n1. 面试题一\n\n```javascript\n// 面试题一\nvar name = 'window'\nvar person = {\n  name: 'person',\n  sayName: function () {\n    console.log(this.name)\n  }\n}\nfunction sayName() {\n  var sss = person.sayName;\n  sss(); // 默认绑定  输出：window\n\n  person.sayName(); // 隐式绑定  输出：person\n  (person.sayName)();  // 隐式绑定  输出：person  // 此处的;不能省略，因为下面是间接函数引用\n  (b = person.sayName)() // 默认绑定  输出：window     此处为间接函数引用，相当于独立函数调用，即this指向window \n}\n```\n\n2. 面试题二\n\n```javascript\n// 面试题二\nvar name = 'window'\nvar person1 = {\n  name: 'person1',\n  foo1: function () {\n    console.log(this.name)\n  },\n  foo2: () => console.log(this.name),\n  foo3: function () {\n    return function () {\n      console.log(this.name)\n    }\n  },\n  foo4: function () {\n    return () => {\n      console.log(this.name)\n    }\n  }\n}\n\nvar person2 = {\n  name: 'person2'\n}\n\nperson1.foo1(); // 隐式绑定  输出：person1\nperson1.foo1.call(person2); // 显示绑定   输出：person2\n\nperson1.foo2(); // 默认绑定  输出：window  \nperson1.foo2.call(person2); // 显示绑定  this->上层作用域  输出：window\n\n// 上层作用域指的是函数定义时的作用域，而不是函数运行时的作用域   \n// 所以下面这几种情况要注意区分\nperson1.foo3()(); // 默认绑定  输出：window \nperson1.foo3.call(person2)(); // 显示绑定  输出：window\nperson1.foo3().call(person2); // 显示绑定  输出：person2\n\nperson1.foo4()(); // 间接函数引用  输出：person1\nperson1.foo4.call(person2)(); // 间接函数引用  输出：person2\nperson1.foo4().call(person2); // 显式绑定  输出：person1\n```\n\n3. 面试题三\n   ![在这里插入图片描述](../../img/js高级/01-this-img/image7.png)\n\n```javascript\n// 面试题三\nvar name = 'window'\nfunction Person(name) {\n  this.name = name\n  this.foo1 = function () {\n    console.log(this.name)\n  }\n  this.foo2 = () => console.log(this.name)\n  this.foo3 = function () {\n    return function () {\n      console.log(this.name)\n    }\n  }\n  this.foo4 = function () {\n    return () => {\n      console.log(this.name)\n    }\n  }\n}\n\nvar person1 = new Person('person1')\nvar person2 = new Person('person2')\n\nperson1.foo1(); // 隐式绑定  输出：person1\nperson1.foo1.call(person2); // 显示绑定  输出：person2\n\nperson1.foo2(); // 上层作用域查找  输出：person1  \nperson1.foo2.call(person2); // 显示绑定  this->上层作用域  输出：person2\n\nperson1.foo3()(); // 默认绑定  输出：window \nperson1.foo3.call(person2)(); // 显式绑定  输出：window\nperson1.foo3().call(person2); // 显式绑定  输出：person2\n\nperson1.foo4()(); // 隐式绑定 上层作用域查找  输出：person1\nperson1.foo4.call(person2)(); // 显式绑定  上层作用域查找  输出：person2\nperson1.foo4().call(person2); // 显式绑定  上层作用域查找  输出：person1\n```\n\n4. 面试题四\n   ![在这里插入图片描述](../../img/js高级/01-this-img/image8.png)\n```javascript\n// 面试题四\nvar name = 'window'\nfunction Person(name) {\n  this.name = name\n  this.obj = {\n    name: 'obj',\n    foo1: function () {\n      return function () {\n        console.log(this.name)\n      }\n    },\n    foo2: function () {\n      return () => {\n        console.log(this.name)\n      }\n    }\n  }\n}\n\nvar person1 = new Person('person1')\nvar person2 = new Person('person2')\n\nperson1.obj.foo1()()// 隐式绑定 window\nperson1.obj.foo1.call(person2)() // 显式绑定 window\nperson1.obj.foo1().call(person2) //  显式绑定 person2\n\nperson1.obj.foo2()() // 隐式绑定 obj\nperson1.obj.foo2.call(person2)() // 显式绑定 person2\nperson1.obj.foo2().call(person2) // 显式绑定 obj\n```\n\n\n\n \n\n","slug":"js高级/01-this的指向规则","published":1,"updated":"2025-05-16T03:17:14.434Z","comments":1,"layout":"post","photos":[],"_id":"cmcx3vq7800031s4hb9ce1mnu","content":"<p><code>this</code> 到底指向谁? 箭头函数中的<code>this</code>还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的<code>this</code>指向一致吗?</p>\n<h2 id=\"this到底指向谁？\"><a href=\"#this到底指向谁？\" class=\"headerlink\" title=\"this到底指向谁？\"></a><code>this</code>到底指向谁？</h2><p>首先，定义一个函数：</p>\n<p>三种不同的调用方式，this的指向也会不同！</p>\n<ol>\n<li>直接调用</li>\n</ol>\n<blockquote>\n<p>foo()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ol start=\"2\">\n<li>通过对象调用</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">var obj = &#123; name: &#x27;name&#x27; &#125;</span><br><span class=\"line\">obj.foo = foo</span><br><span class=\"line\">obj.foo(); // Object&#123;&#125;     (obj这个对象)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>call&#x2F;apply&#x2F;bind</li>\n</ol>\n<blockquote>\n<p>foo.apply(“abc”) &#x2F;&#x2F;  String {‘abc’}</p>\n</blockquote>\n<p><strong>结论：</strong></p>\n<ol>\n<li>函数在调用时，js会<strong>默认给this绑定一个值</strong>；</li>\n<li>this的绑定跟它**定义的位置（编写的位置）**没有关系；</li>\n<li>this的绑定与调用方式以及调用的位置有关；</li>\n<li>this是在运行时被绑定的。</li>\n</ol>\n<h2 id=\"this的绑定规则\"><a href=\"#this的绑定规则\" class=\"headerlink\" title=\"this的绑定规则\"></a><code>this</code>的绑定规则</h2><h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><ul>\n<li>普通函数被独立调用</li>\n</ul>\n<blockquote>\n<p>foo()   &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li>函数定义在对象中，但是独立被调用</li>\n</ul>\n<blockquote>\n<p>var bar &#x3D; obj.foo<br>bar()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li><font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的<code>this</code>指向<code>undefined</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"language-javascript\">\t&quot;use strict&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t...</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>高阶函数</li>\n</ul>\n<blockquote>\n<p>function test(fn) {</p>\n<pre><code>fn()\n</code></pre>\n<p>}</p>\n<p>test(obj.foo) &#x2F;&#x2F; window{}</p>\n</blockquote>\n<p>即独立调用函数时(非严格模式下)<code>this</code>指向<code>window</code>!</p>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><blockquote>\n<p>一般是通过<strong>对象</strong>来发起调用。</p>\n</blockquote>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image1.png\"></p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image2.png\"></p>\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">call</span>(obj)</span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(obj) <span class=\"comment\">// foo &#123;name:&#x27;name&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；</li>\n<li>另外，这种形式一般将this绑定在对象身上，如果foo.call(‘abc’)，那么也会默认将’abc’创建为对应的包装类型，这里也就是<code>String</code>对象;</li>\n<li>如果是绑定在了<code>undefined</code>这种没有对应包装类型的对象身上，那么this就会默认指向<code>window</code></li>\n</ul>\n<h4 id=\"call-apply函数说明\"><a href=\"#call-apply函数说明\" class=\"headerlink\" title=\"call &#x2F; apply函数说明\"></a>call &#x2F; apply函数说明</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;参数:&#x27;</span>, name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用：都可以调取函数并绑定this，传递参数方式不同</p>\n<ul>\n<li><code>apply(obj,[argumentsArray])</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>argumentsArray</code>是指函数的参数，必须要放在<strong>数组</strong>中进行传递；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply</span></span><br><span class=\"line\">test.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>]) <span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;call(obj,arg1,arg2,...)&lt;/font&gt;</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>arg1,arg2,...</code>是指函数的参数列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数:this,String&#123;&#x27;bind&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bind</code>是<code>绑定（怪异）函数</code>，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；</p>\n<p>而<code>call</code>和<code>apply</code>都是直接执行函数，没有返回值 。</p>\n<ul>\n<li>bind()的其他参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18    （参数一开始就指定好了，修改不了）</span></span><br></pre></td></tr></table></figure>\n\n<p>❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）</p>\n<p>这里就涉及到了<strong>this绑定的优先级</strong>了！</p>\n<ol>\n<li>默认绑定优先级最低</li>\n<li>显式绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">test</span>: test</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">test</span>.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">19</span>]) </span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;apply&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: 1 19</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = obj.<span class=\"property\">test</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>, <span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>()</span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;bind&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>new 绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span> === obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">foo</span>()</span><br><span class=\"line\"><span class=\"comment\">// foo: foo &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// foo: false</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>new &gt; 显式(bind)</li>\n</ol>\n<p>❗️<code>new</code>和<code>apply</code> &#x2F; <code>call</code>不可以一起使用，所以没有可比性</p>\n<p><code>new</code>和<code>bind</code>可以一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> testFN = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title function_\">testFN</span>() <span class=\"comment\">// test&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><p>使用new关键字来调用函数是，会执行如下的操作：</p>\n<ul>\n<li>创建一个全新的对象；</li>\n<li>这个新对象会被执行prototype连接：</li>\n<li>这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；</li>\n<li>如果函数没有返回其他对象，表达式会返回这个新对象：</li>\n</ul>\n<p>总结(优先级从高到低)：</p>\n<ol>\n<li>new</li>\n<li>bind </li>\n<li>apply &#x2F; call</li>\n<li>隐式</li>\n<li>默认绑定</li>\n</ol>\n<h2 id=\"内置函数的调用绑定\"><a href=\"#内置函数的调用绑定\" class=\"headerlink\" title=\"内置函数的调用绑定\"></a>内置函数的调用绑定</h2><p>内置函数的this指向需要<code>根据一些经验</code>获取</p>\n<ol>\n<li>setTimeOut()</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setTimeOut</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>) <span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>按钮的点击监听</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>)</span><br><span class=\"line\">   btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>forEach</li>\n</ol>\n<p>forEach(function(){}, {})</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image3.png\"></p>\n<p>forEach的两个参数：</p>\n<ol>\n<li>回调函数</li>\n<li>回调函数的this绑定对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]</span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;cba&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"this-绑定之外的规则\"><a href=\"#this-绑定之外的规则\" class=\"headerlink\" title=\"this 绑定之外的规则\"></a><code>this</code> 绑定之外的规则</h2><ol>\n<li>如果在使用显式绑定时传入<code>null</code>或者<code>undefined</code>，那么就会使用默认绑定规则</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>严格模式差异：在严格模式下，绑定null&#x2F;undefined时会直接使用传入值，this会指向null或undefined本身。</p>\n<ol start=\"2\">\n<li>间接函数引用（知道就行，一般不会出现）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;</span><br><span class=\"line\">(obj2.<span class=\"property\">foo</span> = obj.<span class=\"property\">foo</span>)() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>箭头函数(补充)<br>箭头函数是 <code>es6</code> 新增的一种函数的声明方法。</li>\n</ol>\n<ul>\n<li>完整写法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name,age</span>)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;=&gt;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>❗️注:</p>\n<pre><code>- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n- \t箭头函数不能作为构造函数来使用（会抛出错误）\n</code></pre>\n<ul>\n<li>箭头函数的简写<ul>\n<li>只有一个参数时 可省略()<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image4.png\"></li>\n<li>函数体只有一行语句时，可省略{}，但是不能带return 关键字<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image5.png\"></li>\n<li>如果执行体只有返回一个对象，那么需要给这个对象加上()<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image6.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"箭头函数中的-this-使用\"><a href=\"#箭头函数中的-this-使用\" class=\"headerlink\" title=\"箭头函数中的 this 使用\"></a>箭头函数中的 <code>this</code> 使用</h2><p> <strong>箭头函数的作用域没有 <code>this</code> ！</strong><br> 但是箭头函数中<code>this</code>会向寻找上层作用域中的<code>this</code>，直至找到全局this-&gt;<code>window</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">foo</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test2 = obj.<span class=\"property\">foo</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test2</span>() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>应用实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟网络请求函数</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">url, callbackFn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> results = &#123;</span><br><span class=\"line\">     <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">     <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;成功&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">data</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">callbackFn</span>(results)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 将获取的数据传输给obj的results</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">results</span>: &#123;&#125;,</span><br><span class=\"line\">   <span class=\"comment\">// 之前的写法：</span></span><br><span class=\"line\">   <span class=\"comment\">// getData: function () &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//   var _this = this</span></span><br><span class=\"line\">   <span class=\"comment\">//   request(&#x27;/test&#x27;, function (res) &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//     _this.results = res</span></span><br><span class=\"line\">   <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 使用箭头函数:</span></span><br><span class=\"line\">   <span class=\"attr\">getData</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;/test&#x27;</span>, <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">results</span> = res</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> obj.<span class=\"title function_\">getData</span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-6-相关面试题\"><a href=\"#1-6-相关面试题\" class=\"headerlink\" title=\"1.6 相关面试题\"></a>1.6 相关面试题</h2><ol>\n<li>面试题一</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sayName</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sss = person.<span class=\"property\">sayName</span>;</span><br><span class=\"line\">  <span class=\"title function_\">sss</span>(); <span class=\"comment\">// 默认绑定  输出：window</span></span><br><span class=\"line\"></span><br><span class=\"line\">  person.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// 隐式绑定  输出：person</span></span><br><span class=\"line\">  (person.<span class=\"property\">sayName</span>)();  <span class=\"comment\">// 隐式绑定  输出：person  // 此处的;不能省略，因为下面是间接函数引用</span></span><br><span class=\"line\">  (b = person.<span class=\"property\">sayName</span>)() <span class=\"comment\">// 默认绑定  输出：window     此处为间接函数引用，相当于独立函数调用，即this指向window </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>面试题二</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;person1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo1</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">foo2</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>),</span><br><span class=\"line\">  <span class=\"attr\">foo3</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">foo4</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;person2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo1</span>(); <span class=\"comment\">// 隐式绑定  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定   输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo2</span>(); <span class=\"comment\">// 默认绑定  输出：window  </span></span><br><span class=\"line\">person1.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  this-&gt;上层作用域  输出：window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上层作用域指的是函数定义时的作用域，而不是函数运行时的作用域   </span></span><br><span class=\"line\"><span class=\"comment\">// 所以下面这几种情况要注意区分</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>()(); <span class=\"comment\">// 默认绑定  输出：window </span></span><br><span class=\"line\">person1.<span class=\"property\">foo3</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 显示绑定  输出：window</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>()(); <span class=\"comment\">// 间接函数引用  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo4</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 间接函数引用  输出：person2</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显式绑定  输出：person1</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>面试题三<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image7.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo1</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo2</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo3</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo4</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo1</span>(); <span class=\"comment\">// 隐式绑定  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo2</span>(); <span class=\"comment\">// 上层作用域查找  输出：person1  </span></span><br><span class=\"line\">person1.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  this-&gt;上层作用域  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>()(); <span class=\"comment\">// 默认绑定  输出：window </span></span><br><span class=\"line\">person1.<span class=\"property\">foo3</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 显式绑定  输出：window</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显式绑定  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>()(); <span class=\"comment\">// 隐式绑定 上层作用域查找  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo4</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 显式绑定  上层作用域查找  输出：person2</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显式绑定  上层作用域查找  输出：person1</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>面试题四<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image8.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题四</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo1</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">foo2</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo1</span>()()<span class=\"comment\">// 隐式绑定 window</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2)() <span class=\"comment\">// 显式绑定 window</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo1</span>().<span class=\"title function_\">call</span>(person2) <span class=\"comment\">//  显式绑定 person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo2</span>()() <span class=\"comment\">// 隐式绑定 obj</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2)() <span class=\"comment\">// 显式绑定 person2</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo2</span>().<span class=\"title function_\">call</span>(person2) <span class=\"comment\">// 显式绑定 obj</span></span><br></pre></td></tr></table></figure>\n\n\n\n","length":7481,"excerpt":"","more":"<p><code>this</code> 到底指向谁? 箭头函数中的<code>this</code>还能使用吗? 如果能使用又要怎么使用呢? 与普通函数的<code>this</code>指向一致吗?</p>\n<h2 id=\"this到底指向谁？\"><a href=\"#this到底指向谁？\" class=\"headerlink\" title=\"this到底指向谁？\"></a><code>this</code>到底指向谁？</h2><p>首先，定义一个函数：</p>\n<p>三种不同的调用方式，this的指向也会不同！</p>\n<ol>\n<li>直接调用</li>\n</ol>\n<blockquote>\n<p>foo()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ol start=\"2\">\n<li>通过对象调用</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">var obj = &#123; name: &#x27;name&#x27; &#125;</span><br><span class=\"line\">obj.foo = foo</span><br><span class=\"line\">obj.foo(); // Object&#123;&#125;     (obj这个对象)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>call&#x2F;apply&#x2F;bind</li>\n</ol>\n<blockquote>\n<p>foo.apply(“abc”) &#x2F;&#x2F;  String {‘abc’}</p>\n</blockquote>\n<p><strong>结论：</strong></p>\n<ol>\n<li>函数在调用时，js会<strong>默认给this绑定一个值</strong>；</li>\n<li>this的绑定跟它**定义的位置（编写的位置）**没有关系；</li>\n<li>this的绑定与调用方式以及调用的位置有关；</li>\n<li>this是在运行时被绑定的。</li>\n</ol>\n<h2 id=\"this的绑定规则\"><a href=\"#this的绑定规则\" class=\"headerlink\" title=\"this的绑定规则\"></a><code>this</code>的绑定规则</h2><h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><ul>\n<li>普通函数被独立调用</li>\n</ul>\n<blockquote>\n<p>foo()   &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li>函数定义在对象中，但是独立被调用</li>\n</ul>\n<blockquote>\n<p>var bar &#x3D; obj.foo<br>bar()  &#x2F;&#x2F; window{}</p>\n</blockquote>\n<ul>\n<li><font style=\"color:#DF2A3F;\">严格模式</font>下，独立调用的函数中的<code>this</code>指向<code>undefined</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"language-javascript\">\t&quot;use strict&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t...</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>高阶函数</li>\n</ul>\n<blockquote>\n<p>function test(fn) {</p>\n<pre><code>fn()\n</code></pre>\n<p>}</p>\n<p>test(obj.foo) &#x2F;&#x2F; window{}</p>\n</blockquote>\n<p>即独立调用函数时(非严格模式下)<code>this</code>指向<code>window</code>!</p>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><blockquote>\n<p>一般是通过<strong>对象</strong>来发起调用。</p>\n</blockquote>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image1.png\"></p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image2.png\"></p>\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">call</span>(obj)</span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(obj) <span class=\"comment\">// foo &#123;name:&#x27;name&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这两种形式的显示绑定区别不大，不会像隐式绑定那样在obj上面添加foo:foo，但是foo的this就指向了obj；</li>\n<li>另外，这种形式一般将this绑定在对象身上，如果foo.call(‘abc’)，那么也会默认将’abc’创建为对应的包装类型，这里也就是<code>String</code>对象;</li>\n<li>如果是绑定在了<code>undefined</code>这种没有对应包装类型的对象身上，那么this就会默认指向<code>window</code></li>\n</ul>\n<h4 id=\"call-apply函数说明\"><a href=\"#call-apply函数说明\" class=\"headerlink\" title=\"call &#x2F; apply函数说明\"></a>call &#x2F; apply函数说明</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;参数:&#x27;</span>, name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用：都可以调取函数并绑定this，传递参数方式不同</p>\n<ul>\n<li><code>apply(obj,[argumentsArray])</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>argumentsArray</code>是指函数的参数，必须要放在<strong>数组</strong>中进行传递；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply</span></span><br><span class=\"line\">test.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>]) <span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;call(obj,arg1,arg2,...)&lt;/font&gt;</code></li>\n</ul>\n<p><code>obj</code>是指this指向的对象；</p>\n<p><code>arg1,arg2,...</code>是指函数的参数列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\">test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数:this,String&#123;&#x27;bind&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>) <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bind</code>是<code>绑定（怪异）函数</code>，是返回绑定过对象的函数，那么在执行的时候this只会指向绑定好的对象；</p>\n<p>而<code>call</code>和<code>apply</code>都是直接执行函数，没有返回值 。</p>\n<ul>\n<li>bind()的其他参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = test.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;call&#x27;</span>, <span class=\"string\">&#x27;chender&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 参数: chender 18    （参数一开始就指定好了，修改不了）</span></span><br></pre></td></tr></table></figure>\n\n<p>❗️❗️❗️此时，会不会有疑问？（bar()函数单独调用，this不应该指向window吗？）</p>\n<p>这里就涉及到了<strong>this绑定的优先级</strong>了！</p>\n<ol>\n<li>默认绑定优先级最低</li>\n<li>显式绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">test</span>: test</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">test</span>.<span class=\"title function_\">apply</span>(<span class=\"string\">&#x27;apply&#x27;</span>, [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">19</span>]) </span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;apply&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: 1 19</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = obj.<span class=\"property\">test</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;bind&#x27;</span>, <span class=\"string\">&#x27;chenber&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>()</span><br><span class=\"line\"><span class=\"comment\">// this [String: &#x27;bind&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 参数: chenber 18</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>new 绑定 &gt; 隐式绑定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo:&#x27;</span>, <span class=\"variable language_\">this</span> === obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">foo</span>()</span><br><span class=\"line\"><span class=\"comment\">// foo: foo &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// foo: false</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>new &gt; 显式(bind)</li>\n</ol>\n<p>❗️<code>new</code>和<code>apply</code> &#x2F; <code>call</code>不可以一起使用，所以没有可比性</p>\n<p><code>new</code>和<code>bind</code>可以一起使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> testFN = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title function_\">testFN</span>() <span class=\"comment\">// test&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><p>使用new关键字来调用函数是，会执行如下的操作：</p>\n<ul>\n<li>创建一个全新的对象；</li>\n<li>这个新对象会被执行prototype连接：</li>\n<li>这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；</li>\n<li>如果函数没有返回其他对象，表达式会返回这个新对象：</li>\n</ul>\n<p>总结(优先级从高到低)：</p>\n<ol>\n<li>new</li>\n<li>bind </li>\n<li>apply &#x2F; call</li>\n<li>隐式</li>\n<li>默认绑定</li>\n</ol>\n<h2 id=\"内置函数的调用绑定\"><a href=\"#内置函数的调用绑定\" class=\"headerlink\" title=\"内置函数的调用绑定\"></a>内置函数的调用绑定</h2><p>内置函数的this指向需要<code>根据一些经验</code>获取</p>\n<ol>\n<li>setTimeOut()</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setTimeOut</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>) <span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>按钮的点击监听</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;button&#x27;</span>)</span><br><span class=\"line\">   btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;btn&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>forEach</li>\n</ol>\n<p>forEach(function(){}, {})</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image3.png\"></p>\n<p>forEach的两个参数：</p>\n<ol>\n<li>回调函数</li>\n<li>回调函数的this绑定对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>]</span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// window</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forEach&#x27;</span>, <span class=\"variable language_\">this</span>); <span class=\"comment\">// String &#123;&#x27;abc&#x27;&#125;</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;cba&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"this-绑定之外的规则\"><a href=\"#this-绑定之外的规则\" class=\"headerlink\" title=\"this 绑定之外的规则\"></a><code>this</code> 绑定之外的规则</h2><ol>\n<li>如果在使用显式绑定时传入<code>null</code>或者<code>undefined</code>，那么就会使用默认绑定规则</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// window</span></span><br><span class=\"line\">foo.<span class=\"title function_\">apply</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>严格模式差异：在严格模式下，绑定null&#x2F;undefined时会直接使用传入值，this会指向null或undefined本身。</p>\n<ol start=\"2\">\n<li>间接函数引用（知道就行，一般不会出现）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;</span><br><span class=\"line\">(obj2.<span class=\"property\">foo</span> = obj.<span class=\"property\">foo</span>)() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>箭头函数(补充)<br>箭头函数是 <code>es6</code> 新增的一种函数的声明方法。</li>\n</ol>\n<ul>\n<li>完整写法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">name,age</span>)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;=&gt;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>❗️注:</p>\n<pre><code>- \t箭头函数不会绑定`this` 和 `arguments`(有新的属性进行代替)属性；\n- \t箭头函数不能作为构造函数来使用（会抛出错误）\n</code></pre>\n<ul>\n<li>箭头函数的简写<ul>\n<li>只有一个参数时 可省略()<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image4.png\"></li>\n<li>函数体只有一行语句时，可省略{}，但是不能带return 关键字<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image5.png\"></li>\n<li>如果执行体只有返回一个对象，那么需要给这个对象加上()<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image6.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"箭头函数中的-this-使用\"><a href=\"#箭头函数中的-this-使用\" class=\"headerlink\" title=\"箭头函数中的 this 使用\"></a>箭头函数中的 <code>this</code> 使用</h2><p> <strong>箭头函数的作用域没有 <code>this</code> ！</strong><br> 但是箭头函数中<code>this</code>会向寻找上层作用域中的<code>this</code>，直至找到全局this-&gt;<code>window</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test1 = test.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test1</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;chenber&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">foo</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;this&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test2 = obj.<span class=\"property\">foo</span>.<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">test2</span>() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<p>应用实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟网络请求函数</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\">url, callbackFn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> results = &#123;</span><br><span class=\"line\">     <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">     <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;成功&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">data</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">callbackFn</span>(results)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 将获取的数据传输给obj的results</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">results</span>: &#123;&#125;,</span><br><span class=\"line\">   <span class=\"comment\">// 之前的写法：</span></span><br><span class=\"line\">   <span class=\"comment\">// getData: function () &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//   var _this = this</span></span><br><span class=\"line\">   <span class=\"comment\">//   request(&#x27;/test&#x27;, function (res) &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//     _this.results = res</span></span><br><span class=\"line\">   <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">   <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 使用箭头函数:</span></span><br><span class=\"line\">   <span class=\"attr\">getData</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;/test&#x27;</span>, <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">results</span> = res</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> obj.<span class=\"title function_\">getData</span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-6-相关面试题\"><a href=\"#1-6-相关面试题\" class=\"headerlink\" title=\"1.6 相关面试题\"></a>1.6 相关面试题</h2><ol>\n<li>面试题一</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sayName</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sss = person.<span class=\"property\">sayName</span>;</span><br><span class=\"line\">  <span class=\"title function_\">sss</span>(); <span class=\"comment\">// 默认绑定  输出：window</span></span><br><span class=\"line\"></span><br><span class=\"line\">  person.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// 隐式绑定  输出：person</span></span><br><span class=\"line\">  (person.<span class=\"property\">sayName</span>)();  <span class=\"comment\">// 隐式绑定  输出：person  // 此处的;不能省略，因为下面是间接函数引用</span></span><br><span class=\"line\">  (b = person.<span class=\"property\">sayName</span>)() <span class=\"comment\">// 默认绑定  输出：window     此处为间接函数引用，相当于独立函数调用，即this指向window </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>面试题二</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;person1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo1</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">foo2</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>),</span><br><span class=\"line\">  <span class=\"attr\">foo3</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">foo4</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;person2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo1</span>(); <span class=\"comment\">// 隐式绑定  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定   输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo2</span>(); <span class=\"comment\">// 默认绑定  输出：window  </span></span><br><span class=\"line\">person1.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  this-&gt;上层作用域  输出：window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上层作用域指的是函数定义时的作用域，而不是函数运行时的作用域   </span></span><br><span class=\"line\"><span class=\"comment\">// 所以下面这几种情况要注意区分</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>()(); <span class=\"comment\">// 默认绑定  输出：window </span></span><br><span class=\"line\">person1.<span class=\"property\">foo3</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 显示绑定  输出：window</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>()(); <span class=\"comment\">// 间接函数引用  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo4</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 间接函数引用  输出：person2</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显式绑定  输出：person1</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>面试题三<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image7.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题三</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo1</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo2</span> = <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo3</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo4</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo1</span>(); <span class=\"comment\">// 隐式绑定  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo2</span>(); <span class=\"comment\">// 上层作用域查找  输出：person1  </span></span><br><span class=\"line\">person1.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显示绑定  this-&gt;上层作用域  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>()(); <span class=\"comment\">// 默认绑定  输出：window </span></span><br><span class=\"line\">person1.<span class=\"property\">foo3</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 显式绑定  输出：window</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo3</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显式绑定  输出：person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>()(); <span class=\"comment\">// 隐式绑定 上层作用域查找  输出：person1</span></span><br><span class=\"line\">person1.<span class=\"property\">foo4</span>.<span class=\"title function_\">call</span>(person2)(); <span class=\"comment\">// 显式绑定  上层作用域查找  输出：person2</span></span><br><span class=\"line\">person1.<span class=\"title function_\">foo4</span>().<span class=\"title function_\">call</span>(person2); <span class=\"comment\">// 显式绑定  上层作用域查找  输出：person1</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>面试题四<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/01-this-img/image8.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 面试题四</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;obj&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo1</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">foo2</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;person2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo1</span>()()<span class=\"comment\">// 隐式绑定 window</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"property\">foo1</span>.<span class=\"title function_\">call</span>(person2)() <span class=\"comment\">// 显式绑定 window</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo1</span>().<span class=\"title function_\">call</span>(person2) <span class=\"comment\">//  显式绑定 person2</span></span><br><span class=\"line\"></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo2</span>()() <span class=\"comment\">// 隐式绑定 obj</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"property\">foo2</span>.<span class=\"title function_\">call</span>(person2)() <span class=\"comment\">// 显式绑定 person2</span></span><br><span class=\"line\">person1.<span class=\"property\">obj</span>.<span class=\"title function_\">foo2</span>().<span class=\"title function_\">call</span>(person2) <span class=\"comment\">// 显式绑定 obj</span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"02- 浏览器运行原理","indexing":false,"abbrlink":"2373884b","keywords":"js高级、浏览器运行原理","_content":"\n从输入路径开始，浏览器是怎样一步步渲染出页面的呢？\n\n# 网页的解析过程\n输入地址 ---> DNS解析 ---> 服务器响应 ---> 浏览器响应\n一个网页URL从输入到浏览器中，到显示经历怎样的过程呢？\n![在这里插入图片描述](../../img/js高级/02-browser/image1.png)\n## 浏览器内核\n常见的浏览器内核：\n![在这里插入图片描述](../../img/js高级/02-browser/image2.png)\n我们常说的`浏览器内核`指的是浏览器的`排版引擎`，也称之为`页面渲染引擎`或`样板引擎`。\n# 浏览器渲染流程\n详细内容可看我的另一篇博客：\n[浏览器渲染原理](https://blog.csdn.net/2302_79523175/article/details/140614526?spm=1011.2415.3001.5331)\n![在这里插入图片描述](../../img/js高级/02-browser/image3.png)\n## 解析html\n因为默认情况下服务器会给浏览器返回index..html文件，所以解析HTML是所有步骤的开始：\n解析HTML，会构建DOM Tree:\n![在这里插入图片描述](../../img/js高级/02-browser/image4.png)\n## 生成css规则\n浏览器在解析html时遇到 css 的`<link>`时会开启另外一个线程对css文件进行下载，这也就不会影响到dom tree的生成；\n下载完css文件后就会对其进行解析，生成对应的`cssom`树。\n![在这里插入图片描述](../../img/js高级/02-browser/image5.png)\n## 构建render tree\n当有了`DOM Tree`和`CSSOM Tree`两部分之后，就可以结合来生成`Render Tree`了。\n![在这里插入图片描述](../../img/js高级/02-browser/image6.png)\n\n注意❗️\n1. `link`元素不会阻塞`DOM Tree`的构建，但是会阻塞`Render Tree`的构建，因为构建`Render Tree`需要对应的`CSSOM Tree`；\n2. **`DOM Tree`和`Render Tree`并不是一一对应的**，有些dom可能设置了`display: none;`，不会在`Render Tree`中出现。\n\n## 布局(Layout)\n布局是确定呈现树中所有节点的宽度、高度和位置信息\n\n`Render Tree`形成之后，就可以对dom的style进行计算：\n1. `em`、`rem`或`%`等转换成`px`；\n2. ...\n\n## 绘制(Paint)\n- 在绘制阶段，浏览器将布局阶段计算的每个frame转为屏幕上实际的像素点；\n- 包括将元素的可见部分进行绘制，比如文本、颜色、边框、阴影、替换元素（比如img）\n![在这里插入图片描述](../../img/js高级/02-browser/image7.png)\n# 回流和重绘\n## 回流reflow\n###  （1）理解：\n- 第一次确定节点的位置和大小叫做布局(Layout)；\n- 之后对于节点大小以及位置等的计算叫做回流。\n### （2）出现情况\n1. `DOM`结构发生改变（添加新节点或者移除节点）；\n2. 布局改变（修改了width、height、padding等值）；\n3. 窗口resize（修改了窗口的尺寸）；\n4. 调用`getComputedStyle`方法获取尺寸、位置信息；\n## 重绘repaint\n###  （1）理解：\n- 第一次渲染内容叫做绘制(Paint)；\n- 之后重新渲染叫做重绘（repaint）。\n### （2）出现情况\n1. 修改背景色、边框颜色、文字颜色、模糊样式等\n2. `回流`一定引起`重绘`，所以回流是很**消耗性能**的事情。\n\n**所以在开发中要尽量避免回流**：\n\n1. 修改样式时尽量一次性修改\n\t- 比如通过`cssText`修改，通过添加`class`修改。\n2. 尽量避免频繁的操作DOM\n\t- 我们可以在一个`DocumentFragment`(了解即可)或者是父元素中将要操作的DOM操作完成，在一次性的操作。\n3. 尽量避免通过`getComputedStyle`获取尺寸、位置等信息\n4. 对某些元素使用`position`的`absolute`或`fixed`\n\t- 这种操作并不是不会引起回流，而是相对来说开销较小，不会对其他元素造成影响。\n# 特殊解析composite合成 和性能优化\n绘制的过程，浏览器会将布局后的元素绘制到多个合成图层中（这是浏览器的一种优化手段）；\n- 默认情况下，标准流的元素会被绘制到同一个图层中；\n- 而某些特殊的属性，会单独创建一个新的合成层，并且新的图层可以使用`GPU`加速绘制（每个合成层都是单独进行渲染）\n\n**哪些属性可以形成新的合成层呢**？下面是常见的一下属性：\n\n- 3D transforms\n- `video`、`canvas`、`iframe`\n- `opacity`动画转换\n- `position: fixed`\n- `will-cahnge`：一个实验性的属性，提前告诉浏览器可能会发生哪些变化\n- `animation`或`transition`设置了`opacity`、`transform`\n\n注❗️：\n分层确实可以提高性能，但是它以内存管理为代价，因此不应作为web性能优化策略的一部分过度使用！\n# defer和async属性\n首先来了解一下 **`script`和页面解析的关系** !\n\n前面我们已经知道了，浏览器在解析html时遇到`<link>`不会影响`DOM Tree`的构建，那遇到`<script>`呢？会影响吗？\n答案是：**会的！**\n- 浏览器在遇到`<script>`时会先停止对`DOM Tree`构建，转而去下载、执行js脚本；\n- 只有js脚本执行完毕后，`DOM Tree`才能继续进行构建；\n\n那这是为什么呢？\n\n- 因为js文件中可能存在对`DOM`的操作；\n- 若先构建`DOM Tree`，再执行js脚本，可能会造成严重的回流和重绘，影响页面性能。\n\n但是这也会带来新的问题，特别是现在主流框架：\n\n- 目前主要流行的`Vue`、`React`，脚本往往比html页面更\"重\"，处理时间更长，\n- 也就是在js脚本执行结束前，页面可能出现空白\n\n（有些浏览器可能对此做了优化，也就是在js脚本执行接受之前，先将已经构建的`DOM Tree`进行展示）\n![在这里插入图片描述](../../img/js高级/02-browser/image8.png)\n\n为了解决这个问题，`<script>`给我们提供了两个属性：`defer`和`async`\n## 4.1 defer\n- defer会告诉浏览器不要等待脚本的下载，继续执行`DOM Tree`的构建\n- 脚本的下载有浏览器完成，不会影响`DOM Tree`的构建；\n- 若脚本先下载完，那它会等待`DOM Tree`构建完成，在`DOMContentLoaded`事件执行前执行defer中的代码\n\n![在这里插入图片描述](../../img/js高级/02-browser/image9.png)\n总结：\n1. `defer`不会影响`DOM Tree`的构建；\n2.  在`defer`中`DOM Tree`已经构建完成，可进行对dom的操作；\n3. `defer`总是在`DOMContentLoaded`时间发出前执行；\n4. 另外，有多个`defer`会按照编写顺序执行；\n5. 从某种角度来说，`defer`会提高页面性能，并且推荐放在`<head>`中（提前下载js脚本）；\n6. 注意：`defer`仅适用于外部脚本，对于`<script>`默认内容会被忽略。\n## 4.2 async\n- `async`和`defer`相似，都能够让脚本不堵塞页面；\n- `async`是完全独立于浏览器的：\n\t- 浏览器页面不会因为`script`脚本而暂停`DOM Tree`的构建；\n\t- `async`脚本不能保证顺序执行脚本，它独立下载，独立运行，不会等待其他脚本；\n\t- `async`不一定在`DOMContentLoaded`时间执行前执行\n\n\n**总结：**\n1. `defer`通常需要在文档解析后操作`DOM`的`javascript`代码，并且对多个`script`文件有顺序要求；\n2. `async`通常用于独立的脚本，对其他脚本，甚至`DOM`没有依赖的。\n\n\n\n注：整个JS高级专栏依托于coderwhy老师的课程，相关图片、代码均来自于其课程。\n\n","source":"_posts/js高级/02-浏览器运行原理.md","raw":"---\ntitle: 02- 浏览器运行原理\ncategories:\n  - 分类\ntags:\n  - js高级\nindexing: false\nabbrlink: 2373884b\nkeywords: js高级、浏览器运行原理\n---\n\n从输入路径开始，浏览器是怎样一步步渲染出页面的呢？\n\n# 网页的解析过程\n输入地址 ---> DNS解析 ---> 服务器响应 ---> 浏览器响应\n一个网页URL从输入到浏览器中，到显示经历怎样的过程呢？\n![在这里插入图片描述](../../img/js高级/02-browser/image1.png)\n## 浏览器内核\n常见的浏览器内核：\n![在这里插入图片描述](../../img/js高级/02-browser/image2.png)\n我们常说的`浏览器内核`指的是浏览器的`排版引擎`，也称之为`页面渲染引擎`或`样板引擎`。\n# 浏览器渲染流程\n详细内容可看我的另一篇博客：\n[浏览器渲染原理](https://blog.csdn.net/2302_79523175/article/details/140614526?spm=1011.2415.3001.5331)\n![在这里插入图片描述](../../img/js高级/02-browser/image3.png)\n## 解析html\n因为默认情况下服务器会给浏览器返回index..html文件，所以解析HTML是所有步骤的开始：\n解析HTML，会构建DOM Tree:\n![在这里插入图片描述](../../img/js高级/02-browser/image4.png)\n## 生成css规则\n浏览器在解析html时遇到 css 的`<link>`时会开启另外一个线程对css文件进行下载，这也就不会影响到dom tree的生成；\n下载完css文件后就会对其进行解析，生成对应的`cssom`树。\n![在这里插入图片描述](../../img/js高级/02-browser/image5.png)\n## 构建render tree\n当有了`DOM Tree`和`CSSOM Tree`两部分之后，就可以结合来生成`Render Tree`了。\n![在这里插入图片描述](../../img/js高级/02-browser/image6.png)\n\n注意❗️\n1. `link`元素不会阻塞`DOM Tree`的构建，但是会阻塞`Render Tree`的构建，因为构建`Render Tree`需要对应的`CSSOM Tree`；\n2. **`DOM Tree`和`Render Tree`并不是一一对应的**，有些dom可能设置了`display: none;`，不会在`Render Tree`中出现。\n\n## 布局(Layout)\n布局是确定呈现树中所有节点的宽度、高度和位置信息\n\n`Render Tree`形成之后，就可以对dom的style进行计算：\n1. `em`、`rem`或`%`等转换成`px`；\n2. ...\n\n## 绘制(Paint)\n- 在绘制阶段，浏览器将布局阶段计算的每个frame转为屏幕上实际的像素点；\n- 包括将元素的可见部分进行绘制，比如文本、颜色、边框、阴影、替换元素（比如img）\n![在这里插入图片描述](../../img/js高级/02-browser/image7.png)\n# 回流和重绘\n## 回流reflow\n###  （1）理解：\n- 第一次确定节点的位置和大小叫做布局(Layout)；\n- 之后对于节点大小以及位置等的计算叫做回流。\n### （2）出现情况\n1. `DOM`结构发生改变（添加新节点或者移除节点）；\n2. 布局改变（修改了width、height、padding等值）；\n3. 窗口resize（修改了窗口的尺寸）；\n4. 调用`getComputedStyle`方法获取尺寸、位置信息；\n## 重绘repaint\n###  （1）理解：\n- 第一次渲染内容叫做绘制(Paint)；\n- 之后重新渲染叫做重绘（repaint）。\n### （2）出现情况\n1. 修改背景色、边框颜色、文字颜色、模糊样式等\n2. `回流`一定引起`重绘`，所以回流是很**消耗性能**的事情。\n\n**所以在开发中要尽量避免回流**：\n\n1. 修改样式时尽量一次性修改\n\t- 比如通过`cssText`修改，通过添加`class`修改。\n2. 尽量避免频繁的操作DOM\n\t- 我们可以在一个`DocumentFragment`(了解即可)或者是父元素中将要操作的DOM操作完成，在一次性的操作。\n3. 尽量避免通过`getComputedStyle`获取尺寸、位置等信息\n4. 对某些元素使用`position`的`absolute`或`fixed`\n\t- 这种操作并不是不会引起回流，而是相对来说开销较小，不会对其他元素造成影响。\n# 特殊解析composite合成 和性能优化\n绘制的过程，浏览器会将布局后的元素绘制到多个合成图层中（这是浏览器的一种优化手段）；\n- 默认情况下，标准流的元素会被绘制到同一个图层中；\n- 而某些特殊的属性，会单独创建一个新的合成层，并且新的图层可以使用`GPU`加速绘制（每个合成层都是单独进行渲染）\n\n**哪些属性可以形成新的合成层呢**？下面是常见的一下属性：\n\n- 3D transforms\n- `video`、`canvas`、`iframe`\n- `opacity`动画转换\n- `position: fixed`\n- `will-cahnge`：一个实验性的属性，提前告诉浏览器可能会发生哪些变化\n- `animation`或`transition`设置了`opacity`、`transform`\n\n注❗️：\n分层确实可以提高性能，但是它以内存管理为代价，因此不应作为web性能优化策略的一部分过度使用！\n# defer和async属性\n首先来了解一下 **`script`和页面解析的关系** !\n\n前面我们已经知道了，浏览器在解析html时遇到`<link>`不会影响`DOM Tree`的构建，那遇到`<script>`呢？会影响吗？\n答案是：**会的！**\n- 浏览器在遇到`<script>`时会先停止对`DOM Tree`构建，转而去下载、执行js脚本；\n- 只有js脚本执行完毕后，`DOM Tree`才能继续进行构建；\n\n那这是为什么呢？\n\n- 因为js文件中可能存在对`DOM`的操作；\n- 若先构建`DOM Tree`，再执行js脚本，可能会造成严重的回流和重绘，影响页面性能。\n\n但是这也会带来新的问题，特别是现在主流框架：\n\n- 目前主要流行的`Vue`、`React`，脚本往往比html页面更\"重\"，处理时间更长，\n- 也就是在js脚本执行结束前，页面可能出现空白\n\n（有些浏览器可能对此做了优化，也就是在js脚本执行接受之前，先将已经构建的`DOM Tree`进行展示）\n![在这里插入图片描述](../../img/js高级/02-browser/image8.png)\n\n为了解决这个问题，`<script>`给我们提供了两个属性：`defer`和`async`\n## 4.1 defer\n- defer会告诉浏览器不要等待脚本的下载，继续执行`DOM Tree`的构建\n- 脚本的下载有浏览器完成，不会影响`DOM Tree`的构建；\n- 若脚本先下载完，那它会等待`DOM Tree`构建完成，在`DOMContentLoaded`事件执行前执行defer中的代码\n\n![在这里插入图片描述](../../img/js高级/02-browser/image9.png)\n总结：\n1. `defer`不会影响`DOM Tree`的构建；\n2.  在`defer`中`DOM Tree`已经构建完成，可进行对dom的操作；\n3. `defer`总是在`DOMContentLoaded`时间发出前执行；\n4. 另外，有多个`defer`会按照编写顺序执行；\n5. 从某种角度来说，`defer`会提高页面性能，并且推荐放在`<head>`中（提前下载js脚本）；\n6. 注意：`defer`仅适用于外部脚本，对于`<script>`默认内容会被忽略。\n## 4.2 async\n- `async`和`defer`相似，都能够让脚本不堵塞页面；\n- `async`是完全独立于浏览器的：\n\t- 浏览器页面不会因为`script`脚本而暂停`DOM Tree`的构建；\n\t- `async`脚本不能保证顺序执行脚本，它独立下载，独立运行，不会等待其他脚本；\n\t- `async`不一定在`DOMContentLoaded`时间执行前执行\n\n\n**总结：**\n1. `defer`通常需要在文档解析后操作`DOM`的`javascript`代码，并且对多个`script`文件有顺序要求；\n2. `async`通常用于独立的脚本，对其他脚本，甚至`DOM`没有依赖的。\n\n\n\n注：整个JS高级专栏依托于coderwhy老师的课程，相关图片、代码均来自于其课程。\n\n","slug":"js高级/02-浏览器运行原理","published":1,"date":"2025-05-19T01:43:26.130Z","updated":"2025-05-19T14:19:37.168Z","comments":1,"layout":"post","photos":[],"_id":"cmcx3vq7e000h1s4ha3wd7hys","content":"<p>从输入路径开始，浏览器是怎样一步步渲染出页面的呢？</p>\n<h1 id=\"网页的解析过程\"><a href=\"#网页的解析过程\" class=\"headerlink\" title=\"网页的解析过程\"></a>网页的解析过程</h1><p>输入地址 —&gt; DNS解析 —&gt; 服务器响应 —&gt; 浏览器响应<br>一个网页URL从输入到浏览器中，到显示经历怎样的过程呢？<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image1.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"浏览器内核\"><a href=\"#浏览器内核\" class=\"headerlink\" title=\"浏览器内核\"></a>浏览器内核</h2><p>常见的浏览器内核：<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image2.png\" alt=\"在这里插入图片描述\"><br>我们常说的<code>浏览器内核</code>指的是浏览器的<code>排版引擎</code>，也称之为<code>页面渲染引擎</code>或<code>样板引擎</code>。</p>\n<h1 id=\"浏览器渲染流程\"><a href=\"#浏览器渲染流程\" class=\"headerlink\" title=\"浏览器渲染流程\"></a>浏览器渲染流程</h1><p>详细内容可看我的另一篇博客：<br><a href=\"https://blog.csdn.net/2302_79523175/article/details/140614526?spm=1011.2415.3001.5331\">浏览器渲染原理</a><br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image3.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"解析html\"><a href=\"#解析html\" class=\"headerlink\" title=\"解析html\"></a>解析html</h2><p>因为默认情况下服务器会给浏览器返回index..html文件，所以解析HTML是所有步骤的开始：<br>解析HTML，会构建DOM Tree:<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image4.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"生成css规则\"><a href=\"#生成css规则\" class=\"headerlink\" title=\"生成css规则\"></a>生成css规则</h2><p>浏览器在解析html时遇到 css 的<code>&lt;link&gt;</code>时会开启另外一个线程对css文件进行下载，这也就不会影响到dom tree的生成；<br>下载完css文件后就会对其进行解析，生成对应的<code>cssom</code>树。<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image5.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"构建render-tree\"><a href=\"#构建render-tree\" class=\"headerlink\" title=\"构建render tree\"></a>构建render tree</h2><p>当有了<code>DOM Tree</code>和<code>CSSOM Tree</code>两部分之后，就可以结合来生成<code>Render Tree</code>了。<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image6.png\" alt=\"在这里插入图片描述\"></p>\n<p>注意❗️</p>\n<ol>\n<li><code>link</code>元素不会阻塞<code>DOM Tree</code>的构建，但是会阻塞<code>Render Tree</code>的构建，因为构建<code>Render Tree</code>需要对应的<code>CSSOM Tree</code>；</li>\n<li><strong><code>DOM Tree</code>和<code>Render Tree</code>并不是一一对应的</strong>，有些dom可能设置了<code>display: none;</code>，不会在<code>Render Tree</code>中出现。</li>\n</ol>\n<h2 id=\"布局-Layout\"><a href=\"#布局-Layout\" class=\"headerlink\" title=\"布局(Layout)\"></a>布局(Layout)</h2><p>布局是确定呈现树中所有节点的宽度、高度和位置信息</p>\n<p><code>Render Tree</code>形成之后，就可以对dom的style进行计算：</p>\n<ol>\n<li><code>em</code>、<code>rem</code>或<code>%</code>等转换成<code>px</code>；</li>\n<li>…</li>\n</ol>\n<h2 id=\"绘制-Paint\"><a href=\"#绘制-Paint\" class=\"headerlink\" title=\"绘制(Paint)\"></a>绘制(Paint)</h2><ul>\n<li>在绘制阶段，浏览器将布局阶段计算的每个frame转为屏幕上实际的像素点；</li>\n<li>包括将元素的可见部分进行绘制，比如文本、颜色、边框、阴影、替换元素（比如img）<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image7.png\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h1 id=\"回流和重绘\"><a href=\"#回流和重绘\" class=\"headerlink\" title=\"回流和重绘\"></a>回流和重绘</h1><h2 id=\"回流reflow\"><a href=\"#回流reflow\" class=\"headerlink\" title=\"回流reflow\"></a>回流reflow</h2><h3 id=\"（1）理解：\"><a href=\"#（1）理解：\" class=\"headerlink\" title=\"（1）理解：\"></a>（1）理解：</h3><ul>\n<li>第一次确定节点的位置和大小叫做布局(Layout)；</li>\n<li>之后对于节点大小以及位置等的计算叫做回流。</li>\n</ul>\n<h3 id=\"（2）出现情况\"><a href=\"#（2）出现情况\" class=\"headerlink\" title=\"（2）出现情况\"></a>（2）出现情况</h3><ol>\n<li><code>DOM</code>结构发生改变（添加新节点或者移除节点）；</li>\n<li>布局改变（修改了width、height、padding等值）；</li>\n<li>窗口resize（修改了窗口的尺寸）；</li>\n<li>调用<code>getComputedStyle</code>方法获取尺寸、位置信息；</li>\n</ol>\n<h2 id=\"重绘repaint\"><a href=\"#重绘repaint\" class=\"headerlink\" title=\"重绘repaint\"></a>重绘repaint</h2><h3 id=\"（1）理解：-1\"><a href=\"#（1）理解：-1\" class=\"headerlink\" title=\"（1）理解：\"></a>（1）理解：</h3><ul>\n<li>第一次渲染内容叫做绘制(Paint)；</li>\n<li>之后重新渲染叫做重绘（repaint）。</li>\n</ul>\n<h3 id=\"（2）出现情况-1\"><a href=\"#（2）出现情况-1\" class=\"headerlink\" title=\"（2）出现情况\"></a>（2）出现情况</h3><ol>\n<li>修改背景色、边框颜色、文字颜色、模糊样式等</li>\n<li><code>回流</code>一定引起<code>重绘</code>，所以回流是很<strong>消耗性能</strong>的事情。</li>\n</ol>\n<p><strong>所以在开发中要尽量避免回流</strong>：</p>\n<ol>\n<li>修改样式时尽量一次性修改<ul>\n<li>比如通过<code>cssText</code>修改，通过添加<code>class</code>修改。</li>\n</ul>\n</li>\n<li>尽量避免频繁的操作DOM<ul>\n<li>我们可以在一个<code>DocumentFragment</code>(了解即可)或者是父元素中将要操作的DOM操作完成，在一次性的操作。</li>\n</ul>\n</li>\n<li>尽量避免通过<code>getComputedStyle</code>获取尺寸、位置等信息</li>\n<li>对某些元素使用<code>position</code>的<code>absolute</code>或<code>fixed</code><ul>\n<li>这种操作并不是不会引起回流，而是相对来说开销较小，不会对其他元素造成影响。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"特殊解析composite合成-和性能优化\"><a href=\"#特殊解析composite合成-和性能优化\" class=\"headerlink\" title=\"特殊解析composite合成 和性能优化\"></a>特殊解析composite合成 和性能优化</h1><p>绘制的过程，浏览器会将布局后的元素绘制到多个合成图层中（这是浏览器的一种优化手段）；</p>\n<ul>\n<li>默认情况下，标准流的元素会被绘制到同一个图层中；</li>\n<li>而某些特殊的属性，会单独创建一个新的合成层，并且新的图层可以使用<code>GPU</code>加速绘制（每个合成层都是单独进行渲染）</li>\n</ul>\n<p><strong>哪些属性可以形成新的合成层呢</strong>？下面是常见的一下属性：</p>\n<ul>\n<li>3D transforms</li>\n<li><code>video</code>、<code>canvas</code>、<code>iframe</code></li>\n<li><code>opacity</code>动画转换</li>\n<li><code>position: fixed</code></li>\n<li><code>will-cahnge</code>：一个实验性的属性，提前告诉浏览器可能会发生哪些变化</li>\n<li><code>animation</code>或<code>transition</code>设置了<code>opacity</code>、<code>transform</code></li>\n</ul>\n<p>注❗️：<br>分层确实可以提高性能，但是它以内存管理为代价，因此不应作为web性能优化策略的一部分过度使用！</p>\n<h1 id=\"defer和async属性\"><a href=\"#defer和async属性\" class=\"headerlink\" title=\"defer和async属性\"></a>defer和async属性</h1><p>首先来了解一下 <strong><code>script</code>和页面解析的关系</strong> !</p>\n<p>前面我们已经知道了，浏览器在解析html时遇到<code>&lt;link&gt;</code>不会影响<code>DOM Tree</code>的构建，那遇到<code>&lt;script&gt;</code>呢？会影响吗？<br>答案是：<strong>会的！</strong></p>\n<ul>\n<li>浏览器在遇到<code>&lt;script&gt;</code>时会先停止对<code>DOM Tree</code>构建，转而去下载、执行js脚本；</li>\n<li>只有js脚本执行完毕后，<code>DOM Tree</code>才能继续进行构建；</li>\n</ul>\n<p>那这是为什么呢？</p>\n<ul>\n<li>因为js文件中可能存在对<code>DOM</code>的操作；</li>\n<li>若先构建<code>DOM Tree</code>，再执行js脚本，可能会造成严重的回流和重绘，影响页面性能。</li>\n</ul>\n<p>但是这也会带来新的问题，特别是现在主流框架：</p>\n<ul>\n<li>目前主要流行的<code>Vue</code>、<code>React</code>，脚本往往比html页面更”重”，处理时间更长，</li>\n<li>也就是在js脚本执行结束前，页面可能出现空白</li>\n</ul>\n<p>（有些浏览器可能对此做了优化，也就是在js脚本执行接受之前，先将已经构建的<code>DOM Tree</code>进行展示）<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image8.png\" alt=\"在这里插入图片描述\"></p>\n<p>为了解决这个问题，<code>&lt;script&gt;</code>给我们提供了两个属性：<code>defer</code>和<code>async</code></p>\n<h2 id=\"4-1-defer\"><a href=\"#4-1-defer\" class=\"headerlink\" title=\"4.1 defer\"></a>4.1 defer</h2><ul>\n<li>defer会告诉浏览器不要等待脚本的下载，继续执行<code>DOM Tree</code>的构建</li>\n<li>脚本的下载有浏览器完成，不会影响<code>DOM Tree</code>的构建；</li>\n<li>若脚本先下载完，那它会等待<code>DOM Tree</code>构建完成，在<code>DOMContentLoaded</code>事件执行前执行defer中的代码</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image9.png\" alt=\"在这里插入图片描述\"><br>总结：</p>\n<ol>\n<li><code>defer</code>不会影响<code>DOM Tree</code>的构建；</li>\n<li>在<code>defer</code>中<code>DOM Tree</code>已经构建完成，可进行对dom的操作；</li>\n<li><code>defer</code>总是在<code>DOMContentLoaded</code>时间发出前执行；</li>\n<li>另外，有多个<code>defer</code>会按照编写顺序执行；</li>\n<li>从某种角度来说，<code>defer</code>会提高页面性能，并且推荐放在<code>&lt;head&gt;</code>中（提前下载js脚本）；</li>\n<li>注意：<code>defer</code>仅适用于外部脚本，对于<code>&lt;script&gt;</code>默认内容会被忽略。</li>\n</ol>\n<h2 id=\"4-2-async\"><a href=\"#4-2-async\" class=\"headerlink\" title=\"4.2 async\"></a>4.2 async</h2><ul>\n<li><code>async</code>和<code>defer</code>相似，都能够让脚本不堵塞页面；</li>\n<li><code>async</code>是完全独立于浏览器的：<ul>\n<li>浏览器页面不会因为<code>script</code>脚本而暂停<code>DOM Tree</code>的构建；</li>\n<li><code>async</code>脚本不能保证顺序执行脚本，它独立下载，独立运行，不会等待其他脚本；</li>\n<li><code>async</code>不一定在<code>DOMContentLoaded</code>时间执行前执行</li>\n</ul>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li><code>defer</code>通常需要在文档解析后操作<code>DOM</code>的<code>javascript</code>代码，并且对多个<code>script</code>文件有顺序要求；</li>\n<li><code>async</code>通常用于独立的脚本，对其他脚本，甚至<code>DOM</code>没有依赖的。</li>\n</ol>\n<p>注：整个JS高级专栏依托于coderwhy老师的课程，相关图片、代码均来自于其课程。</p>\n","length":2620,"excerpt":"","more":"<p>从输入路径开始，浏览器是怎样一步步渲染出页面的呢？</p>\n<h1 id=\"网页的解析过程\"><a href=\"#网页的解析过程\" class=\"headerlink\" title=\"网页的解析过程\"></a>网页的解析过程</h1><p>输入地址 —&gt; DNS解析 —&gt; 服务器响应 —&gt; 浏览器响应<br>一个网页URL从输入到浏览器中，到显示经历怎样的过程呢？<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image1.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"浏览器内核\"><a href=\"#浏览器内核\" class=\"headerlink\" title=\"浏览器内核\"></a>浏览器内核</h2><p>常见的浏览器内核：<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image2.png\" alt=\"在这里插入图片描述\"><br>我们常说的<code>浏览器内核</code>指的是浏览器的<code>排版引擎</code>，也称之为<code>页面渲染引擎</code>或<code>样板引擎</code>。</p>\n<h1 id=\"浏览器渲染流程\"><a href=\"#浏览器渲染流程\" class=\"headerlink\" title=\"浏览器渲染流程\"></a>浏览器渲染流程</h1><p>详细内容可看我的另一篇博客：<br><a href=\"https://blog.csdn.net/2302_79523175/article/details/140614526?spm=1011.2415.3001.5331\">浏览器渲染原理</a><br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image3.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"解析html\"><a href=\"#解析html\" class=\"headerlink\" title=\"解析html\"></a>解析html</h2><p>因为默认情况下服务器会给浏览器返回index..html文件，所以解析HTML是所有步骤的开始：<br>解析HTML，会构建DOM Tree:<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image4.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"生成css规则\"><a href=\"#生成css规则\" class=\"headerlink\" title=\"生成css规则\"></a>生成css规则</h2><p>浏览器在解析html时遇到 css 的<code>&lt;link&gt;</code>时会开启另外一个线程对css文件进行下载，这也就不会影响到dom tree的生成；<br>下载完css文件后就会对其进行解析，生成对应的<code>cssom</code>树。<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image5.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"构建render-tree\"><a href=\"#构建render-tree\" class=\"headerlink\" title=\"构建render tree\"></a>构建render tree</h2><p>当有了<code>DOM Tree</code>和<code>CSSOM Tree</code>两部分之后，就可以结合来生成<code>Render Tree</code>了。<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image6.png\" alt=\"在这里插入图片描述\"></p>\n<p>注意❗️</p>\n<ol>\n<li><code>link</code>元素不会阻塞<code>DOM Tree</code>的构建，但是会阻塞<code>Render Tree</code>的构建，因为构建<code>Render Tree</code>需要对应的<code>CSSOM Tree</code>；</li>\n<li><strong><code>DOM Tree</code>和<code>Render Tree</code>并不是一一对应的</strong>，有些dom可能设置了<code>display: none;</code>，不会在<code>Render Tree</code>中出现。</li>\n</ol>\n<h2 id=\"布局-Layout\"><a href=\"#布局-Layout\" class=\"headerlink\" title=\"布局(Layout)\"></a>布局(Layout)</h2><p>布局是确定呈现树中所有节点的宽度、高度和位置信息</p>\n<p><code>Render Tree</code>形成之后，就可以对dom的style进行计算：</p>\n<ol>\n<li><code>em</code>、<code>rem</code>或<code>%</code>等转换成<code>px</code>；</li>\n<li>…</li>\n</ol>\n<h2 id=\"绘制-Paint\"><a href=\"#绘制-Paint\" class=\"headerlink\" title=\"绘制(Paint)\"></a>绘制(Paint)</h2><ul>\n<li>在绘制阶段，浏览器将布局阶段计算的每个frame转为屏幕上实际的像素点；</li>\n<li>包括将元素的可见部分进行绘制，比如文本、颜色、边框、阴影、替换元素（比如img）<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image7.png\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<h1 id=\"回流和重绘\"><a href=\"#回流和重绘\" class=\"headerlink\" title=\"回流和重绘\"></a>回流和重绘</h1><h2 id=\"回流reflow\"><a href=\"#回流reflow\" class=\"headerlink\" title=\"回流reflow\"></a>回流reflow</h2><h3 id=\"（1）理解：\"><a href=\"#（1）理解：\" class=\"headerlink\" title=\"（1）理解：\"></a>（1）理解：</h3><ul>\n<li>第一次确定节点的位置和大小叫做布局(Layout)；</li>\n<li>之后对于节点大小以及位置等的计算叫做回流。</li>\n</ul>\n<h3 id=\"（2）出现情况\"><a href=\"#（2）出现情况\" class=\"headerlink\" title=\"（2）出现情况\"></a>（2）出现情况</h3><ol>\n<li><code>DOM</code>结构发生改变（添加新节点或者移除节点）；</li>\n<li>布局改变（修改了width、height、padding等值）；</li>\n<li>窗口resize（修改了窗口的尺寸）；</li>\n<li>调用<code>getComputedStyle</code>方法获取尺寸、位置信息；</li>\n</ol>\n<h2 id=\"重绘repaint\"><a href=\"#重绘repaint\" class=\"headerlink\" title=\"重绘repaint\"></a>重绘repaint</h2><h3 id=\"（1）理解：-1\"><a href=\"#（1）理解：-1\" class=\"headerlink\" title=\"（1）理解：\"></a>（1）理解：</h3><ul>\n<li>第一次渲染内容叫做绘制(Paint)；</li>\n<li>之后重新渲染叫做重绘（repaint）。</li>\n</ul>\n<h3 id=\"（2）出现情况-1\"><a href=\"#（2）出现情况-1\" class=\"headerlink\" title=\"（2）出现情况\"></a>（2）出现情况</h3><ol>\n<li>修改背景色、边框颜色、文字颜色、模糊样式等</li>\n<li><code>回流</code>一定引起<code>重绘</code>，所以回流是很<strong>消耗性能</strong>的事情。</li>\n</ol>\n<p><strong>所以在开发中要尽量避免回流</strong>：</p>\n<ol>\n<li>修改样式时尽量一次性修改<ul>\n<li>比如通过<code>cssText</code>修改，通过添加<code>class</code>修改。</li>\n</ul>\n</li>\n<li>尽量避免频繁的操作DOM<ul>\n<li>我们可以在一个<code>DocumentFragment</code>(了解即可)或者是父元素中将要操作的DOM操作完成，在一次性的操作。</li>\n</ul>\n</li>\n<li>尽量避免通过<code>getComputedStyle</code>获取尺寸、位置等信息</li>\n<li>对某些元素使用<code>position</code>的<code>absolute</code>或<code>fixed</code><ul>\n<li>这种操作并不是不会引起回流，而是相对来说开销较小，不会对其他元素造成影响。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"特殊解析composite合成-和性能优化\"><a href=\"#特殊解析composite合成-和性能优化\" class=\"headerlink\" title=\"特殊解析composite合成 和性能优化\"></a>特殊解析composite合成 和性能优化</h1><p>绘制的过程，浏览器会将布局后的元素绘制到多个合成图层中（这是浏览器的一种优化手段）；</p>\n<ul>\n<li>默认情况下，标准流的元素会被绘制到同一个图层中；</li>\n<li>而某些特殊的属性，会单独创建一个新的合成层，并且新的图层可以使用<code>GPU</code>加速绘制（每个合成层都是单独进行渲染）</li>\n</ul>\n<p><strong>哪些属性可以形成新的合成层呢</strong>？下面是常见的一下属性：</p>\n<ul>\n<li>3D transforms</li>\n<li><code>video</code>、<code>canvas</code>、<code>iframe</code></li>\n<li><code>opacity</code>动画转换</li>\n<li><code>position: fixed</code></li>\n<li><code>will-cahnge</code>：一个实验性的属性，提前告诉浏览器可能会发生哪些变化</li>\n<li><code>animation</code>或<code>transition</code>设置了<code>opacity</code>、<code>transform</code></li>\n</ul>\n<p>注❗️：<br>分层确实可以提高性能，但是它以内存管理为代价，因此不应作为web性能优化策略的一部分过度使用！</p>\n<h1 id=\"defer和async属性\"><a href=\"#defer和async属性\" class=\"headerlink\" title=\"defer和async属性\"></a>defer和async属性</h1><p>首先来了解一下 <strong><code>script</code>和页面解析的关系</strong> !</p>\n<p>前面我们已经知道了，浏览器在解析html时遇到<code>&lt;link&gt;</code>不会影响<code>DOM Tree</code>的构建，那遇到<code>&lt;script&gt;</code>呢？会影响吗？<br>答案是：<strong>会的！</strong></p>\n<ul>\n<li>浏览器在遇到<code>&lt;script&gt;</code>时会先停止对<code>DOM Tree</code>构建，转而去下载、执行js脚本；</li>\n<li>只有js脚本执行完毕后，<code>DOM Tree</code>才能继续进行构建；</li>\n</ul>\n<p>那这是为什么呢？</p>\n<ul>\n<li>因为js文件中可能存在对<code>DOM</code>的操作；</li>\n<li>若先构建<code>DOM Tree</code>，再执行js脚本，可能会造成严重的回流和重绘，影响页面性能。</li>\n</ul>\n<p>但是这也会带来新的问题，特别是现在主流框架：</p>\n<ul>\n<li>目前主要流行的<code>Vue</code>、<code>React</code>，脚本往往比html页面更”重”，处理时间更长，</li>\n<li>也就是在js脚本执行结束前，页面可能出现空白</li>\n</ul>\n<p>（有些浏览器可能对此做了优化，也就是在js脚本执行接受之前，先将已经构建的<code>DOM Tree</code>进行展示）<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image8.png\" alt=\"在这里插入图片描述\"></p>\n<p>为了解决这个问题，<code>&lt;script&gt;</code>给我们提供了两个属性：<code>defer</code>和<code>async</code></p>\n<h2 id=\"4-1-defer\"><a href=\"#4-1-defer\" class=\"headerlink\" title=\"4.1 defer\"></a>4.1 defer</h2><ul>\n<li>defer会告诉浏览器不要等待脚本的下载，继续执行<code>DOM Tree</code>的构建</li>\n<li>脚本的下载有浏览器完成，不会影响<code>DOM Tree</code>的构建；</li>\n<li>若脚本先下载完，那它会等待<code>DOM Tree</code>构建完成，在<code>DOMContentLoaded</code>事件执行前执行defer中的代码</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/02-browser/image9.png\" alt=\"在这里插入图片描述\"><br>总结：</p>\n<ol>\n<li><code>defer</code>不会影响<code>DOM Tree</code>的构建；</li>\n<li>在<code>defer</code>中<code>DOM Tree</code>已经构建完成，可进行对dom的操作；</li>\n<li><code>defer</code>总是在<code>DOMContentLoaded</code>时间发出前执行；</li>\n<li>另外，有多个<code>defer</code>会按照编写顺序执行；</li>\n<li>从某种角度来说，<code>defer</code>会提高页面性能，并且推荐放在<code>&lt;head&gt;</code>中（提前下载js脚本）；</li>\n<li>注意：<code>defer</code>仅适用于外部脚本，对于<code>&lt;script&gt;</code>默认内容会被忽略。</li>\n</ol>\n<h2 id=\"4-2-async\"><a href=\"#4-2-async\" class=\"headerlink\" title=\"4.2 async\"></a>4.2 async</h2><ul>\n<li><code>async</code>和<code>defer</code>相似，都能够让脚本不堵塞页面；</li>\n<li><code>async</code>是完全独立于浏览器的：<ul>\n<li>浏览器页面不会因为<code>script</code>脚本而暂停<code>DOM Tree</code>的构建；</li>\n<li><code>async</code>脚本不能保证顺序执行脚本，它独立下载，独立运行，不会等待其他脚本；</li>\n<li><code>async</code>不一定在<code>DOMContentLoaded</code>时间执行前执行</li>\n</ul>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li><code>defer</code>通常需要在文档解析后操作<code>DOM</code>的<code>javascript</code>代码，并且对多个<code>script</code>文件有顺序要求；</li>\n<li><code>async</code>通常用于独立的脚本，对其他脚本，甚至<code>DOM</code>没有依赖的。</li>\n</ol>\n<p>注：整个JS高级专栏依托于coderwhy老师的课程，相关图片、代码均来自于其课程。</p>\n"},{"title":"03-javascript的运行原理","indexing":false,"keywords":"js高级、javascript运行原理","abbrlink":"4bc49eeb","_content":"\n上篇博客了解了一下浏览器的运行原理，那javascript的运行原理又是怎么样的呢？\n\n# V8引擎\n先来了解一下V8引擎:\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image1.png)\n\n简单来说，V8引擎就是在做**将`javascript`代码转换成机器语言**，从而被cpu识别继而运行的工作。\n\n## 执行原理与架构（了解）\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image2.png)\nV8引擎本身的源码非常复杂，大概有超过100w行C++代码，通过了解它的架构，我们可以知道它是如何对)vaScript执行的：\n\n - `Parse`：将`javascript`代码转换成`AST抽象语法树`，因为解释器并不直接认识js代码；\n\n\t- 如果函数没有被调用，那么就不会被转成`AST`\n - `lgnition`：是一个解释器，会将`AST`转换成字节码；\n\n\t- 同时会收集`TurboFan`需要的类型信息（比如函数参数的类型信息，有了类型才能进行真实的运算）\n\t- 如果函数只执行一次，那么将直接解释执行字节码\n\n - `TurboFan`：是一个编译器，可以将`AST`转换成CPU直接能运行的机器码；\n\n\t- 如果一个函数被多次调用，那么将会被标记为`热点函数`，那么就会经过`TurboFan`编译成优化的机器码，提高代码的执行性能；\n\t- 但是，**机器码实际上也会被还原成字节码**，这是因为如果后续执行过程中类型发生了变化，之前优化的机器码并不能正确的运算，就会逆向的转成字节码\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image3.png)\n# javascript 执行过程\n\n假设现在有段这样的代码，它应该是怎样执行的呢？\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image4.png)\n\n我们先来了解一下相关的基础知识！\n## 初始化全局对象\n- 首先，`js` 在执行代码前，会创建一个全局对象：`Global Object`\n\t- 该对象 所有的作用域都可以访问；\n\t- 里面还会包含`Date`、`Array`、`Number`、`setTimeout`、`setInterval`等；\n\t- 其中还有一个属性指向`window`\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image5.png)\n## 执行上下文栈\njs 引擎内部有一个`执行上下文栈`（Excution Context Stack，简称ECS），是用于执行代码的调用栈。\n\n- 那么现在要执行的是谁呢？是全局的代码块：\n\t- 全局的代码块在执行前会创建一个`Global Excution Context（GEC）`；\n\t- `GEC`会被放到`ECS`中执行\n\n- `GEC`被放到`ECS`中包含两部分内容：\n\t- 第一部分：在代码执行前，在`parser`转成`AST`的过程中，会将全局定义的变量、函数等加入到`Global Object`中，但并不会赋值；（这个过程也叫做变量的作用域提升）\n\t- 在代码执行中，对变量赋值，或者执行其他的函数；\n\n# 全局代码的执行\n先来认识一下`VO对象`：\n- 每个执行上下文都会关联一个VO（Variable Object，变量对象），变量和函数声明会被添加到这个VO对象中；\n- 当全局代码被执行的时候，VO就是GO对象了。\n\n\n❗️❗️❗️问题来了！**全局代码如何被执行呢？**\n\n**执行前：**\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image6.png)\n**执行后：**\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image7.png)\n现在更改代码为：\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image8.png)\n\n那就又有一个问题：**函数代码如何执行呢？**\n# 函数代码的执行\n\n- 执行代码遇到函数体时，就会根据函数体创建一个函数体上下文（Functional Excution Context），并且压入到ECS中；\n- 当进入函数体执行代码时，就会创建一个`AO（Activation Obejct）`；\n- 这个`AO`会使用`arguments`作为初始化，并且初始值是传入的参数；\n- 这个`AO`对象会作为该函数体的执行上下文的`VO`来存放变量的初始化\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image9.png)\n\n执行函数上下文之后：\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image10.png)\n\n之后，函数执行上下文将会被压出栈外：\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image11.png)\n\n❗️在函数作用域中可能遇到这样的情况：\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image12.png)\n\n> `message`变量的声明存在于全局作用域，但在局部作用域进行了调用，**那局部作用域又是怎么找到全距作用与中的变量呢？**\n\n这就涉及到了`javascript`的作用域和作用链！\n\n# 作用域和作用链\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image13.png)\n\n上面说到，但我们进入一个执行上下文时，执行上下文会关联一个VO对象，其实，同时它也会关联一个 **`作用域链（Scope Chain）`**。\n\n- 作用域链是一个对象列表，用于表示变量标识符的求值；\n- 当进入一个执行上下文时，这个作用域链就会被创建，并且根据代码类型，添加一系列的对象 \n\n\n","source":"_posts/js高级/03- javascript的运行原理.md","raw":"---\ntitle: 03-javascript的运行原理\ncategories:\n  - 分类\ntags:\n  - js高级\nindexing: false\nkeywords: js高级、javascript运行原理\nabbrlink: 4bc49eeb\n---\n\n上篇博客了解了一下浏览器的运行原理，那javascript的运行原理又是怎么样的呢？\n\n# V8引擎\n先来了解一下V8引擎:\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image1.png)\n\n简单来说，V8引擎就是在做**将`javascript`代码转换成机器语言**，从而被cpu识别继而运行的工作。\n\n## 执行原理与架构（了解）\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image2.png)\nV8引擎本身的源码非常复杂，大概有超过100w行C++代码，通过了解它的架构，我们可以知道它是如何对)vaScript执行的：\n\n - `Parse`：将`javascript`代码转换成`AST抽象语法树`，因为解释器并不直接认识js代码；\n\n\t- 如果函数没有被调用，那么就不会被转成`AST`\n - `lgnition`：是一个解释器，会将`AST`转换成字节码；\n\n\t- 同时会收集`TurboFan`需要的类型信息（比如函数参数的类型信息，有了类型才能进行真实的运算）\n\t- 如果函数只执行一次，那么将直接解释执行字节码\n\n - `TurboFan`：是一个编译器，可以将`AST`转换成CPU直接能运行的机器码；\n\n\t- 如果一个函数被多次调用，那么将会被标记为`热点函数`，那么就会经过`TurboFan`编译成优化的机器码，提高代码的执行性能；\n\t- 但是，**机器码实际上也会被还原成字节码**，这是因为如果后续执行过程中类型发生了变化，之前优化的机器码并不能正确的运算，就会逆向的转成字节码\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image3.png)\n# javascript 执行过程\n\n假设现在有段这样的代码，它应该是怎样执行的呢？\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image4.png)\n\n我们先来了解一下相关的基础知识！\n## 初始化全局对象\n- 首先，`js` 在执行代码前，会创建一个全局对象：`Global Object`\n\t- 该对象 所有的作用域都可以访问；\n\t- 里面还会包含`Date`、`Array`、`Number`、`setTimeout`、`setInterval`等；\n\t- 其中还有一个属性指向`window`\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image5.png)\n## 执行上下文栈\njs 引擎内部有一个`执行上下文栈`（Excution Context Stack，简称ECS），是用于执行代码的调用栈。\n\n- 那么现在要执行的是谁呢？是全局的代码块：\n\t- 全局的代码块在执行前会创建一个`Global Excution Context（GEC）`；\n\t- `GEC`会被放到`ECS`中执行\n\n- `GEC`被放到`ECS`中包含两部分内容：\n\t- 第一部分：在代码执行前，在`parser`转成`AST`的过程中，会将全局定义的变量、函数等加入到`Global Object`中，但并不会赋值；（这个过程也叫做变量的作用域提升）\n\t- 在代码执行中，对变量赋值，或者执行其他的函数；\n\n# 全局代码的执行\n先来认识一下`VO对象`：\n- 每个执行上下文都会关联一个VO（Variable Object，变量对象），变量和函数声明会被添加到这个VO对象中；\n- 当全局代码被执行的时候，VO就是GO对象了。\n\n\n❗️❗️❗️问题来了！**全局代码如何被执行呢？**\n\n**执行前：**\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image6.png)\n**执行后：**\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image7.png)\n现在更改代码为：\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image8.png)\n\n那就又有一个问题：**函数代码如何执行呢？**\n# 函数代码的执行\n\n- 执行代码遇到函数体时，就会根据函数体创建一个函数体上下文（Functional Excution Context），并且压入到ECS中；\n- 当进入函数体执行代码时，就会创建一个`AO（Activation Obejct）`；\n- 这个`AO`会使用`arguments`作为初始化，并且初始值是传入的参数；\n- 这个`AO`对象会作为该函数体的执行上下文的`VO`来存放变量的初始化\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image9.png)\n\n执行函数上下文之后：\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image10.png)\n\n之后，函数执行上下文将会被压出栈外：\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image11.png)\n\n❗️在函数作用域中可能遇到这样的情况：\n\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image12.png)\n\n> `message`变量的声明存在于全局作用域，但在局部作用域进行了调用，**那局部作用域又是怎么找到全距作用与中的变量呢？**\n\n这就涉及到了`javascript`的作用域和作用链！\n\n# 作用域和作用链\n![在这里插入图片描述](../../img/js高级/03-oringinal-run-js/image13.png)\n\n上面说到，但我们进入一个执行上下文时，执行上下文会关联一个VO对象，其实，同时它也会关联一个 **`作用域链（Scope Chain）`**。\n\n- 作用域链是一个对象列表，用于表示变量标识符的求值；\n- 当进入一个执行上下文时，这个作用域链就会被创建，并且根据代码类型，添加一系列的对象 \n\n\n","slug":"js高级/03- javascript的运行原理","published":1,"date":"2025-06-02T08:22:59.353Z","updated":"2025-06-03T02:39:37.911Z","comments":1,"layout":"post","photos":[],"_id":"cmcx3vq7e000i1s4h5skr9xfl","content":"<p>上篇博客了解了一下浏览器的运行原理，那javascript的运行原理又是怎么样的呢？</p>\n<h1 id=\"V8引擎\"><a href=\"#V8引擎\" class=\"headerlink\" title=\"V8引擎\"></a>V8引擎</h1><p>先来了解一下V8引擎:</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image1.png\" alt=\"在这里插入图片描述\"></p>\n<p>简单来说，V8引擎就是在做<strong>将<code>javascript</code>代码转换成机器语言</strong>，从而被cpu识别继而运行的工作。</p>\n<h2 id=\"执行原理与架构（了解）\"><a href=\"#执行原理与架构（了解）\" class=\"headerlink\" title=\"执行原理与架构（了解）\"></a>执行原理与架构（了解）</h2><p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image2.png\" alt=\"在这里插入图片描述\"><br>V8引擎本身的源码非常复杂，大概有超过100w行C++代码，通过了解它的架构，我们可以知道它是如何对)vaScript执行的：</p>\n<ul>\n<li><p><code>Parse</code>：将<code>javascript</code>代码转换成<code>AST抽象语法树</code>，因为解释器并不直接认识js代码；</p>\n<ul>\n<li>如果函数没有被调用，那么就不会被转成<code>AST</code></li>\n</ul>\n</li>\n<li><p><code>lgnition</code>：是一个解释器，会将<code>AST</code>转换成字节码；</p>\n<ul>\n<li>同时会收集<code>TurboFan</code>需要的类型信息（比如函数参数的类型信息，有了类型才能进行真实的运算）</li>\n<li>如果函数只执行一次，那么将直接解释执行字节码</li>\n</ul>\n</li>\n<li><p><code>TurboFan</code>：是一个编译器，可以将<code>AST</code>转换成CPU直接能运行的机器码；</p>\n<ul>\n<li>如果一个函数被多次调用，那么将会被标记为<code>热点函数</code>，那么就会经过<code>TurboFan</code>编译成优化的机器码，提高代码的执行性能；</li>\n<li>但是，<strong>机器码实际上也会被还原成字节码</strong>，这是因为如果后续执行过程中类型发生了变化，之前优化的机器码并不能正确的运算，就会逆向的转成字节码</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image3.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"javascript-执行过程\"><a href=\"#javascript-执行过程\" class=\"headerlink\" title=\"javascript 执行过程\"></a>javascript 执行过程</h1><p>假设现在有段这样的代码，它应该是怎样执行的呢？<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image4.png\" alt=\"在这里插入图片描述\"></p>\n<p>我们先来了解一下相关的基础知识！</p>\n<h2 id=\"初始化全局对象\"><a href=\"#初始化全局对象\" class=\"headerlink\" title=\"初始化全局对象\"></a>初始化全局对象</h2><ul>\n<li>首先，<code>js</code> 在执行代码前，会创建一个全局对象：<code>Global Object</code><ul>\n<li>该对象 所有的作用域都可以访问；</li>\n<li>里面还会包含<code>Date</code>、<code>Array</code>、<code>Number</code>、<code>setTimeout</code>、<code>setInterval</code>等；</li>\n<li>其中还有一个属性指向<code>window</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image5.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"执行上下文栈\"><a href=\"#执行上下文栈\" class=\"headerlink\" title=\"执行上下文栈\"></a>执行上下文栈</h2><p>js 引擎内部有一个<code>执行上下文栈</code>（Excution Context Stack，简称ECS），是用于执行代码的调用栈。</p>\n<ul>\n<li><p>那么现在要执行的是谁呢？是全局的代码块：</p>\n<ul>\n<li>全局的代码块在执行前会创建一个<code>Global Excution Context（GEC）</code>；</li>\n<li><code>GEC</code>会被放到<code>ECS</code>中执行</li>\n</ul>\n</li>\n<li><p><code>GEC</code>被放到<code>ECS</code>中包含两部分内容：</p>\n<ul>\n<li>第一部分：在代码执行前，在<code>parser</code>转成<code>AST</code>的过程中，会将全局定义的变量、函数等加入到<code>Global Object</code>中，但并不会赋值；（这个过程也叫做变量的作用域提升）</li>\n<li>在代码执行中，对变量赋值，或者执行其他的函数；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"全局代码的执行\"><a href=\"#全局代码的执行\" class=\"headerlink\" title=\"全局代码的执行\"></a>全局代码的执行</h1><p>先来认识一下<code>VO对象</code>：</p>\n<ul>\n<li>每个执行上下文都会关联一个VO（Variable Object，变量对象），变量和函数声明会被添加到这个VO对象中；</li>\n<li>当全局代码被执行的时候，VO就是GO对象了。</li>\n</ul>\n<p>❗️❗️❗️问题来了！<strong>全局代码如何被执行呢？</strong></p>\n<p><strong>执行前：</strong><br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image6.png\" alt=\"在这里插入图片描述\"><br><strong>执行后：</strong><br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image7.png\" alt=\"在这里插入图片描述\"><br>现在更改代码为：<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image8.png\" alt=\"在这里插入图片描述\"></p>\n<p>那就又有一个问题：<strong>函数代码如何执行呢？</strong></p>\n<h1 id=\"函数代码的执行\"><a href=\"#函数代码的执行\" class=\"headerlink\" title=\"函数代码的执行\"></a>函数代码的执行</h1><ul>\n<li>执行代码遇到函数体时，就会根据函数体创建一个函数体上下文（Functional Excution Context），并且压入到ECS中；</li>\n<li>当进入函数体执行代码时，就会创建一个<code>AO（Activation Obejct）</code>；</li>\n<li>这个<code>AO</code>会使用<code>arguments</code>作为初始化，并且初始值是传入的参数；</li>\n<li>这个<code>AO</code>对象会作为该函数体的执行上下文的<code>VO</code>来存放变量的初始化</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image9.png\" alt=\"在这里插入图片描述\"></p>\n<p>执行函数上下文之后：</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image10.png\" alt=\"在这里插入图片描述\"></p>\n<p>之后，函数执行上下文将会被压出栈外：</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image11.png\" alt=\"在这里插入图片描述\"></p>\n<p>❗️在函数作用域中可能遇到这样的情况：</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image12.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p><code>message</code>变量的声明存在于全局作用域，但在局部作用域进行了调用，<strong>那局部作用域又是怎么找到全距作用与中的变量呢？</strong></p>\n</blockquote>\n<p>这就涉及到了<code>javascript</code>的作用域和作用链！</p>\n<h1 id=\"作用域和作用链\"><a href=\"#作用域和作用链\" class=\"headerlink\" title=\"作用域和作用链\"></a>作用域和作用链</h1><p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image13.png\" alt=\"在这里插入图片描述\"></p>\n<p>上面说到，但我们进入一个执行上下文时，执行上下文会关联一个VO对象，其实，同时它也会关联一个 <strong><code>作用域链（Scope Chain）</code></strong>。</p>\n<ul>\n<li>作用域链是一个对象列表，用于表示变量标识符的求值；</li>\n<li>当进入一个执行上下文时，这个作用域链就会被创建，并且根据代码类型，添加一系列的对象</li>\n</ul>\n","length":1540,"excerpt":"","more":"<p>上篇博客了解了一下浏览器的运行原理，那javascript的运行原理又是怎么样的呢？</p>\n<h1 id=\"V8引擎\"><a href=\"#V8引擎\" class=\"headerlink\" title=\"V8引擎\"></a>V8引擎</h1><p>先来了解一下V8引擎:</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image1.png\" alt=\"在这里插入图片描述\"></p>\n<p>简单来说，V8引擎就是在做<strong>将<code>javascript</code>代码转换成机器语言</strong>，从而被cpu识别继而运行的工作。</p>\n<h2 id=\"执行原理与架构（了解）\"><a href=\"#执行原理与架构（了解）\" class=\"headerlink\" title=\"执行原理与架构（了解）\"></a>执行原理与架构（了解）</h2><p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image2.png\" alt=\"在这里插入图片描述\"><br>V8引擎本身的源码非常复杂，大概有超过100w行C++代码，通过了解它的架构，我们可以知道它是如何对)vaScript执行的：</p>\n<ul>\n<li><p><code>Parse</code>：将<code>javascript</code>代码转换成<code>AST抽象语法树</code>，因为解释器并不直接认识js代码；</p>\n<ul>\n<li>如果函数没有被调用，那么就不会被转成<code>AST</code></li>\n</ul>\n</li>\n<li><p><code>lgnition</code>：是一个解释器，会将<code>AST</code>转换成字节码；</p>\n<ul>\n<li>同时会收集<code>TurboFan</code>需要的类型信息（比如函数参数的类型信息，有了类型才能进行真实的运算）</li>\n<li>如果函数只执行一次，那么将直接解释执行字节码</li>\n</ul>\n</li>\n<li><p><code>TurboFan</code>：是一个编译器，可以将<code>AST</code>转换成CPU直接能运行的机器码；</p>\n<ul>\n<li>如果一个函数被多次调用，那么将会被标记为<code>热点函数</code>，那么就会经过<code>TurboFan</code>编译成优化的机器码，提高代码的执行性能；</li>\n<li>但是，<strong>机器码实际上也会被还原成字节码</strong>，这是因为如果后续执行过程中类型发生了变化，之前优化的机器码并不能正确的运算，就会逆向的转成字节码</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image3.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"javascript-执行过程\"><a href=\"#javascript-执行过程\" class=\"headerlink\" title=\"javascript 执行过程\"></a>javascript 执行过程</h1><p>假设现在有段这样的代码，它应该是怎样执行的呢？<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image4.png\" alt=\"在这里插入图片描述\"></p>\n<p>我们先来了解一下相关的基础知识！</p>\n<h2 id=\"初始化全局对象\"><a href=\"#初始化全局对象\" class=\"headerlink\" title=\"初始化全局对象\"></a>初始化全局对象</h2><ul>\n<li>首先，<code>js</code> 在执行代码前，会创建一个全局对象：<code>Global Object</code><ul>\n<li>该对象 所有的作用域都可以访问；</li>\n<li>里面还会包含<code>Date</code>、<code>Array</code>、<code>Number</code>、<code>setTimeout</code>、<code>setInterval</code>等；</li>\n<li>其中还有一个属性指向<code>window</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image5.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"执行上下文栈\"><a href=\"#执行上下文栈\" class=\"headerlink\" title=\"执行上下文栈\"></a>执行上下文栈</h2><p>js 引擎内部有一个<code>执行上下文栈</code>（Excution Context Stack，简称ECS），是用于执行代码的调用栈。</p>\n<ul>\n<li><p>那么现在要执行的是谁呢？是全局的代码块：</p>\n<ul>\n<li>全局的代码块在执行前会创建一个<code>Global Excution Context（GEC）</code>；</li>\n<li><code>GEC</code>会被放到<code>ECS</code>中执行</li>\n</ul>\n</li>\n<li><p><code>GEC</code>被放到<code>ECS</code>中包含两部分内容：</p>\n<ul>\n<li>第一部分：在代码执行前，在<code>parser</code>转成<code>AST</code>的过程中，会将全局定义的变量、函数等加入到<code>Global Object</code>中，但并不会赋值；（这个过程也叫做变量的作用域提升）</li>\n<li>在代码执行中，对变量赋值，或者执行其他的函数；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"全局代码的执行\"><a href=\"#全局代码的执行\" class=\"headerlink\" title=\"全局代码的执行\"></a>全局代码的执行</h1><p>先来认识一下<code>VO对象</code>：</p>\n<ul>\n<li>每个执行上下文都会关联一个VO（Variable Object，变量对象），变量和函数声明会被添加到这个VO对象中；</li>\n<li>当全局代码被执行的时候，VO就是GO对象了。</li>\n</ul>\n<p>❗️❗️❗️问题来了！<strong>全局代码如何被执行呢？</strong></p>\n<p><strong>执行前：</strong><br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image6.png\" alt=\"在这里插入图片描述\"><br><strong>执行后：</strong><br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image7.png\" alt=\"在这里插入图片描述\"><br>现在更改代码为：<br><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image8.png\" alt=\"在这里插入图片描述\"></p>\n<p>那就又有一个问题：<strong>函数代码如何执行呢？</strong></p>\n<h1 id=\"函数代码的执行\"><a href=\"#函数代码的执行\" class=\"headerlink\" title=\"函数代码的执行\"></a>函数代码的执行</h1><ul>\n<li>执行代码遇到函数体时，就会根据函数体创建一个函数体上下文（Functional Excution Context），并且压入到ECS中；</li>\n<li>当进入函数体执行代码时，就会创建一个<code>AO（Activation Obejct）</code>；</li>\n<li>这个<code>AO</code>会使用<code>arguments</code>作为初始化，并且初始值是传入的参数；</li>\n<li>这个<code>AO</code>对象会作为该函数体的执行上下文的<code>VO</code>来存放变量的初始化</li>\n</ul>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image9.png\" alt=\"在这里插入图片描述\"></p>\n<p>执行函数上下文之后：</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image10.png\" alt=\"在这里插入图片描述\"></p>\n<p>之后，函数执行上下文将会被压出栈外：</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image11.png\" alt=\"在这里插入图片描述\"></p>\n<p>❗️在函数作用域中可能遇到这样的情况：</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image12.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p><code>message</code>变量的声明存在于全局作用域，但在局部作用域进行了调用，<strong>那局部作用域又是怎么找到全距作用与中的变量呢？</strong></p>\n</blockquote>\n<p>这就涉及到了<code>javascript</code>的作用域和作用链！</p>\n<h1 id=\"作用域和作用链\"><a href=\"#作用域和作用链\" class=\"headerlink\" title=\"作用域和作用链\"></a>作用域和作用链</h1><p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/03-oringinal-run-js/image13.png\" alt=\"在这里插入图片描述\"></p>\n<p>上面说到，但我们进入一个执行上下文时，执行上下文会关联一个VO对象，其实，同时它也会关联一个 <strong><code>作用域链（Scope Chain）</code></strong>。</p>\n<ul>\n<li>作用域链是一个对象列表，用于表示变量标识符的求值；</li>\n<li>当进入一个执行上下文时，这个作用域链就会被创建，并且根据代码类型，添加一系列的对象</li>\n</ul>\n"},{"title":"06-javascript函数和对象增强","indexing":false,"keywords":"js函数","abbrlink":"2f741396","_content":"\n了解一下`js`函数和对象的相关增强知识。\n\n\n# 1. javascript函数增强\n## 1.1 函数基本概念掌握\n### 1.1.1 函数对象的属性\n现定义一个函数：\n```javascript\nfunction foo(a, b){\n        \n}\n```\n1. 自定义属性\n    ```javascript\n    foo.title = \"foo title\"\n    console.log(foo.title) // foo title\n    ```\n2. 默认属性\n    - `name`\n    `console.log(foo.name) // foo`\n    - `length` (指的是函数参数的个数,但不包括有默认值的参数和可变参数)\n   `console.log(foo.length) // 2`\n### 1.1.2 函数的`arguments`\n1. 三种获取方式\n    ```javascript\n    function foo1(a, b, c) {\n       // 获取arguments\n       // 1. arguments是一个伪数组对象，可通过[]字面量继续进行获取\n       console.log(arguments[0]);\n    \n       // 2.for循环遍历\n       for (let i = 0; i < arguments.length; i++) {\n           console.log(arguments[i]);\n       }\n    \n       // 3. for of 遍历   （for of 可用来遍历可迭代对象）\n       for (let item of arguments) {\n           console.log(item);\n       }\n    }\n    ```\n   \n2. 三种转换为数组的方式\n    ```javascript\n    function foo2(a, b){\n       // 转换成数组\n       // 1. 将数据放入新数组\n       let arr1 = []\n       for (let i = 0; i < arguments.length; i++) {\n           arr1.push(arguments[i])\n       }\n\n       // 2. [].slice()\n       let arr2 = [].slice.call(arguments)\n\n       // 3. Array.from()\n       let arr3 = Array.from(arguments)\n       let arr4 = [...arguments]\n       }\n    ```\n### 1.1.3 箭头函数的`arguments`\n箭头函数没有`arguments`，若在箭头函数内部使用，那么`arguments`将会向外寻找父级作用域的`arguments`\n\n### 1.1.4 函数的剩余参数`rest`\n如果最后一个参数以...为前缀，那么该参数将以数组的形式接收剩余的参数。\n```javascript\nfunction rest(a, ...args){\n    console.log(a)\n    console.log(args)\n}\nrest(1,2,3,4,5) // 1 [2,3,4,5]\n```\n\n**注：剩余参数必须放在最后一个形参位置，否则会报错。**\n\n剩余参数`rest`和`arguments`的区别：\n1. `rest`以数组形式接收参数，`arguments`以伪数组对象形式接收参数；\n2. `rest`接收没有对应形参的实参，`arguments`接收所有实参\n3. `arguments`是早期`ECMAScript`为方便获取参数定义的一个属性，而`rest`是`ECMAScript6`新增的希望替代arguments的语法，。\n\n## 1.2 纯函数\n### 1.2.2 概念理解\n> 简单来说，满足有相同输入时总是有相同输出，并且没有任何副作用的函数叫做纯函数。\n \n1. 输入相同时有相同输出\n   ```javascript\n    let b = 1;\n    function add1(a){\n        return a + b\n    }\n   ```\n   这个函数就不是一个纯函数，因为函数内部存在外部变量b，输出可能不一致。\n2. 没有产生任何副作用\n   ```javascript\n   let a,b = 1;\n   function add1(a,b){\n       b = 2;\n       return a + b\n   }\n   ```\n   这个函数修改了外部变量b，也就是产生了副作用，所以这个函数也不是纯函数。\n\n### 1.2.2 纯函数案例\n> let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n- `slice()`\n> console.log(arr.slice(0, 5), arr);   //截取数组\n\n输出：[1, 2, 3, 4, 5]   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n- `splice()`\n> console.log(arr.splice(0, 5), arr);\n\n输出：[ 1, 2, 3, 4, 5 ] [ 6, 7, 8, 9, 10 ]\n\n根据输出结果可以知道slice()是纯函数，但splice()不是纯函数，因为splice()修改了arr，产生了外部影响。\n\n**纯函数在函数式编程中很重要，它保证了函数的纯度，只单纯实现自己的业务逻辑，不会对外部变量产生影响。**\n\n## 1.3 函数柯里化\n## 1.3.1 基本了解\n> `柯里化（Currying）`是把接受多个参数的函数变换成接受一个参数的函数，并且返回接受多个参数的函数的函数。\n\n```javascript\nfunction foo(a, b, c){\n    return a + b + c;\n}\nfoo(1, 2, 3)\n```\n柯里化后：\n```javascript\nfunction foo(a){\n    return function (b){\n        return function (c){\n            return a + b + c;\n        }\n    }\n}\nfoo(1)(2)(3)\n```\n\n箭头函数写法：\n```javascript\nconst foo = a => b => c => a + b + c;\n```\n\n柯里化优势：\n- 职责单一\n- 参数复用\n\n## 1.4 with语句和eval函数的使用（了解即可）\n1. `with`语句  --  可以访问对象属性\n   ```javascript\n        const obj = {\n            name: 'zf',\n            age: 18,\n            height: 1.88,\n            address: '北京'\n        }\n        \n        with (obj) {\n            console.log(name, age, height, address);\n        }\n   ```\n2. `eval`函数  --  可将字符串转换成可执行的js语句\n   ```javascript\n        const testStr = '全局变量'\n        const str = \"const msg = 'hello world';console.log(msg);console.log(testStr);\"\n        eval(str)\n   ```\n不建议在开发中使用`eval`函数：\n- 可读性差\n- 字符串容易被篡改，可能造成被攻击的风险；\n- eval的执行需要经过javascript解释器，不能优化\n\n## 1.5 严格模式\n\n### 1.5.1 严格模式的理解\n长久以来，javascript不断发展，且没有出现兼容性问题，新特性的加入也会兼容旧代码，但是一些错误或者不完善的地方仍然被保留；\n在ECMAScript5中，`严格模式`被提出，在严格模式下：\n- 严格模式下，一些静默错误会被抛出；\n- js解释器会对代码进行更多的优化；\n- （禁用一些可能在ECMAScript未来版本中的语法）\n\n**严格模式的开启**\n在`script`标签、js文件或函数中使用`use strict`开启严格模式\n```javascript\n\"use strict\"\n\nfunction foo(){\n    \"use strict\"\n}\n```\n注：\n- 在`class`、`module`等模块中默认启用严格模式；\n- 打包过后的文件默认也是严格模式；\n\n### 1.5.2 严格模式的一些限制\n1. 严格模式无法意外创建全局变量\n   ```javascript\n   \"use strict\"\n   \n   function foo(){\n       message = 'xuexi javascript'\n   }\n   \n   console.log(message) // 报错：message is not defined\n   ```\n2. 静默操作抛出异常\n   ```javascript\n   \"use strict\"\n   const obj = {\n       name: 'zf',\n   }\n   \n   Object.defineProperty(obj, \"name\",{\n       writable:false,\n       configurable:false\n   })\n   \n   obj.name='xuexi'  //  Cannot assign to read only property 'name' of object '#<Object>'\n   \n   delete obj.name   //  Cannot delete property 'name' of #<Object>\n   ```\n\n3. 函数形参名称不能相同\n   ```javascript\n   function foo1(num, num) {\n     return num + num\n   }\n   console.log(foo1(1, 1));  // Duplicate parameter name not allowed in this context\n   ```\n4. 严格模式不允许函数参数有相同的名称\n5. 不允许0的八进制语法\n6. 在严格模式下，不允许使用with\n7. 在严格模式下，eva不再为上层引用变量\n8. 严格模式下，this绑定不会默认转为对象\n\n# 2. javascript对象增强\n## 2.1 属性描述符\n| 属性描述符   | configurable | enumerable | writable | value | get | set |\n|---------|--------------|------------|----------|-------|-----|-----|\n| 数据属性描述符 | 可以           | 可以         | 可以       | 可以    | -   | -   |\n| 存取属性描述符 | 可以           | 可以         | -        | -     | 可以  | 可以  |\n\n1. 数据属性描述符 （默认都为true）\n   - `[configurable]`  -- 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;\n   - `[enumerable]`  -- 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;\n   - `[writable]` -- 是否可以修改数据;\n   - `[value]` -- 是否可以返回属性值;\n   \n   ```javascript\n   const obj = {\n    name:'xuexi',\n   }\n\n   Object.defineProperty(obj, \"name\", {\n        configurable: false,\n        writable: false,\n        enumerable: true,\n        value: 'xuexi'\n   })\n   ```\n2. 存取属性描述符\n   - `[configurable]`  -- 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;\n   - `[enumerable]`  -- 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;\n   - `[get]` -- 获取属性值,默认为undefined;\n   - `[set]` -- 设置属性值,默认为undefined;\n\n   ```javascript\n   Object.defineProperty(obj, \"name\", {\n     configurable: false,\n     writable: false,\n     get: function () {\n       console.log('getter');\n     },\n     set: function () {\n       console.log('setter');\n     }\n   })\n   ```\n\n**同时定义多个属性**\n```javascript\nObject.defineProperties(obj, {\n    name: {\n        configurable: false,\n        writable: false,\n        get: function () {\n            console.log('getter');},\n        set: function () {\n            console.log('setter');\n        }\n    }})\n```\n\n**其他属性**(了解即可)\n1. 获取对象属性的属性描述符\n   - `Object.getOwnPropertyDescriptor(obj, 'name')`  -- 获取对象的单个属性的属性描述符\n         ```javascript\n         console.log(Object.getOwnPropertyDescriptor(obj, 'name'));\n         // 输出：{\n         //    value: 'xuexi',\n         //            writable: true,\n         //         enumerable: true,\n         //         configurable: true\n         // }\n         ```\n   - `Object.getOwnPropertyDescriptors(obj, 'name')`  -- 获取对象全部属性的属性描述符\n2. 阻止对象的扩展\n   ```javascript\n   // 阻止扩展\n   Object.preventExtensions(obj)\n   obj.address = 'beijing'\n   console.log(obj);\n   ```\n3. 密封对象 -- 禁止删除操作\n   ```javascript\n   // 密封对象\n   Object.seal(obj)\n   delete obj.name\n   console.log(obj);\n   ```\n4. 冻结对象 -- 禁止修改操作\n   ```javascript\n   // 冻结对象\n   Object.freeze(obj)\n   obj.name = 'renzhenxuexi'\n   console.log(obj);\n   ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js高级/06-javascript函数和对象增强.md","raw":"---\ntitle: 06-javascript函数和对象增强\ncategories:\n  - 分类\ntags:\n  - js高级\nindexing: false\nkeywords: js函数\nabbrlink: 2f741396\n---\n\n了解一下`js`函数和对象的相关增强知识。\n\n\n# 1. javascript函数增强\n## 1.1 函数基本概念掌握\n### 1.1.1 函数对象的属性\n现定义一个函数：\n```javascript\nfunction foo(a, b){\n        \n}\n```\n1. 自定义属性\n    ```javascript\n    foo.title = \"foo title\"\n    console.log(foo.title) // foo title\n    ```\n2. 默认属性\n    - `name`\n    `console.log(foo.name) // foo`\n    - `length` (指的是函数参数的个数,但不包括有默认值的参数和可变参数)\n   `console.log(foo.length) // 2`\n### 1.1.2 函数的`arguments`\n1. 三种获取方式\n    ```javascript\n    function foo1(a, b, c) {\n       // 获取arguments\n       // 1. arguments是一个伪数组对象，可通过[]字面量继续进行获取\n       console.log(arguments[0]);\n    \n       // 2.for循环遍历\n       for (let i = 0; i < arguments.length; i++) {\n           console.log(arguments[i]);\n       }\n    \n       // 3. for of 遍历   （for of 可用来遍历可迭代对象）\n       for (let item of arguments) {\n           console.log(item);\n       }\n    }\n    ```\n   \n2. 三种转换为数组的方式\n    ```javascript\n    function foo2(a, b){\n       // 转换成数组\n       // 1. 将数据放入新数组\n       let arr1 = []\n       for (let i = 0; i < arguments.length; i++) {\n           arr1.push(arguments[i])\n       }\n\n       // 2. [].slice()\n       let arr2 = [].slice.call(arguments)\n\n       // 3. Array.from()\n       let arr3 = Array.from(arguments)\n       let arr4 = [...arguments]\n       }\n    ```\n### 1.1.3 箭头函数的`arguments`\n箭头函数没有`arguments`，若在箭头函数内部使用，那么`arguments`将会向外寻找父级作用域的`arguments`\n\n### 1.1.4 函数的剩余参数`rest`\n如果最后一个参数以...为前缀，那么该参数将以数组的形式接收剩余的参数。\n```javascript\nfunction rest(a, ...args){\n    console.log(a)\n    console.log(args)\n}\nrest(1,2,3,4,5) // 1 [2,3,4,5]\n```\n\n**注：剩余参数必须放在最后一个形参位置，否则会报错。**\n\n剩余参数`rest`和`arguments`的区别：\n1. `rest`以数组形式接收参数，`arguments`以伪数组对象形式接收参数；\n2. `rest`接收没有对应形参的实参，`arguments`接收所有实参\n3. `arguments`是早期`ECMAScript`为方便获取参数定义的一个属性，而`rest`是`ECMAScript6`新增的希望替代arguments的语法，。\n\n## 1.2 纯函数\n### 1.2.2 概念理解\n> 简单来说，满足有相同输入时总是有相同输出，并且没有任何副作用的函数叫做纯函数。\n \n1. 输入相同时有相同输出\n   ```javascript\n    let b = 1;\n    function add1(a){\n        return a + b\n    }\n   ```\n   这个函数就不是一个纯函数，因为函数内部存在外部变量b，输出可能不一致。\n2. 没有产生任何副作用\n   ```javascript\n   let a,b = 1;\n   function add1(a,b){\n       b = 2;\n       return a + b\n   }\n   ```\n   这个函数修改了外部变量b，也就是产生了副作用，所以这个函数也不是纯函数。\n\n### 1.2.2 纯函数案例\n> let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n- `slice()`\n> console.log(arr.slice(0, 5), arr);   //截取数组\n\n输出：[1, 2, 3, 4, 5]   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n- `splice()`\n> console.log(arr.splice(0, 5), arr);\n\n输出：[ 1, 2, 3, 4, 5 ] [ 6, 7, 8, 9, 10 ]\n\n根据输出结果可以知道slice()是纯函数，但splice()不是纯函数，因为splice()修改了arr，产生了外部影响。\n\n**纯函数在函数式编程中很重要，它保证了函数的纯度，只单纯实现自己的业务逻辑，不会对外部变量产生影响。**\n\n## 1.3 函数柯里化\n## 1.3.1 基本了解\n> `柯里化（Currying）`是把接受多个参数的函数变换成接受一个参数的函数，并且返回接受多个参数的函数的函数。\n\n```javascript\nfunction foo(a, b, c){\n    return a + b + c;\n}\nfoo(1, 2, 3)\n```\n柯里化后：\n```javascript\nfunction foo(a){\n    return function (b){\n        return function (c){\n            return a + b + c;\n        }\n    }\n}\nfoo(1)(2)(3)\n```\n\n箭头函数写法：\n```javascript\nconst foo = a => b => c => a + b + c;\n```\n\n柯里化优势：\n- 职责单一\n- 参数复用\n\n## 1.4 with语句和eval函数的使用（了解即可）\n1. `with`语句  --  可以访问对象属性\n   ```javascript\n        const obj = {\n            name: 'zf',\n            age: 18,\n            height: 1.88,\n            address: '北京'\n        }\n        \n        with (obj) {\n            console.log(name, age, height, address);\n        }\n   ```\n2. `eval`函数  --  可将字符串转换成可执行的js语句\n   ```javascript\n        const testStr = '全局变量'\n        const str = \"const msg = 'hello world';console.log(msg);console.log(testStr);\"\n        eval(str)\n   ```\n不建议在开发中使用`eval`函数：\n- 可读性差\n- 字符串容易被篡改，可能造成被攻击的风险；\n- eval的执行需要经过javascript解释器，不能优化\n\n## 1.5 严格模式\n\n### 1.5.1 严格模式的理解\n长久以来，javascript不断发展，且没有出现兼容性问题，新特性的加入也会兼容旧代码，但是一些错误或者不完善的地方仍然被保留；\n在ECMAScript5中，`严格模式`被提出，在严格模式下：\n- 严格模式下，一些静默错误会被抛出；\n- js解释器会对代码进行更多的优化；\n- （禁用一些可能在ECMAScript未来版本中的语法）\n\n**严格模式的开启**\n在`script`标签、js文件或函数中使用`use strict`开启严格模式\n```javascript\n\"use strict\"\n\nfunction foo(){\n    \"use strict\"\n}\n```\n注：\n- 在`class`、`module`等模块中默认启用严格模式；\n- 打包过后的文件默认也是严格模式；\n\n### 1.5.2 严格模式的一些限制\n1. 严格模式无法意外创建全局变量\n   ```javascript\n   \"use strict\"\n   \n   function foo(){\n       message = 'xuexi javascript'\n   }\n   \n   console.log(message) // 报错：message is not defined\n   ```\n2. 静默操作抛出异常\n   ```javascript\n   \"use strict\"\n   const obj = {\n       name: 'zf',\n   }\n   \n   Object.defineProperty(obj, \"name\",{\n       writable:false,\n       configurable:false\n   })\n   \n   obj.name='xuexi'  //  Cannot assign to read only property 'name' of object '#<Object>'\n   \n   delete obj.name   //  Cannot delete property 'name' of #<Object>\n   ```\n\n3. 函数形参名称不能相同\n   ```javascript\n   function foo1(num, num) {\n     return num + num\n   }\n   console.log(foo1(1, 1));  // Duplicate parameter name not allowed in this context\n   ```\n4. 严格模式不允许函数参数有相同的名称\n5. 不允许0的八进制语法\n6. 在严格模式下，不允许使用with\n7. 在严格模式下，eva不再为上层引用变量\n8. 严格模式下，this绑定不会默认转为对象\n\n# 2. javascript对象增强\n## 2.1 属性描述符\n| 属性描述符   | configurable | enumerable | writable | value | get | set |\n|---------|--------------|------------|----------|-------|-----|-----|\n| 数据属性描述符 | 可以           | 可以         | 可以       | 可以    | -   | -   |\n| 存取属性描述符 | 可以           | 可以         | -        | -     | 可以  | 可以  |\n\n1. 数据属性描述符 （默认都为true）\n   - `[configurable]`  -- 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;\n   - `[enumerable]`  -- 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;\n   - `[writable]` -- 是否可以修改数据;\n   - `[value]` -- 是否可以返回属性值;\n   \n   ```javascript\n   const obj = {\n    name:'xuexi',\n   }\n\n   Object.defineProperty(obj, \"name\", {\n        configurable: false,\n        writable: false,\n        enumerable: true,\n        value: 'xuexi'\n   })\n   ```\n2. 存取属性描述符\n   - `[configurable]`  -- 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;\n   - `[enumerable]`  -- 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;\n   - `[get]` -- 获取属性值,默认为undefined;\n   - `[set]` -- 设置属性值,默认为undefined;\n\n   ```javascript\n   Object.defineProperty(obj, \"name\", {\n     configurable: false,\n     writable: false,\n     get: function () {\n       console.log('getter');\n     },\n     set: function () {\n       console.log('setter');\n     }\n   })\n   ```\n\n**同时定义多个属性**\n```javascript\nObject.defineProperties(obj, {\n    name: {\n        configurable: false,\n        writable: false,\n        get: function () {\n            console.log('getter');},\n        set: function () {\n            console.log('setter');\n        }\n    }})\n```\n\n**其他属性**(了解即可)\n1. 获取对象属性的属性描述符\n   - `Object.getOwnPropertyDescriptor(obj, 'name')`  -- 获取对象的单个属性的属性描述符\n         ```javascript\n         console.log(Object.getOwnPropertyDescriptor(obj, 'name'));\n         // 输出：{\n         //    value: 'xuexi',\n         //            writable: true,\n         //         enumerable: true,\n         //         configurable: true\n         // }\n         ```\n   - `Object.getOwnPropertyDescriptors(obj, 'name')`  -- 获取对象全部属性的属性描述符\n2. 阻止对象的扩展\n   ```javascript\n   // 阻止扩展\n   Object.preventExtensions(obj)\n   obj.address = 'beijing'\n   console.log(obj);\n   ```\n3. 密封对象 -- 禁止删除操作\n   ```javascript\n   // 密封对象\n   Object.seal(obj)\n   delete obj.name\n   console.log(obj);\n   ```\n4. 冻结对象 -- 禁止修改操作\n   ```javascript\n   // 冻结对象\n   Object.freeze(obj)\n   obj.name = 'renzhenxuexi'\n   console.log(obj);\n   ```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js高级/06-javascript函数和对象增强","published":1,"date":"2025-07-08T02:36:35.419Z","updated":"2025-07-10T08:08:09.504Z","comments":1,"layout":"post","photos":[],"_id":"cmcx3vq7e000k1s4h8w8ie2mz","content":"<p>了解一下<code>js</code>函数和对象的相关增强知识。</p>\n<h1 id=\"1-javascript函数增强\"><a href=\"#1-javascript函数增强\" class=\"headerlink\" title=\"1. javascript函数增强\"></a>1. javascript函数增强</h1><h2 id=\"1-1-函数基本概念掌握\"><a href=\"#1-1-函数基本概念掌握\" class=\"headerlink\" title=\"1.1 函数基本概念掌握\"></a>1.1 函数基本概念掌握</h2><h3 id=\"1-1-1-函数对象的属性\"><a href=\"#1-1-1-函数对象的属性\" class=\"headerlink\" title=\"1.1.1 函数对象的属性\"></a>1.1.1 函数对象的属性</h3><p>现定义一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>自定义属性 <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"property\">title</span> = <span class=\"string\">&quot;foo title&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo.<span class=\"property\">title</span>) <span class=\"comment\">// foo title</span></span><br></pre></td></tr></table></figure></li>\n<li>默认属性<ul>\n<li><code>name</code><br> <code>console.log(foo.name) // foo</code></li>\n<li><code>length</code> (指的是函数参数的个数,但不包括有默认值的参数和可变参数)<br><code>console.log(foo.length) // 2</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-1-2-函数的arguments\"><a href=\"#1-1-2-函数的arguments\" class=\"headerlink\" title=\"1.1.2 函数的arguments\"></a>1.1.2 函数的<code>arguments</code></h3><ol>\n<li><p>三种获取方式</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo1</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 获取arguments</span></span><br><span class=\"line\">   <span class=\"comment\">// 1. arguments是一个伪数组对象，可通过[]字面量继续进行获取</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 2.for循环遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 3. for of 遍历   （for of 可用来遍历可迭代对象）</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"variable language_\">arguments</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>三种转换为数组的方式</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo2</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 转换成数组</span></span><br><span class=\"line\">   <span class=\"comment\">// 1. 将数据放入新数组</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr1 = []</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">       arr1.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 2. [].slice()</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr2 = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 3. Array.from()</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr3 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr4 = [...<span class=\"variable language_\">arguments</span>]</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"1-1-3-箭头函数的arguments\"><a href=\"#1-1-3-箭头函数的arguments\" class=\"headerlink\" title=\"1.1.3 箭头函数的arguments\"></a>1.1.3 箭头函数的<code>arguments</code></h3><p>箭头函数没有<code>arguments</code>，若在箭头函数内部使用，那么<code>arguments</code>将会向外寻找父级作用域的<code>arguments</code></p>\n<h3 id=\"1-1-4-函数的剩余参数rest\"><a href=\"#1-1-4-函数的剩余参数rest\" class=\"headerlink\" title=\"1.1.4 函数的剩余参数rest\"></a>1.1.4 函数的剩余参数<code>rest</code></h3><p>如果最后一个参数以…为前缀，那么该参数将以数组的形式接收剩余的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">rest</span>(<span class=\"params\">a, ...args</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">rest</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// 1 [2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注：剩余参数必须放在最后一个形参位置，否则会报错。</strong></p>\n<p>剩余参数<code>rest</code>和<code>arguments</code>的区别：</p>\n<ol>\n<li><code>rest</code>以数组形式接收参数，<code>arguments</code>以伪数组对象形式接收参数；</li>\n<li><code>rest</code>接收没有对应形参的实参，<code>arguments</code>接收所有实参</li>\n<li><code>arguments</code>是早期<code>ECMAScript</code>为方便获取参数定义的一个属性，而<code>rest</code>是<code>ECMAScript6</code>新增的希望替代arguments的语法，。</li>\n</ol>\n<h2 id=\"1-2-纯函数\"><a href=\"#1-2-纯函数\" class=\"headerlink\" title=\"1.2 纯函数\"></a>1.2 纯函数</h2><h3 id=\"1-2-2-概念理解\"><a href=\"#1-2-2-概念理解\" class=\"headerlink\" title=\"1.2.2 概念理解\"></a>1.2.2 概念理解</h3><blockquote>\n<p>简单来说，满足有相同输入时总是有相同输出，并且没有任何副作用的函数叫做纯函数。</p>\n</blockquote>\n<ol>\n<li>输入相同时有相同输出<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add1</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这个函数就不是一个纯函数，因为函数内部存在外部变量b，输出可能不一致。</li>\n<li>没有产生任何副作用<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a,b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add1</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这个函数修改了外部变量b，也就是产生了副作用，所以这个函数也不是纯函数。</li>\n</ol>\n<h3 id=\"1-2-2-纯函数案例\"><a href=\"#1-2-2-纯函数案例\" class=\"headerlink\" title=\"1.2.2 纯函数案例\"></a>1.2.2 纯函数案例</h3><blockquote>\n<p>let arr &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n</blockquote>\n<ul>\n<li><code>slice()</code><blockquote>\n<p>console.log(arr.slice(0, 5), arr);   &#x2F;&#x2F;截取数组</p>\n</blockquote>\n</li>\n</ul>\n<p>输出：[1, 2, 3, 4, 5]   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n<ul>\n<li><code>splice()</code><blockquote>\n<p>console.log(arr.splice(0, 5), arr);</p>\n</blockquote>\n</li>\n</ul>\n<p>输出：[ 1, 2, 3, 4, 5 ] [ 6, 7, 8, 9, 10 ]</p>\n<p>根据输出结果可以知道slice()是纯函数，但splice()不是纯函数，因为splice()修改了arr，产生了外部影响。</p>\n<p><strong>纯函数在函数式编程中很重要，它保证了函数的纯度，只单纯实现自己的业务逻辑，不会对外部变量产生影响。</strong></p>\n<h2 id=\"1-3-函数柯里化\"><a href=\"#1-3-函数柯里化\" class=\"headerlink\" title=\"1.3 函数柯里化\"></a>1.3 函数柯里化</h2><h2 id=\"1-3-1-基本了解\"><a href=\"#1-3-1-基本了解\" class=\"headerlink\" title=\"1.3.1 基本了解\"></a>1.3.1 基本了解</h2><blockquote>\n<p><code>柯里化（Currying）</code>是把接受多个参数的函数变换成接受一个参数的函数，并且返回接受多个参数的函数的函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a, b, c</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>柯里化后：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>箭头函数写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = a =&gt; <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> a + b + c;</span><br></pre></td></tr></table></figure>\n\n<p>柯里化优势：</p>\n<ul>\n<li>职责单一</li>\n<li>参数复用</li>\n</ul>\n<h2 id=\"1-4-with语句和eval函数的使用（了解即可）\"><a href=\"#1-4-with语句和eval函数的使用（了解即可）\" class=\"headerlink\" title=\"1.4 with语句和eval函数的使用（了解即可）\"></a>1.4 with语句和eval函数的使用（了解即可）</h2><ol>\n<li><code>with</code>语句  –  可以访问对象属性<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zf&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.88</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;北京&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">with</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name, age, height, address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>eval</code>函数  –  可将字符串转换成可执行的js语句<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testStr = <span class=\"string\">&#x27;全局变量&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;const msg = &#x27;hello world&#x27;;console.log(msg);console.log(testStr);&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(str)</span><br></pre></td></tr></table></figure>\n不建议在开发中使用<code>eval</code>函数：</li>\n</ol>\n<ul>\n<li>可读性差</li>\n<li>字符串容易被篡改，可能造成被攻击的风险；</li>\n<li>eval的执行需要经过javascript解释器，不能优化</li>\n</ul>\n<h2 id=\"1-5-严格模式\"><a href=\"#1-5-严格模式\" class=\"headerlink\" title=\"1.5 严格模式\"></a>1.5 严格模式</h2><h3 id=\"1-5-1-严格模式的理解\"><a href=\"#1-5-1-严格模式的理解\" class=\"headerlink\" title=\"1.5.1 严格模式的理解\"></a>1.5.1 严格模式的理解</h3><p>长久以来，javascript不断发展，且没有出现兼容性问题，新特性的加入也会兼容旧代码，但是一些错误或者不完善的地方仍然被保留；<br>在ECMAScript5中，<code>严格模式</code>被提出，在严格模式下：</p>\n<ul>\n<li>严格模式下，一些静默错误会被抛出；</li>\n<li>js解释器会对代码进行更多的优化；</li>\n<li>（禁用一些可能在ECMAScript未来版本中的语法）</li>\n</ul>\n<p><strong>严格模式的开启</strong><br>在<code>script</code>标签、js文件或函数中使用<code>use strict</code>开启严格模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>在<code>class</code>、<code>module</code>等模块中默认启用严格模式；</li>\n<li>打包过后的文件默认也是严格模式；</li>\n</ul>\n<h3 id=\"1-5-2-严格模式的一些限制\"><a href=\"#1-5-2-严格模式的一些限制\" class=\"headerlink\" title=\"1.5.2 严格模式的一些限制\"></a>1.5.2 严格模式的一些限制</h3><ol>\n<li><p>严格模式无法意外创建全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    message = <span class=\"string\">&#x27;xuexi javascript&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message) <span class=\"comment\">// 报错：message is not defined</span></span><br></pre></td></tr></table></figure></li>\n<li><p>静默操作抛出异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zf&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&quot;name&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">name</span>=<span class=\"string\">&#x27;xuexi&#x27;</span>  <span class=\"comment\">//  Cannot assign to read only property &#x27;name&#x27; of object &#x27;#&lt;Object&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">name</span>   <span class=\"comment\">//  Cannot delete property &#x27;name&#x27; of #&lt;Object&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数形参名称不能相同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo1</span>(<span class=\"params\">num, num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num + num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo1</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>));  <span class=\"comment\">// Duplicate parameter name not allowed in this context</span></span><br></pre></td></tr></table></figure></li>\n<li><p>严格模式不允许函数参数有相同的名称</p>\n</li>\n<li><p>不允许0的八进制语法</p>\n</li>\n<li><p>在严格模式下，不允许使用with</p>\n</li>\n<li><p>在严格模式下，eva不再为上层引用变量</p>\n</li>\n<li><p>严格模式下，this绑定不会默认转为对象</p>\n</li>\n</ol>\n<h1 id=\"2-javascript对象增强\"><a href=\"#2-javascript对象增强\" class=\"headerlink\" title=\"2. javascript对象增强\"></a>2. javascript对象增强</h1><h2 id=\"2-1-属性描述符\"><a href=\"#2-1-属性描述符\" class=\"headerlink\" title=\"2.1 属性描述符\"></a>2.1 属性描述符</h2><table>\n<thead>\n<tr>\n<th>属性描述符</th>\n<th>configurable</th>\n<th>enumerable</th>\n<th>writable</th>\n<th>value</th>\n<th>get</th>\n<th>set</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据属性描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>存取属性描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>-</td>\n<td>-</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>数据属性描述符 （默认都为true）</p>\n<ul>\n<li><code>[configurable]</code>  – 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;</li>\n<li><code>[enumerable]</code>  – 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;</li>\n<li><code>[writable]</code> – 是否可以修改数据;</li>\n<li><code>[value]</code> – 是否可以返回属性值;</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xuexi&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">     <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">     <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">     <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     <span class=\"attr\">value</span>: <span class=\"string\">&#x27;xuexi&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>存取属性描述符</p>\n<ul>\n<li><code>[configurable]</code>  – 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;</li>\n<li><code>[enumerable]</code>  – 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;</li>\n<li><code>[get]</code> – 获取属性值,默认为undefined;</li>\n<li><code>[set]</code> – 设置属性值,默认为undefined;</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;getter&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setter&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>同时定义多个属性</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperties</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;getter&#x27;</span>);&#125;,</span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setter&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他属性</strong>(了解即可)</p>\n<ol>\n<li>获取对象属性的属性描述符<ul>\n<li><code>Object.getOwnPropertyDescriptor(obj, &#39;name&#39;)</code>  – 获取对象的单个属性的属性描述符<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(obj, <span class=\"string\">&#x27;name&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 输出：&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    value: &#x27;xuexi&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//            writable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: true</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><code>Object.getOwnPropertyDescriptors(obj, &#39;name&#39;)</code>  – 获取对象全部属性的属性描述符</li>\n</ul>\n</li>\n<li>阻止对象的扩展<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 阻止扩展</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(obj)</span><br><span class=\"line\">obj.<span class=\"property\">address</span> = <span class=\"string\">&#x27;beijing&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br></pre></td></tr></table></figure></li>\n<li>密封对象 – 禁止删除操作<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 密封对象</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">seal</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">name</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br></pre></td></tr></table></figure></li>\n<li>冻结对象 – 禁止修改操作<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冻结对象</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(obj)</span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;renzhenxuexi&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br></pre></td></tr></table></figure></li>\n</ol>\n","length":5065,"excerpt":"","more":"<p>了解一下<code>js</code>函数和对象的相关增强知识。</p>\n<h1 id=\"1-javascript函数增强\"><a href=\"#1-javascript函数增强\" class=\"headerlink\" title=\"1. javascript函数增强\"></a>1. javascript函数增强</h1><h2 id=\"1-1-函数基本概念掌握\"><a href=\"#1-1-函数基本概念掌握\" class=\"headerlink\" title=\"1.1 函数基本概念掌握\"></a>1.1 函数基本概念掌握</h2><h3 id=\"1-1-1-函数对象的属性\"><a href=\"#1-1-1-函数对象的属性\" class=\"headerlink\" title=\"1.1.1 函数对象的属性\"></a>1.1.1 函数对象的属性</h3><p>现定义一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>自定义属性 <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo.<span class=\"property\">title</span> = <span class=\"string\">&quot;foo title&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo.<span class=\"property\">title</span>) <span class=\"comment\">// foo title</span></span><br></pre></td></tr></table></figure></li>\n<li>默认属性<ul>\n<li><code>name</code><br> <code>console.log(foo.name) // foo</code></li>\n<li><code>length</code> (指的是函数参数的个数,但不包括有默认值的参数和可变参数)<br><code>console.log(foo.length) // 2</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-1-2-函数的arguments\"><a href=\"#1-1-2-函数的arguments\" class=\"headerlink\" title=\"1.1.2 函数的arguments\"></a>1.1.2 函数的<code>arguments</code></h3><ol>\n<li><p>三种获取方式</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo1</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 获取arguments</span></span><br><span class=\"line\">   <span class=\"comment\">// 1. arguments是一个伪数组对象，可通过[]字面量继续进行获取</span></span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 2.for循环遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">arguments</span>[i]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 3. for of 遍历   （for of 可用来遍历可迭代对象）</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"variable language_\">arguments</span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>三种转换为数组的方式</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo2</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 转换成数组</span></span><br><span class=\"line\">   <span class=\"comment\">// 1. 将数据放入新数组</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr1 = []</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">       arr1.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 2. [].slice()</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr2 = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 3. Array.from()</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr3 = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr4 = [...<span class=\"variable language_\">arguments</span>]</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"1-1-3-箭头函数的arguments\"><a href=\"#1-1-3-箭头函数的arguments\" class=\"headerlink\" title=\"1.1.3 箭头函数的arguments\"></a>1.1.3 箭头函数的<code>arguments</code></h3><p>箭头函数没有<code>arguments</code>，若在箭头函数内部使用，那么<code>arguments</code>将会向外寻找父级作用域的<code>arguments</code></p>\n<h3 id=\"1-1-4-函数的剩余参数rest\"><a href=\"#1-1-4-函数的剩余参数rest\" class=\"headerlink\" title=\"1.1.4 函数的剩余参数rest\"></a>1.1.4 函数的剩余参数<code>rest</code></h3><p>如果最后一个参数以…为前缀，那么该参数将以数组的形式接收剩余的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">rest</span>(<span class=\"params\">a, ...args</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">rest</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// 1 [2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注：剩余参数必须放在最后一个形参位置，否则会报错。</strong></p>\n<p>剩余参数<code>rest</code>和<code>arguments</code>的区别：</p>\n<ol>\n<li><code>rest</code>以数组形式接收参数，<code>arguments</code>以伪数组对象形式接收参数；</li>\n<li><code>rest</code>接收没有对应形参的实参，<code>arguments</code>接收所有实参</li>\n<li><code>arguments</code>是早期<code>ECMAScript</code>为方便获取参数定义的一个属性，而<code>rest</code>是<code>ECMAScript6</code>新增的希望替代arguments的语法，。</li>\n</ol>\n<h2 id=\"1-2-纯函数\"><a href=\"#1-2-纯函数\" class=\"headerlink\" title=\"1.2 纯函数\"></a>1.2 纯函数</h2><h3 id=\"1-2-2-概念理解\"><a href=\"#1-2-2-概念理解\" class=\"headerlink\" title=\"1.2.2 概念理解\"></a>1.2.2 概念理解</h3><blockquote>\n<p>简单来说，满足有相同输入时总是有相同输出，并且没有任何副作用的函数叫做纯函数。</p>\n</blockquote>\n<ol>\n<li>输入相同时有相同输出<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add1</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这个函数就不是一个纯函数，因为函数内部存在外部变量b，输出可能不一致。</li>\n<li>没有产生任何副作用<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a,b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add1</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这个函数修改了外部变量b，也就是产生了副作用，所以这个函数也不是纯函数。</li>\n</ol>\n<h3 id=\"1-2-2-纯函数案例\"><a href=\"#1-2-2-纯函数案例\" class=\"headerlink\" title=\"1.2.2 纯函数案例\"></a>1.2.2 纯函数案例</h3><blockquote>\n<p>let arr &#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n</blockquote>\n<ul>\n<li><code>slice()</code><blockquote>\n<p>console.log(arr.slice(0, 5), arr);   &#x2F;&#x2F;截取数组</p>\n</blockquote>\n</li>\n</ul>\n<p>输出：[1, 2, 3, 4, 5]   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n<ul>\n<li><code>splice()</code><blockquote>\n<p>console.log(arr.splice(0, 5), arr);</p>\n</blockquote>\n</li>\n</ul>\n<p>输出：[ 1, 2, 3, 4, 5 ] [ 6, 7, 8, 9, 10 ]</p>\n<p>根据输出结果可以知道slice()是纯函数，但splice()不是纯函数，因为splice()修改了arr，产生了外部影响。</p>\n<p><strong>纯函数在函数式编程中很重要，它保证了函数的纯度，只单纯实现自己的业务逻辑，不会对外部变量产生影响。</strong></p>\n<h2 id=\"1-3-函数柯里化\"><a href=\"#1-3-函数柯里化\" class=\"headerlink\" title=\"1.3 函数柯里化\"></a>1.3 函数柯里化</h2><h2 id=\"1-3-1-基本了解\"><a href=\"#1-3-1-基本了解\" class=\"headerlink\" title=\"1.3.1 基本了解\"></a>1.3.1 基本了解</h2><blockquote>\n<p><code>柯里化（Currying）</code>是把接受多个参数的函数变换成接受一个参数的函数，并且返回接受多个参数的函数的函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a, b, c</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>柯里化后：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>箭头函数写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = a =&gt; <span class=\"function\"><span class=\"params\">b</span> =&gt;</span> <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> a + b + c;</span><br></pre></td></tr></table></figure>\n\n<p>柯里化优势：</p>\n<ul>\n<li>职责单一</li>\n<li>参数复用</li>\n</ul>\n<h2 id=\"1-4-with语句和eval函数的使用（了解即可）\"><a href=\"#1-4-with语句和eval函数的使用（了解即可）\" class=\"headerlink\" title=\"1.4 with语句和eval函数的使用（了解即可）\"></a>1.4 with语句和eval函数的使用（了解即可）</h2><ol>\n<li><code>with</code>语句  –  可以访问对象属性<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zf&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.88</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&#x27;北京&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">with</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name, age, height, address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>eval</code>函数  –  可将字符串转换成可执行的js语句<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testStr = <span class=\"string\">&#x27;全局变量&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;const msg = &#x27;hello world&#x27;;console.log(msg);console.log(testStr);&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(str)</span><br></pre></td></tr></table></figure>\n不建议在开发中使用<code>eval</code>函数：</li>\n</ol>\n<ul>\n<li>可读性差</li>\n<li>字符串容易被篡改，可能造成被攻击的风险；</li>\n<li>eval的执行需要经过javascript解释器，不能优化</li>\n</ul>\n<h2 id=\"1-5-严格模式\"><a href=\"#1-5-严格模式\" class=\"headerlink\" title=\"1.5 严格模式\"></a>1.5 严格模式</h2><h3 id=\"1-5-1-严格模式的理解\"><a href=\"#1-5-1-严格模式的理解\" class=\"headerlink\" title=\"1.5.1 严格模式的理解\"></a>1.5.1 严格模式的理解</h3><p>长久以来，javascript不断发展，且没有出现兼容性问题，新特性的加入也会兼容旧代码，但是一些错误或者不完善的地方仍然被保留；<br>在ECMAScript5中，<code>严格模式</code>被提出，在严格模式下：</p>\n<ul>\n<li>严格模式下，一些静默错误会被抛出；</li>\n<li>js解释器会对代码进行更多的优化；</li>\n<li>（禁用一些可能在ECMAScript未来版本中的语法）</li>\n</ul>\n<p><strong>严格模式的开启</strong><br>在<code>script</code>标签、js文件或函数中使用<code>use strict</code>开启严格模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>在<code>class</code>、<code>module</code>等模块中默认启用严格模式；</li>\n<li>打包过后的文件默认也是严格模式；</li>\n</ul>\n<h3 id=\"1-5-2-严格模式的一些限制\"><a href=\"#1-5-2-严格模式的一些限制\" class=\"headerlink\" title=\"1.5.2 严格模式的一些限制\"></a>1.5.2 严格模式的一些限制</h3><ol>\n<li><p>严格模式无法意外创建全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    message = <span class=\"string\">&#x27;xuexi javascript&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message) <span class=\"comment\">// 报错：message is not defined</span></span><br></pre></td></tr></table></figure></li>\n<li><p>静默操作抛出异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zf&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&quot;name&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">name</span>=<span class=\"string\">&#x27;xuexi&#x27;</span>  <span class=\"comment\">//  Cannot assign to read only property &#x27;name&#x27; of object &#x27;#&lt;Object&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">name</span>   <span class=\"comment\">//  Cannot delete property &#x27;name&#x27; of #&lt;Object&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数形参名称不能相同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo1</span>(<span class=\"params\">num, num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num + num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo1</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>));  <span class=\"comment\">// Duplicate parameter name not allowed in this context</span></span><br></pre></td></tr></table></figure></li>\n<li><p>严格模式不允许函数参数有相同的名称</p>\n</li>\n<li><p>不允许0的八进制语法</p>\n</li>\n<li><p>在严格模式下，不允许使用with</p>\n</li>\n<li><p>在严格模式下，eva不再为上层引用变量</p>\n</li>\n<li><p>严格模式下，this绑定不会默认转为对象</p>\n</li>\n</ol>\n<h1 id=\"2-javascript对象增强\"><a href=\"#2-javascript对象增强\" class=\"headerlink\" title=\"2. javascript对象增强\"></a>2. javascript对象增强</h1><h2 id=\"2-1-属性描述符\"><a href=\"#2-1-属性描述符\" class=\"headerlink\" title=\"2.1 属性描述符\"></a>2.1 属性描述符</h2><table>\n<thead>\n<tr>\n<th>属性描述符</th>\n<th>configurable</th>\n<th>enumerable</th>\n<th>writable</th>\n<th>value</th>\n<th>get</th>\n<th>set</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据属性描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>存取属性描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>-</td>\n<td>-</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>数据属性描述符 （默认都为true）</p>\n<ul>\n<li><code>[configurable]</code>  – 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;</li>\n<li><code>[enumerable]</code>  – 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;</li>\n<li><code>[writable]</code> – 是否可以修改数据;</li>\n<li><code>[value]</code> – 是否可以返回属性值;</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\"> <span class=\"attr\">name</span>:<span class=\"string\">&#x27;xuexi&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">     <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">     <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">     <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     <span class=\"attr\">value</span>: <span class=\"string\">&#x27;xuexi&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>存取属性描述符</p>\n<ul>\n<li><code>[configurable]</code>  – 是否可以删除属性，是否可以修改属性，或者是否可以修改为存取属性描述符;</li>\n<li><code>[enumerable]</code>  – 是否可以枚举，即是否可以通过for..in 或者Object.keys()获取到属性;</li>\n<li><code>[get]</code> – 获取属性值,默认为undefined;</li>\n<li><code>[set]</code> – 设置属性值,默认为undefined;</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;getter&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setter&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>同时定义多个属性</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperties</span>(obj, &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;getter&#x27;</span>);&#125;,</span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setter&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他属性</strong>(了解即可)</p>\n<ol>\n<li>获取对象属性的属性描述符<ul>\n<li><code>Object.getOwnPropertyDescriptor(obj, &#39;name&#39;)</code>  – 获取对象的单个属性的属性描述符<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(obj, <span class=\"string\">&#x27;name&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 输出：&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    value: &#x27;xuexi&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">//            writable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: true</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><code>Object.getOwnPropertyDescriptors(obj, &#39;name&#39;)</code>  – 获取对象全部属性的属性描述符</li>\n</ul>\n</li>\n<li>阻止对象的扩展<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 阻止扩展</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(obj)</span><br><span class=\"line\">obj.<span class=\"property\">address</span> = <span class=\"string\">&#x27;beijing&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br></pre></td></tr></table></figure></li>\n<li>密封对象 – 禁止删除操作<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 密封对象</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">seal</span>(obj)</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.<span class=\"property\">name</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br></pre></td></tr></table></figure></li>\n<li>冻结对象 – 禁止修改操作<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冻结对象</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(obj)</span><br><span class=\"line\">obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;renzhenxuexi&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"04-闭包","indexing":false,"keywords":"js高级、闭包","abbrlink":"2f741396","_content":"\n\n# javascript 内存管理\n> 认识内存管理\n\n不管什么样的编程语言，**在代码执行过程中都需要进行内存分配**，不同的是有些编程语言需要我们自己手动进行内存配置，有些则会自动帮我们进行内存分配。\n\n不管什么样的内存分配机制，**内存的分配都会进入如下周期**：\n\n1. 申请分配内存\n2. 使用分配的内存\n3. 不需要使用时释放内存\n\n不同的语言会对第一步和第三步进行不同的处理：\n\n- 手动管理内存：比如`C`、`C++`，包括早期的`OC`，都是需要手动的进行内存的申请和释放（`malloc和free函数`）；\n- 自动管理内存：比如`java`、`javascript`、`Python`、`Swift`、`Dart`等，这些语言都有帮我们自动进行内存管理。\n\n也就是说，我们所使用的`javascript`会自动的对原始值、对象、函数等进行内存管理，我们并不需要进行多余的操作。\n\n![img.png](../../img/js高级/04-closure/img1.png)\n\n# 垃圾回收机制\n\n\n# 闭包的概念理解\n\n\n# 闭包的形成过程\n\n\n\n# 闭包的内存泄漏\n\n\n\n","source":"_posts/js高级/04-闭包.md","raw":"---\ntitle: 04-闭包\ncategories:\n  - 分类\ntags:\n  - js高级\nindexing: false\nkeywords: js高级、闭包\nabbrlink: 2f741396\n---\n\n\n# javascript 内存管理\n> 认识内存管理\n\n不管什么样的编程语言，**在代码执行过程中都需要进行内存分配**，不同的是有些编程语言需要我们自己手动进行内存配置，有些则会自动帮我们进行内存分配。\n\n不管什么样的内存分配机制，**内存的分配都会进入如下周期**：\n\n1. 申请分配内存\n2. 使用分配的内存\n3. 不需要使用时释放内存\n\n不同的语言会对第一步和第三步进行不同的处理：\n\n- 手动管理内存：比如`C`、`C++`，包括早期的`OC`，都是需要手动的进行内存的申请和释放（`malloc和free函数`）；\n- 自动管理内存：比如`java`、`javascript`、`Python`、`Swift`、`Dart`等，这些语言都有帮我们自动进行内存管理。\n\n也就是说，我们所使用的`javascript`会自动的对原始值、对象、函数等进行内存管理，我们并不需要进行多余的操作。\n\n![img.png](../../img/js高级/04-closure/img1.png)\n\n# 垃圾回收机制\n\n\n# 闭包的概念理解\n\n\n# 闭包的形成过程\n\n\n\n# 闭包的内存泄漏\n\n\n\n","slug":"js高级/04-闭包","published":1,"date":"2025-06-04T13:36:01.209Z","updated":"2025-06-07T07:33:45.340Z","comments":1,"layout":"post","photos":[],"_id":"cmcx3vq7f000m1s4h8bzl3c0u","content":"<h1 id=\"javascript-内存管理\"><a href=\"#javascript-内存管理\" class=\"headerlink\" title=\"javascript 内存管理\"></a>javascript 内存管理</h1><blockquote>\n<p>认识内存管理</p>\n</blockquote>\n<p>不管什么样的编程语言，<strong>在代码执行过程中都需要进行内存分配</strong>，不同的是有些编程语言需要我们自己手动进行内存配置，有些则会自动帮我们进行内存分配。</p>\n<p>不管什么样的内存分配机制，<strong>内存的分配都会进入如下周期</strong>：</p>\n<ol>\n<li>申请分配内存</li>\n<li>使用分配的内存</li>\n<li>不需要使用时释放内存</li>\n</ol>\n<p>不同的语言会对第一步和第三步进行不同的处理：</p>\n<ul>\n<li>手动管理内存：比如<code>C</code>、<code>C++</code>，包括早期的<code>OC</code>，都是需要手动的进行内存的申请和释放（<code>malloc和free函数</code>）；</li>\n<li>自动管理内存：比如<code>java</code>、<code>javascript</code>、<code>Python</code>、<code>Swift</code>、<code>Dart</code>等，这些语言都有帮我们自动进行内存管理。</li>\n</ul>\n<p>也就是说，我们所使用的<code>javascript</code>会自动的对原始值、对象、函数等进行内存管理，我们并不需要进行多余的操作。</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/04-closure/img1.png\" alt=\"img.png\"></p>\n<h1 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h1><h1 id=\"闭包的概念理解\"><a href=\"#闭包的概念理解\" class=\"headerlink\" title=\"闭包的概念理解\"></a>闭包的概念理解</h1><h1 id=\"闭包的形成过程\"><a href=\"#闭包的形成过程\" class=\"headerlink\" title=\"闭包的形成过程\"></a>闭包的形成过程</h1><h1 id=\"闭包的内存泄漏\"><a href=\"#闭包的内存泄漏\" class=\"headerlink\" title=\"闭包的内存泄漏\"></a>闭包的内存泄漏</h1>","length":364,"excerpt":"","more":"<h1 id=\"javascript-内存管理\"><a href=\"#javascript-内存管理\" class=\"headerlink\" title=\"javascript 内存管理\"></a>javascript 内存管理</h1><blockquote>\n<p>认识内存管理</p>\n</blockquote>\n<p>不管什么样的编程语言，<strong>在代码执行过程中都需要进行内存分配</strong>，不同的是有些编程语言需要我们自己手动进行内存配置，有些则会自动帮我们进行内存分配。</p>\n<p>不管什么样的内存分配机制，<strong>内存的分配都会进入如下周期</strong>：</p>\n<ol>\n<li>申请分配内存</li>\n<li>使用分配的内存</li>\n<li>不需要使用时释放内存</li>\n</ol>\n<p>不同的语言会对第一步和第三步进行不同的处理：</p>\n<ul>\n<li>手动管理内存：比如<code>C</code>、<code>C++</code>，包括早期的<code>OC</code>，都是需要手动的进行内存的申请和释放（<code>malloc和free函数</code>）；</li>\n<li>自动管理内存：比如<code>java</code>、<code>javascript</code>、<code>Python</code>、<code>Swift</code>、<code>Dart</code>等，这些语言都有帮我们自动进行内存管理。</li>\n</ul>\n<p>也就是说，我们所使用的<code>javascript</code>会自动的对原始值、对象、函数等进行内存管理，我们并不需要进行多余的操作。</p>\n<p><img src=\"/../../img/js%E9%AB%98%E7%BA%A7/04-closure/img1.png\" alt=\"img.png\"></p>\n<h1 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h1><h1 id=\"闭包的概念理解\"><a href=\"#闭包的概念理解\" class=\"headerlink\" title=\"闭包的概念理解\"></a>闭包的概念理解</h1><h1 id=\"闭包的形成过程\"><a href=\"#闭包的形成过程\" class=\"headerlink\" title=\"闭包的形成过程\"></a>闭包的形成过程</h1><h1 id=\"闭包的内存泄漏\"><a href=\"#闭包的内存泄漏\" class=\"headerlink\" title=\"闭包的内存泄漏\"></a>闭包的内存泄漏</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cmcx3vq7500011s4h185vfq3y","category_id":"cmcx3vq7900041s4h25h1edg5","_id":"cmcx3vq7d000e1s4hdy74f4iv"},{"post_id":"cmcx3vq7800031s4hb9ce1mnu","category_id":"cmcx3vq7900041s4h25h1edg5","_id":"cmcx3vq7d000g1s4h8rad09nu"},{"post_id":"cmcx3vq7e000h1s4ha3wd7hys","category_id":"cmcx3vq7900041s4h25h1edg5","_id":"cmcx3vq7f000n1s4h1gcabp06"},{"post_id":"cmcx3vq7e000i1s4h5skr9xfl","category_id":"cmcx3vq7900041s4h25h1edg5","_id":"cmcx3vq7f000p1s4h88ph9n5p"},{"post_id":"cmcx3vq7e000k1s4h8w8ie2mz","category_id":"cmcx3vq7900041s4h25h1edg5","_id":"cmcx3vq7f000r1s4h1zj8batc"},{"post_id":"cmcx3vq7f000m1s4h8bzl3c0u","category_id":"cmcx3vq7900041s4h25h1edg5","_id":"cmcx3vq7f000s1s4haf3hdmf2"}],"PostTag":[{"post_id":"cmcx3vq7500011s4h185vfq3y","tag_id":"cmcx3vq7a00051s4hhlolgiwc","_id":"cmcx3vq7c000b1s4h94enaevu"},{"post_id":"cmcx3vq7800031s4hb9ce1mnu","tag_id":"cmcx3vq7c000a1s4h9bg76bap","_id":"cmcx3vq7d000f1s4h11tw4y03"},{"post_id":"cmcx3vq7e000h1s4ha3wd7hys","tag_id":"cmcx3vq7c000a1s4h9bg76bap","_id":"cmcx3vq7e000j1s4h2j2jhs72"},{"post_id":"cmcx3vq7e000i1s4h5skr9xfl","tag_id":"cmcx3vq7c000a1s4h9bg76bap","_id":"cmcx3vq7f000l1s4h31lne6s9"},{"post_id":"cmcx3vq7e000k1s4h8w8ie2mz","tag_id":"cmcx3vq7c000a1s4h9bg76bap","_id":"cmcx3vq7f000o1s4h6a5s7r47"},{"post_id":"cmcx3vq7f000m1s4h8bzl3c0u","tag_id":"cmcx3vq7c000a1s4h9bg76bap","_id":"cmcx3vq7f000q1s4hcgsybdr4"}],"Tag":[{"name":"nginx","_id":"cmcx3vq7a00051s4hhlolgiwc"},{"name":"js高级","_id":"cmcx3vq7c000a1s4h9bg76bap"}]}}